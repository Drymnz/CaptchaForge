package com.cunoc.CaptchaForge.Model.JflexAndCup.CaptchaReportDataBase;

import java_cup.runtime.*;
import java.util.ArrayList;

import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.CaptchaReportDataBase.Data.*;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import com.cunoc.CaptchaForge.Model.Utility.Converter.ConverterDataToReportCaptcha;
import com.cunoc.CaptchaForge.Model.WebIdentities.ReportCaptcha;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<ReportCaptcha> listReportCaptcha = new ArrayList();
private ArrayList<DataReportCaptch> dataStack = new ArrayList();

	  public ParserCaptchaReportDataBase(LexemaCaptchaReportDataBase Lexema) {
        super(Lexema);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    public ArrayList<ReportCaptcha> getListReportCaptcha(){
        return this.listReportCaptcha;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
/*sxon*/
terminal String STRING;
/*SIMBOLOS DE OPERACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR;
terminal PARENTESIS_A,PARENTESIS_C;
terminal String REAL_NUMEBERS,STRING_DATE;
/*AGRUPACION*/
terminal BRACKETS_O,BRACKETS_C;
terminal KEYS_O,KEYS_C;
//tipos de solicitud
terminal COLNO,COMA;
terminal ID,NUMBER_HITS,NUMBER_FAILL,LAST_DATA;
/* No terminales */
//inicio
non terminal bucle_inicio;
non terminal inicio;
//solicitud
non terminal json;
non terminal obj_json,data,data_user,datas_user;
non terminal secuenci_json;
non terminal empty_list;
//operaicones
non terminal inico_opereacion,operacion,parente;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
precedence left PARENTESIS_A, PARENTESIS_C;

/* GramÃ¡tica */
start with inicio;
/******operaciones matematicas*****/
inicio ::= bucle_inicio
    | error bucle_inicio
    |
    ;

bucle_inicio 
  ::= bucle_inicio json
  |json
  ;

json::=
  BRACKETS_O empty_list BRACKETS_C
  |secuenci_json
  ;

empty_list
  ::= secuenci_json
  |
  ;

secuenci_json 
  ::=obj_json COMA secuenci_json
  |obj_json
  ;  

obj_json ::=
  KEYS_O datas_user KEYS_C   
  {:
    listReportCaptcha.add(new ConverterDataToReportCaptcha().DataToReportCaptcha(new RequestReportCaptcha(dataStack)));
    dataStack = new ArrayList();
  :}
  ;

datas_user 
  ::= datas_user COMA  data_user
  |data_user
  ;

data_user::=
  ID data:a 
   {:if(a!=null)dataStack.add(new DataReportCaptch(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeDataReportCaptcha.ID,a.toString()));:}
  |NUMBER_HITS data:a 
  {:if(a!=null)dataStack.add(new DataReportCaptch(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeDataReportCaptcha.NUMBER_HITS,a.toString()));:}
  |NUMBER_FAILL data:a 
  {:if(a!=null)dataStack.add(new DataReportCaptch(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeDataReportCaptcha.NUMBER_FAILL,a.toString()));:}
  |LAST_DATA data:a 
  {:if(a!=null)dataStack.add(new DataReportCaptch(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeDataReportCaptcha.LAST_DATA,a.toString()));:}
  ;

data ::=COLNO STRING:a {:RESULT = a;:}
  | COLNO inico_opereacion:a {:RESULT = a;:}
  | COLNO STRING_DATE:a {:RESULT = a;:}
  | error
  | 
  ;

/******operaciones matematicas*****/
/*A QUI ESTA EL TOTAL DE LA OPERACION*/
inico_opereacion ::= operacion:a 
    {:
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    :} 
    ;
/******operaciones matematicas*****/
operacion 
/**SUMA**/
::= operacion:a SUMAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    :}

/**RESTA**/
|  operacion:a RESTAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/**DIVISION**/
|  operacion:a DIVIDIR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}

/**MULTIPLICACION**/
|  operacion:a MULTIPLICAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/****solo retornar*****/
| PARENTESIS_A operacion:a  parente:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
| REAL_NUMEBERS:a {:RESULT = a;:}
| REAL_NUMEBERS:a PARENTESIS_A  operacion:b  PARENTESIS_C
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
/***manejar el error***/
;

parente
  ::= PARENTESIS_C
  | PARENTESIS_C operacion:a {:RESULT = a;:}
  ;