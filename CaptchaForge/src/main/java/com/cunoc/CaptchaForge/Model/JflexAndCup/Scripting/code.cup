package com.cunoc.CaptchaForge.Model.JflexAndCup.Scripting;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();


	  public ParserScripting(LexemaScripting lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
//TIPOS DE DATOS
terminal INTEGER,DECIMAL,BOOLEAN,CHAR,STRING;
/* OPERADORES */
//Operadores logicos
terminal SAME_AS,NOT_THE_SAME,LESS_THAN,LESS_THAN_EQUAL,GREATER_THAN,GREATER_THAN_EQUAL,OR,AND,NOT;
//Operadores aritmetico
terminal ADDITION ,SUBTRACTION ,DIVISION ,MULTIPLICATION ;
//agrupacion
terminal PARENTHESIS_CLOSE,PARENTHESIS_OPEN;
terminal MODO;
terminal INSERT;
terminal INIT,START_INIT,AND_INIT;
terminal IF,THEN,END,ELSE;
terminal REPEAT,HUNTIL;
terminal WHILE;
/*FUNCIONES*/
terminal ASC,DESC,LETPAR_NUM,LETIMPAR_NUM,REVERSE,CARACTER_ALEATORIO,NUM_ALEATORIO,ALERT_INFO,EXIT,REDIRECT;
/* No terminales */
//inicio
non terminal inicio;
//tipos de datos
non terminal tipos_datos;
//operadores
non terminal tipos_operadores_logicos;
/* Gram√°tica */
start with inicio;
/**********************************************INICIO DE LA GRAMATICA******************************/
inicio ::= tipos_datos tipos_operadores_logicos
    |error tipos_datos tipos_operadores_logicos
    |
    ;
/**********************************************ESTRUCTURA DE LA GRAMATICA******************************/


tipos_datos ::= 
INTEGER
|DECIMAL
|BOOLEAN
|CHAR
|STRING
; 

tipos_operadores_logicos::= 
SAME_AS
|NOT_THE_SAME
|LESS_THAN
|LESS_THAN_EQUAL
|GREATER_THAN
|GREATER_THAN_EQUAL
|OR
|AND
|NOT
;