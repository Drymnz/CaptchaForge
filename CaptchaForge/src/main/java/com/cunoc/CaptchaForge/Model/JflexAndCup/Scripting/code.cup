package com.cunoc.CaptchaForge.Model.JflexAndCup.Scripting;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();


	  public ParserScripting(LexemaScripting lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
//TIPOS DE DATOS
terminal INTEGER,DECIMAL,BOOLEAN,CHAR,STRING;
terminal ID;
terminal SEMICOLON,COMA;
terminal TRUE,FALSE;
terminal REAL_NUMEBERS;
terminal TEXT;
terminal EQUAL;
/* OPERADORES */
//Operadores logicos
terminal SAME_AS,NOT_THE_SAME,LESS_THAN,LESS_THAN_EQUAL,GREATER_THAN,GREATER_THAN_EQUAL,OR,AND,NOT;
//Operadores aritmetico
terminal ADDITION ,SUBTRACTION ,DIVISION ,MULTIPLICATION ;
//agrupacion
terminal PARENTHESIS_CLOSE,PARENTHESIS_OPEN;
terminal BRACKETS_OPEN,BRACKETS_CLOSE;
// SIMBOLO CONSTANTE
terminal MODO;
//INSERTAR
terminal INSERT;
// PARA SENTENCIAS DE CONTROL
terminal INIT,START_INIT,AND_INIT;
terminal IF,THEN,END,ELSE;
terminal REPEAT,HUNTIL;
terminal WHILE;
/*FUNCIONES*/
terminal ASC,DESC,LETPAR_NUM,LETIMPAR_NUM,REVERSE,CARACTER_ALEATORIO,NUM_ALEATORIO,ALERT_INFO,EXIT,REDIRECT;
/* No terminales */
//inicio
non terminal inicio;
non terminal bucle_inicio,instrucciones;
//funciones
non terminal funcion,bucle_funcione;
//tipos de datos
non terminal tipos_datos;
//operadores
non terminal tipos_operadores_logicos;
//declaracion
non terminal declaracion,derivando_declaracion;
non terminal bucle_id;
//asignar
non terminal asignar,asignar_variable;
/*OPERACIONES*/
non terminal operaciones;
/*************************************PRECEDENCIA******************************************************/
precedence left ADDITION, SUBTRACTION;
precedence left DIVISION, MULTIPLICATION;
precedence left SAME_AS, NOT_THE_SAME , LESS_THAN , LESS_THAN_EQUAL, GREATER_THAN , GREATER_THAN_EQUAL;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left PARENTHESIS_OPEN,PARENTHESIS_CLOSE;
/* Gram√°tica */
start with inicio;
/**********************************************INICIO DE LA GRAMATICA******************************/
inicio ::= bucle_inicio
    |error bucle_inicio
    |
    ;
/**********************************************ESTRUCTURA DE LA GRAMATICA******************************/
bucle_inicio::= bucle_inicio instrucciones
|instrucciones
;

instrucciones::= funcion
| declaracion
| asignar_variable
;

//  FUNCTION_calc(               )                     [           ]
funcion::= ID PARENTHESIS_OPEN PARENTHESIS_CLOSE BRACKETS_OPEN  bucle_funcione ; 

bucle_funcione::= BRACKETS_CLOSE
|bucle_inicio BRACKETS_CLOSE
;

// DECLARACION
declaracion::= tipos_datos derivando_declaracion asignar ; 

derivando_declaracion ::= bucle_id
|MODO ID 
;

bucle_id ::= bucle_id COMA ID
|ID
;

tipos_datos ::= 
INTEGER
|DECIMAL
|BOOLEAN
|CHAR
|STRING
; 

// DECLARACION ASIGNACION
asignar_variable::= ID EQUAL operaciones SEMICOLON ; 

asignar::= SEMICOLON
|EQUAL operaciones SEMICOLON
; 
/**********************************************ESTRUCTURA DE LA OPERACIONES******************************/
operaciones::= 
// ==
 operaciones SAME_AS            operaciones
 //!=
|operaciones NOT_THE_SAME       operaciones
//<
|operaciones LESS_THAN          operaciones
//<=
|operaciones LESS_THAN_EQUAL    operaciones
//>
|operaciones GREATER_THAN       operaciones
//>=
|operaciones GREATER_THAN_EQUAL operaciones
//||
|operaciones OR                 operaciones
//&&
|operaciones AND                operaciones
//! 
|NOT operaciones 
//+
|operaciones ADDITION           operaciones
//-
|operaciones SUBTRACTION        operaciones
// /
|operaciones DIVISION           operaciones
// *
|operaciones MULTIPLICATION     operaciones
// ( *** )
|operaciones PARENTHESIS_OPEN   operaciones 
|operaciones PARENTHESIS_CLOSE  operaciones 
//Datos
|TEXT
|TRUE
|FALSE
|REAL_NUMEBERS
|ID
; 