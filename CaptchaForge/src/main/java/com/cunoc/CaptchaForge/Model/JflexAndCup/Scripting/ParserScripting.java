
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.Scripting;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserScripting extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymScripting.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserScripting() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserScripting(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserScripting(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\020\002\ufffe\003\006\004\004\005\012\006" +
    "\010\007\011\010\005\001\002\000\024\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\001\002\000\024\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\001\002\000" +
    "\014\004\004\005\012\006\010\007\011\010\005\001\002" +
    "\000\024\011\022\012\020\013\017\014\016\015\024\016" +
    "\023\017\026\020\015\021\025\001\002\000\024\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\001\002\000\024\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\001" +
    "\002\000\024\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\001\002\000\004\002" +
    "\014\001\002\000\004\002\001\001\002\000\004\002\ufff1" +
    "\001\002\000\004\002\ufff5\001\002\000\004\002\ufff6\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\000\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\ufff3\001\002\000" +
    "\004\002\ufff4\001\002\000\004\002\ufff0\001\002\000\004" +
    "\002\ufff2\001\002\000\024\011\022\012\020\013\017\014" +
    "\016\015\024\016\023\017\026\020\015\021\025\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\006\002\012\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\026\001\001\000\004" +
    "\004\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\027\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserScripting$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserScripting$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserScripting$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();


	  public ParserScripting(LexemaScripting lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserScripting$actions {
  private final ParserScripting parser;

  /** Constructor */
  CUP$ParserScripting$actions(ParserScripting parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserScripting$do_action_part00000000(
    int                        CUP$ParserScripting$act_num,
    java_cup.runtime.lr_parser CUP$ParserScripting$parser,
    java.util.Stack            CUP$ParserScripting$stack,
    int                        CUP$ParserScripting$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserScripting$result;

      /* select the action based on the action number */
      switch (CUP$ParserScripting$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.elementAt(CUP$ParserScripting$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.elementAt(CUP$ParserScripting$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserScripting$stack.elementAt(CUP$ParserScripting$top-1)).value;
		RESULT = start_val;
              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.elementAt(CUP$ParserScripting$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserScripting$parser.done_parsing();
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= tipos_datos tipos_operadores_logicos 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.elementAt(CUP$ParserScripting$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error tipos_datos tipos_operadores_logicos 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.elementAt(CUP$ParserScripting$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos_datos ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_datos",1, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos_datos ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_datos",1, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos_datos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_datos",1, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos_datos ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_datos",1, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos_datos ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_datos",1, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipos_operadores_logicos ::= SAME_AS 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipos_operadores_logicos ::= NOT_THE_SAME 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipos_operadores_logicos ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipos_operadores_logicos ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipos_operadores_logicos ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipos_operadores_logicos ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipos_operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipos_operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipos_operadores_logicos ::= NOT 
            {
              Object RESULT =null;

              CUP$ParserScripting$result = parser.getSymbolFactory().newSymbol("tipos_operadores_logicos",2, ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScripting$stack.peek()), RESULT);
            }
          return CUP$ParserScripting$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserScripting$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserScripting$do_action(
    int                        CUP$ParserScripting$act_num,
    java_cup.runtime.lr_parser CUP$ParserScripting$parser,
    java.util.Stack            CUP$ParserScripting$stack,
    int                        CUP$ParserScripting$top)
    throws java.lang.Exception
    {
              return CUP$ParserScripting$do_action_part00000000(
                               CUP$ParserScripting$act_num,
                               CUP$ParserScripting$parser,
                               CUP$ParserScripting$stack,
                               CUP$ParserScripting$top);
    }
}

}
