// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package com.cunoc.CaptchaForge.Model.JflexAndCup.Scripting;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.StringReader;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaScripting implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\0\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\31\1\36\1\37\2\31\1\40"+
    "\1\41\1\42\1\43\1\44\1\31\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\31\1\54\1\55\1\56"+
    "\1\0\1\57\1\0\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\2\31\1\71\1\72\1\73"+
    "\1\74\2\31\1\75\1\76\1\77\1\100\5\31\1\101"+
    "\1\102\1\103\7\0\1\3\32\0\1\1\40\0\1\31"+
    "\7\0\1\31\3\0\1\31\3\0\1\31\1\0\1\31"+
    "\6\0\1\31\6\0\1\31\7\0\1\31\3\0\1\31"+
    "\3\0\1\31\1\0\1\31\6\0\1\31\u0185\0\1\1"+
    "\177\0\13\1\16\0\1\104\16\0\2\3\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0\u0100\105";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\4\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\1\14\1\15"+
    "\1\16\1\17\1\1\15\20\1\21\1\22\7\20\1\1"+
    "\1\2\1\1\1\0\1\23\1\0\1\24\1\0\1\25"+
    "\1\0\1\26\1\0\1\20\1\0\1\27\1\0\1\30"+
    "\1\31\1\32\1\0\10\20\1\33\16\20\1\34\2\0"+
    "\1\35\1\36\1\26\1\0\1\37\2\0\1\20\1\40"+
    "\3\20\1\41\23\20\1\35\2\0\2\20\1\42\1\43"+
    "\1\44\1\20\1\45\10\20\1\46\2\20\1\47\4\20"+
    "\1\50\2\0\14\20\1\51\2\20\1\52\2\20\2\0"+
    "\2\20\1\53\1\54\5\20\1\55\5\20\1\56\1\57"+
    "\5\20\1\60\1\20\1\61\1\20\1\62\1\63\1\64"+
    "\5\20\1\65\6\20\1\66\1\67\2\20\1\70\5\20"+
    "\1\71\2\20\1\72\4\20\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\106\0\u0230"+
    "\0\u0276\0\106\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\106\0\106\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\106\0\u0118\0\106\0\u0a64\0\106\0\u01ea\0\106\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\106\0\u0b7c\0\106\0\106\0\106\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u041a\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\106"+
    "\0\u09d8\0\u120c\0\106\0\106\0\u01ea\0\u015e\0\u0b36\0\u1252"+
    "\0\u1298\0\u12de\0\u041a\0\u1324\0\u136a\0\u13b0\0\u041a\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u09d8\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u041a"+
    "\0\u041a\0\u041a\0\u1a40\0\u041a\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u041a"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u041a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c"+
    "\0\u21a2\0\u21e8\0\u222e\0\u041a\0\u2274\0\u22ba\0\u041a\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u041a\0\u041a\0\u24a4"+
    "\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u041a\0\u2602\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u041a\0\106\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u041a\0\u28be\0\u041a\0\u2904\0\u041a\0\u041a\0\u041a"+
    "\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u041a\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u041a\0\u041a\0\u2c4c\0\u2c92"+
    "\0\u041a\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u041a\0\u2e36"+
    "\0\u2e7c\0\u041a\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u041a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\30\1\34\1\35\1\36\1\30"+
    "\1\37\1\40\1\30\1\41\1\30\1\42\2\30\1\43"+
    "\1\30\1\44\1\2\1\45\1\6\1\30\1\46\1\47"+
    "\1\50\1\30\1\51\2\30\1\52\5\30\1\53\1\54"+
    "\1\30\1\55\1\56\1\2\1\57\1\2\107\0\3\3"+
    "\76\0\1\3\7\0\1\60\20\0\1\61\60\0\5\62"+
    "\1\63\47\62\1\64\30\62\21\0\1\30\6\0\24\30"+
    "\4\0\21\30\14\0\1\65\76\0\10\66\1\67\44\66"+
    "\1\70\30\66\6\0\1\71\10\0\1\72\1\0\1\20"+
    "\6\0\24\30\3\0\1\71\21\30\1\0\1\71\106\0"+
    "\1\73\6\0\1\74\20\0\1\75\105\0\1\76\105\0"+
    "\1\77\146\0\1\100\25\0\1\71\12\0\1\30\6\0"+
    "\10\30\1\101\5\30\1\102\5\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\24\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\1\103\23\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\4\30\1\104"+
    "\17\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\10\30\1\105\1\30\1\106\10\30"+
    "\1\107\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\20\30\1\110\3\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\5\30\1\111\4\30\1\112\11\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\4\30"+
    "\1\113\17\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\20\30\1\114\3\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\12\30\1\115\11\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\4\30\1\116"+
    "\17\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\6\30\1\117\15\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\6\30\1\120\15\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\24\30\3\0\1\71"+
    "\14\30\1\121\4\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\24\30\3\0\1\71\7\30\1\122\11\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\24\30"+
    "\3\0\1\71\4\30\1\123\14\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\24\30\3\0\1\71\1\124"+
    "\20\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\24\30\3\0\1\71\13\30\1\125\5\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\24\30\3\0\1\71"+
    "\17\30\1\126\1\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\24\30\3\0\1\71\15\30\1\127\3\30"+
    "\1\0\1\71\25\0\1\130\64\0\3\3\15\0\1\30"+
    "\6\0\24\30\4\0\21\30\1\0\1\3\3\0\55\131"+
    "\1\132\26\131\1\133\1\131\2\60\1\134\103\60\2\62"+
    "\2\0\101\62\1\0\10\66\1\135\44\66\1\70\30\66"+
    "\6\0\1\136\12\0\1\30\6\0\24\30\3\0\1\136"+
    "\21\30\1\0\1\136\24\0\1\137\102\0\1\140\160\0"+
    "\1\141\22\0\1\71\12\0\1\30\6\0\4\30\1\142"+
    "\17\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\2\30\1\143\21\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\15\30\1\144\6\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\16\30\1\145\5\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\16\30\1\146\5\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\3\30"+
    "\1\147\20\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\7\30\1\150\14\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\12\30\1\151\11\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\7\30\1\152"+
    "\6\30\1\153\5\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\17\30\1\154\4\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\11\30\1\155\12\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\24\30"+
    "\3\0\1\156\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\3\30\1\157\10\30\1\160\4\30\1\161"+
    "\2\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\4\30\1\162\17\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\7\30\1\163\14\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\24\30\3\0\1\71"+
    "\14\30\1\164\4\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\24\30\3\0\1\71\1\165\20\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\24\30\3\0"+
    "\1\71\2\30\1\166\16\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\24\30\3\0\1\71\11\30\1\167"+
    "\7\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\24\30\3\0\1\71\17\30\1\170\1\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\24\30\3\0\1\71"+
    "\15\30\1\171\3\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\24\30\3\0\1\71\20\30\1\172\1\0"+
    "\1\71\3\0\55\131\1\132\26\131\1\173\1\131\16\0"+
    "\1\174\163\0\1\175\17\0\1\71\12\0\1\30\6\0"+
    "\15\30\1\176\6\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\1\177\23\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\2\30\1\200\21\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\4\30\1\201"+
    "\17\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\17\30\1\202\4\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\17\30\1\203\4\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\17\30\1\204\4\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\4\30\1\205\17\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\7\30"+
    "\1\206\4\30\1\207\7\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\24\30\3\0"+
    "\1\210\21\30\1\0\1\71\11\0\1\136\12\0\1\30"+
    "\6\0\10\30\1\211\13\30\3\0\1\136\21\30\1\0"+
    "\1\136\11\0\1\71\12\0\1\30\6\0\7\30\1\212"+
    "\14\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\4\30\1\213\17\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\4\30\1\214\17\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\12\30\1\215\11\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\10\30\1\216\13\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\24\30"+
    "\3\0\1\71\11\30\1\217\7\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\24\30\3\0\1\71\15\30"+
    "\1\220\3\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\24\30\3\0\1\71\10\30\1\221\10\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\24\30\3\0"+
    "\1\71\16\30\1\222\2\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\24\30\3\0\1\71\4\30\1\223"+
    "\14\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\24\30\3\0\1\71\10\30\1\224\10\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\24\30\3\0\1\71"+
    "\4\30\1\225\14\30\1\0\1\71\3\0\16\174\1\226"+
    "\67\174\61\0\1\227\32\0\1\71\12\0\1\30\6\0"+
    "\17\30\1\230\4\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\2\30\1\231\21\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\7\30\1\232\14\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\15\30"+
    "\1\233\6\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\11\30\1\234\12\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\1\235\23\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\136\12\0\1\30\6\0\1\236\23\30\3\0"+
    "\1\136\21\30\1\0\1\136\11\0\1\71\12\0\1\30"+
    "\6\0\13\30\1\237\10\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\15\30\1\240"+
    "\6\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\1\241\23\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\15\30"+
    "\1\242\6\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\22\30\1\243\1\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\4\30\1\244\17\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\24\30\3\0"+
    "\1\71\4\30\1\245\14\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\24\30\3\0\1\71\12\30\1\246"+
    "\6\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\24\30\3\0\1\71\4\30\1\247\14\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\24\30\3\0\1\71"+
    "\6\30\1\250\12\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\24\30\3\0\1\71\13\30\1\251\5\30"+
    "\1\0\1\71\3\0\16\174\1\252\67\174\60\0\1\253"+
    "\33\0\1\71\12\0\1\30\6\0\24\30\3\0\1\254"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\17\30\1\255\4\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\10\30\1\256\13\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\17\30\1\257\4\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\14\30"+
    "\1\260\7\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\15\30\1\261\6\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\10\30\1\262\13\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\1\263\23\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\4\30\1\264\17\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\17\30"+
    "\1\265\4\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\16\30\1\266\5\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\6\30\1\267\15\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\24\30\3\0"+
    "\1\71\1\270\20\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\24\30\3\0\1\71\1\271\20\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\24\30\3\0"+
    "\1\71\4\30\1\272\14\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\24\30\3\0\1\71\6\30\1\273"+
    "\12\30\1\0\1\71\3\0\16\174\1\252\7\174\1\134"+
    "\57\174\71\0\1\274\22\0\1\136\12\0\1\30\6\0"+
    "\7\30\1\275\14\30\3\0\1\136\21\30\1\0\1\136"+
    "\11\0\1\71\12\0\1\30\6\0\4\30\1\276\17\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\1\277\23\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\24\30\3\0"+
    "\1\300\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\4\30\1\301\17\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\3\30\1\302"+
    "\20\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\2\30\1\303\21\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\4\30\1\304\17\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\7\30\1\305\14\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\24\30\3\0\1\71\13\30\1\306\5\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\24\30"+
    "\3\0\1\71\11\30\1\307\7\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\24\30\3\0\1\71\15\30"+
    "\1\310\3\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\12\30\1\311\11\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\15\30\1\312"+
    "\6\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\15\30\1\313\6\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\136\12\0\1\30\6\0"+
    "\12\30\1\314\11\30\3\0\1\136\21\30\1\0\1\136"+
    "\11\0\1\71\12\0\1\30\6\0\1\315\23\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\17\30\1\316\4\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\10\30\1\317"+
    "\13\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\5\30\1\320\16\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\24\30\3\0\1\321\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\24\30\3\0\1\322\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\20\30\1\323"+
    "\3\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\17\30\1\324\4\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\4\30\1\325\17\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\13\30\1\326\10\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\136\12\0"+
    "\1\30\6\0\1\327\23\30\3\0\1\136\21\30\1\0"+
    "\1\136\11\0\1\136\12\0\1\30\6\0\12\30\1\330"+
    "\11\30\3\0\1\136\21\30\1\0\1\136\11\0\1\71"+
    "\12\0\1\30\6\0\11\30\1\331\12\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\13\30\1\332\10\30\3\0\1\71\21\30\1\0\1\71"+
    "\11\0\1\71\12\0\1\30\6\0\10\30\1\333\13\30"+
    "\3\0\1\71\21\30\1\0\1\71\11\0\1\71\12\0"+
    "\1\30\6\0\20\30\1\334\3\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\15\30"+
    "\1\335\6\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\4\30\1\336\17\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\11\30\1\337\12\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\7\30\1\340"+
    "\14\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\1\341\23\30\3\0\1\71\21\30"+
    "\1\0\1\71\11\0\1\71\12\0\1\30\6\0\13\30"+
    "\1\342\10\30\3\0\1\71\21\30\1\0\1\71\11\0"+
    "\1\71\12\0\1\30\6\0\17\30\1\343\4\30\3\0"+
    "\1\71\21\30\1\0\1\71\11\0\1\71\12\0\1\30"+
    "\6\0\13\30\1\344\10\30\3\0\1\71\21\30\1\0"+
    "\1\71\11\0\1\71\12\0\1\30\6\0\15\30\1\345"+
    "\6\30\3\0\1\71\21\30\1\0\1\71\11\0\1\71"+
    "\12\0\1\30\6\0\7\30\1\346\14\30\3\0\1\71"+
    "\21\30\1\0\1\71\11\0\1\71\12\0\1\30\6\0"+
    "\13\30\1\347\10\30\3\0\1\71\21\30\1\0\1\71"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12250];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\7\11\2\1\1\11\21\1\2\11"+
    "\12\1\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\1\1\0\1\11\1\0\3\11\1\0"+
    "\27\1\1\11\2\0\2\11\1\1\1\0\1\1\2\0"+
    "\32\1\2\0\30\1\2\0\22\1\2\0\20\1\1\11"+
    "\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/
    private String stringScripting = "";
    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();

    public LexemaScripting(String in) {
        this.zzReader = new StringReader(in);
    }
      
    private void print(String token) {
    //System.out.println(token+ " < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ""));
    }

    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }
    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaScripting(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(SymScripting.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 60: break;
          case 2:
            { 
            }
          // fall through
          case 61: break;
          case 3:
            { print("!"   ); return new Symbol(SymScripting.NOT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 62: break;
          case 4:
            { print("("); return new Symbol(SymScripting.PARENTHESIS_OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 63: break;
          case 5:
            { print(")"); return new Symbol(SymScripting.PARENTHESIS_CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 64: break;
          case 6:
            { print("*"); return new Symbol(SymScripting.MULTIPLICATION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 65: break;
          case 7:
            { print("+"); return new Symbol(SymScripting.ADDITION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 66: break;
          case 8:
            { print(","); return new Symbol(SymScripting.COMA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 67: break;
          case 9:
            { print("-"); return new Symbol(SymScripting.SUBTRACTION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 68: break;
          case 10:
            { print("/"); return new Symbol(SymScripting.DIVISION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 69: break;
          case 11:
            { print("NUM_INTEGER"); return new Symbol(SymScripting.NUM_INTEGER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 70: break;
          case 12:
            { print(";"); return new Symbol(SymScripting.SEMICOLON ,yyline,yycolumn,yytext());
            }
          // fall through
          case 71: break;
          case 13:
            { print("<"   ); return new Symbol(SymScripting.LESS_THAN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 72: break;
          case 14:
            { print("="); return new Symbol(SymScripting.EQUAL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 73: break;
          case 15:
            { print(">"   ); return new Symbol(SymScripting.GREATER_THAN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 74: break;
          case 16:
            { print("ID"); return new Symbol(SymScripting.ID ,yyline,yycolumn,yytext());
            }
          // fall through
          case 75: break;
          case 17:
            { print("["); return new Symbol(SymScripting.BRACKETS_OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 76: break;
          case 18:
            { print("]"); return new Symbol(SymScripting.BRACKETS_CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 77: break;
          case 19:
            { print("!="  ); return new Symbol(SymScripting.NOT_THE_SAME ,yyline,yycolumn,yytext());
            }
          // fall through
          case 78: break;
          case 20:
            { print("STRING_FIRS"); return new Symbol(SymScripting.TEXT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 79: break;
          case 21:
            { print("&&"  ); return new Symbol(SymScripting.AND ,yyline,yycolumn,yytext());
            }
          // fall through
          case 80: break;
          case 22:
            { print("CHAR_TEXT"); return new Symbol(SymScripting.CHAR_TEXT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 81: break;
          case 23:
            { print(":}"  ); return new Symbol(SymScripting.AND_INIT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 82: break;
          case 24:
            { print("<="  ); return new Symbol(SymScripting.LESS_THAN_EQUAL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 83: break;
          case 25:
            { print("=="  ); return new Symbol(SymScripting.SAME_AS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 84: break;
          case 26:
            { print(">="  ); return new Symbol(SymScripting.GREATER_THAN_EQUAL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 85: break;
          case 27:
            { print("IF"  ); return new Symbol(SymScripting.IF ,yyline,yycolumn,yytext());
            }
          // fall through
          case 86: break;
          case 28:
            { print("{:"  ); return new Symbol(SymScripting.START_INIT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 87: break;
          case 29:
            { print("STRING_THIRD"); return new Symbol(SymScripting.TEXT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 88: break;
          case 30:
            { /* print(); */
            }
          // fall through
          case 89: break;
          case 31:
            { print("NUM_DECIMAL"); return new Symbol(SymScripting.NUM_DECIMAL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 90: break;
          case 32:
            { print("ASC"               ); return new Symbol(SymScripting.ASC ,yyline,yycolumn,yytext());
            }
          // fall through
          case 91: break;
          case 33:
            { print("END" ); return new Symbol(SymScripting.END ,yyline,yycolumn,yytext());
            }
          // fall through
          case 92: break;
          case 34:
            { print("DESC"              ); return new Symbol(SymScripting.DESC ,yyline,yycolumn,yytext());
            }
          // fall through
          case 93: break;
          case 35:
            { print("ELSE"); return new Symbol(SymScripting.ELSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 94: break;
          case 36:
            { print("EXIT"              ); return new Symbol(SymScripting.EXIT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 37:
            { print("INIT"); return new Symbol(SymScripting.INIT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 38:
            { print("THEN"); return new Symbol(SymScripting.THEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 39:
            { print("char"    ); return new Symbol(SymScripting.CHAR ,yyline,yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 40:
            { print("true" ); return new Symbol(SymScripting.TRUE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 41:
            { print("WHILE"); return new Symbol(SymScripting.WHILE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 42:
            { print("false"); return new Symbol(SymScripting.FALSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 43:
            { print("HUNTIL"); return new Symbol(SymScripting.HUNTIL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 44:
            { print("INSERT"            ); return new Symbol(SymScripting.INSERT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 45:
            { print("REPEAT"); return new Symbol(SymScripting.REPEAT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 46:
            { print("string"  ); return new Symbol(SymScripting.STRING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 47:
            { print("@global"); return new Symbol(SymScripting.MODO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 48:
            { print("ON_LOAD"           ); return new Symbol(SymScripting.ON_LOAD ,yyline,yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 49:
            { print("REVERSE"           ); return new Symbol(SymScripting.REVERSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 50:
            { print("boolean" ); return new Symbol(SymScripting.BOOLEAN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 51:
            { print("decimal" ); return new Symbol(SymScripting.DECIMAL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 52:
            { print("integer" ); return new Symbol(SymScripting.INTEGER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 53:
            { print("REDIRECT"          ); return new Symbol(SymScripting.REDIRECT ,yyline,yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 54:
            { print("THENWHILE"); return new Symbol(SymScripting.THENWHILE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 55:
            { print("ALERT_INFO"        ); return new Symbol(SymScripting.ALERT_INFO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 56:
            { print("LETPAR_NUM"        ); return new Symbol(SymScripting.LETPAR_NUM ,yyline,yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 57:
            { print("LETIMPAR_NUM"      ); return new Symbol(SymScripting.LETIMPAR_NUM ,yyline,yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 58:
            { print("NUM_ALEATORIO"     ); return new Symbol(SymScripting.NUM_ALEATORIO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 59:
            { print("CARACTER_ALEATORIO"); return new Symbol(SymScripting.CARACTER_ALEATORIO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
