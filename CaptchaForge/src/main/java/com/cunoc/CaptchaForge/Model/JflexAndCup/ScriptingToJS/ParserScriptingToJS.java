
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.ScriptingToJS;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.AnalyzerCC;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import com.cunoc.CaptchaForge.Model.Utility.Converter.ListLabelCCToHTML;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserScriptingToJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymScriptingToJS.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserScriptingToJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserScriptingToJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserScriptingToJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\006\006\000\002\035\003\000\002\035\003\000\002\030" +
    "\004\000\002\030\003\000\002\036\003\000\002\036\004" +
    "\000\002\033\005\000\002\033\003\000\002\034\004\000" +
    "\002\007\003\000\002\007\004\000\002\011\005\000\002" +
    "\012\003\000\002\012\004\000\002\013\005\000\002\013" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\015\006\000" +
    "\002\014\003\000\002\014\005\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\005\000\002\016\005\000\002\016\006" +
    "\000\002\016\005\000\002\016\005\000\002\016\006\000" +
    "\002\022\005\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\017" +
    "\003\000\002\017\013\000\002\017\010\000\002\021\005" +
    "\000\002\021\006\000\002\020\010\000\002\020\004\000" +
    "\002\031\005\000\002\031\003\000\002\032\005\000\002" +
    "\032\004\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\004\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\004\000\002\024\004\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\004\000\002" +
    "\026\004\000\002\026\002\000\002\027\004\000\002\027" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\062\002\ufffd\003\035\004\041\005\012\006" +
    "\023\007\013\010\026\011\021\023\034\046\031\052\020" +
    "\055\007\056\044\060\014\062\037\063\010\064\025\065" +
    "\005\066\046\067\042\070\033\071\036\072\004\073\032" +
    "\001\002\000\004\042\277\001\002\000\004\042\274\001" +
    "\002\000\064\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\023\ufffb\044\ufffb\046\ufffb\051\ufffb\052" +
    "\ufffb\055\ufffb\056\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073" +
    "\ufffb\001\002\000\060\004\041\005\012\006\023\007\013" +
    "\010\026\011\021\023\034\046\031\047\143\052\020\055" +
    "\007\056\044\060\014\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\004\042\270\001\002\000\004\002\267\001\002" +
    "\000\006\011\uffe3\045\uffe3\001\002\000\006\011\uffe1\045" +
    "\uffe1\001\002\000\004\042\262\001\002\000\064\002\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\023" +
    "\uffcb\044\uffcb\046\uffcb\051\uffcb\052\uffcb\055\uffcb\056\uffcb" +
    "\060\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\001\002\000\004" +
    "\042\241\001\002\000\064\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\023\ufff7\044\ufff7\046\ufff7" +
    "\051\ufff7\052\ufff7\055\ufff7\056\ufff7\060\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\001\002\000\004\042\234\001\002\000" +
    "\006\022\231\042\ufff4\001\002\000\064\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\023\ufff8\044" +
    "\ufff8\046\ufff8\051\ufff8\052\ufff8\055\ufff8\056\ufff8\060\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\001\002\000\006\011\uffe2" +
    "\045\uffe2\001\002\000\064\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\023\ufff9\044\ufff9\046\ufff9" +
    "\051\ufff9\052\ufff9\055\ufff9\056\ufff9\060\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\001\002\000\004\042\226\001\002\000" +
    "\006\011\uffe0\045\uffe0\001\002\000\004\002\000\001\002" +
    "\000\060\002\uffff\004\041\005\012\006\023\007\013\010" +
    "\026\011\021\023\034\046\031\052\020\055\007\056\044" +
    "\060\014\062\037\063\010\064\025\065\005\066\046\067" +
    "\042\070\033\071\036\072\004\073\032\001\002\000\004" +
    "\042\214\001\002\000\004\042\212\001\002\000\004\042" +
    "\210\001\002\000\004\042\ufff3\001\002\000\056\004\041" +
    "\005\012\006\023\007\013\010\026\011\021\023\034\046" +
    "\031\052\020\055\007\056\044\060\014\062\037\063\010" +
    "\064\025\065\005\066\046\067\042\070\033\071\036\072" +
    "\004\073\032\001\002\000\004\042\204\001\002\000\004" +
    "\042\201\001\002\000\006\011\165\045\166\001\002\000" +
    "\006\011\uffe4\045\uffe4\001\002\000\004\042\163\001\002" +
    "\000\004\020\162\001\002\000\004\042\131\001\002\000" +
    "\064\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\023\ufffa\044\ufffa\046\ufffa\051\ufffa\052\ufffa\055" +
    "\ufffa\056\ufffa\060\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\001" +
    "\002\000\004\042\047\001\002\000\054\011\055\012\063" +
    "\013\053\014\061\015\062\016\050\017\054\034\051\036" +
    "\060\042\052\046\031\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\036\020\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\001\002\000\054\011\055\012\063" +
    "\013\053\014\061\015\062\016\050\017\054\034\051\036" +
    "\060\042\052\046\031\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\054\011\055\012\063\013\053\014\061\015\062" +
    "\016\050\017\054\034\051\036\060\042\052\046\031\062" +
    "\037\063\010\064\025\065\005\066\046\067\042\070\033" +
    "\071\036\072\004\073\032\001\002\000\036\020\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\001" +
    "\002\000\036\020\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\001\002\000\040\020\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\120" +
    "\001\002\000\036\020\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\001\002\000\034\024\077\025" +
    "\073\026\074\027\070\030\101\031\100\032\102\033\067" +
    "\035\075\036\072\037\076\040\103\041\071\001\002\000" +
    "\006\015\066\016\065\001\002\000\036\020\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\001\002" +
    "\000\036\020\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\001\002\000\036\020\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\001\002\000" +
    "\036\020\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\001\002\000\036\020\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\001\002\000\036" +
    "\020\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\001\002\000\054\011\055\012\063\013\053\014" +
    "\061\015\062\016\050\017\054\034\051\036\060\042\052" +
    "\046\031\062\037\063\010\064\025\065\005\066\046\067" +
    "\042\070\033\071\036\072\004\073\032\001\002\000\054" +
    "\011\055\012\063\013\053\014\061\015\062\016\050\017" +
    "\054\034\051\036\060\042\052\046\031\062\037\063\010" +
    "\064\025\065\005\066\046\067\042\070\033\071\036\072" +
    "\004\073\032\001\002\000\036\020\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000\054" +
    "\011\055\012\063\013\053\014\061\015\062\016\050\017" +
    "\054\034\051\036\060\042\052\046\031\062\037\063\010" +
    "\064\025\065\005\066\046\067\042\070\033\071\036\072" +
    "\004\073\032\001\002\000\054\011\055\012\063\013\053" +
    "\014\061\015\062\016\050\017\054\034\051\036\060\042" +
    "\052\046\031\062\037\063\010\064\025\065\005\066\046" +
    "\067\042\070\033\071\036\072\004\073\032\001\002\000" +
    "\054\011\055\012\063\013\053\014\061\015\062\016\050" +
    "\017\054\034\051\036\060\042\052\046\031\062\037\063" +
    "\010\064\025\065\005\066\046\067\042\070\033\071\036" +
    "\072\004\073\032\001\002\000\054\011\055\012\063\013" +
    "\053\014\061\015\062\016\050\017\054\034\051\036\060" +
    "\042\052\046\031\062\037\063\010\064\025\065\005\066" +
    "\046\067\042\070\033\071\036\072\004\073\032\001\002" +
    "\000\054\011\055\012\063\013\053\014\061\015\062\016" +
    "\050\017\054\034\051\036\060\042\052\046\031\062\037" +
    "\063\010\064\025\065\005\066\046\067\042\070\033\071" +
    "\036\072\004\073\032\001\002\000\054\011\055\012\063" +
    "\013\053\014\061\015\062\016\050\017\054\034\051\036" +
    "\060\042\052\046\031\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\054\011\055\012\063\013\053\014\061\015\062" +
    "\016\050\017\054\034\051\036\060\042\052\046\031\062" +
    "\037\063\010\064\025\065\005\066\046\067\042\070\033" +
    "\071\036\072\004\073\032\001\002\000\054\011\055\012" +
    "\063\013\053\014\061\015\062\016\050\017\054\034\051" +
    "\036\060\042\052\046\031\062\037\063\010\064\025\065" +
    "\005\066\046\067\042\070\033\071\036\072\004\073\032" +
    "\001\002\000\054\011\055\012\063\013\053\014\061\015" +
    "\062\016\050\017\054\034\051\036\060\042\052\046\031" +
    "\062\037\063\010\064\025\065\005\066\046\067\042\070" +
    "\033\071\036\072\004\073\032\001\002\000\054\011\055" +
    "\012\063\013\053\014\061\015\062\016\050\017\054\034" +
    "\051\036\060\042\052\046\031\062\037\063\010\064\025" +
    "\065\005\066\046\067\042\070\033\071\036\072\004\073" +
    "\032\001\002\000\036\020\uffb4\024\077\025\073\026\074" +
    "\027\070\030\101\031\100\032\102\033\067\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\001\002\000\036\020\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\067\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\001\002\000\036\020\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\102\033\067\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\001\002\000\036\020\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\102" +
    "\033\067\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\001" +
    "\002\000\036\020\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\102\033\067\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\001\002\000\036\020\uffb5\024\077" +
    "\025\073\026\074\027\070\030\101\031\100\032\102\033" +
    "\067\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\001\002" +
    "\000\036\020\uffb7\024\077\025\073\026\074\027\070\030" +
    "\101\031\100\032\102\033\067\035\uffb7\036\uffb7\037\076" +
    "\040\103\041\uffb7\001\002\000\036\020\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\102\033\067" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\001\002\000" +
    "\036\020\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\102\033\067\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\001\002\000\036\020\uffb6\024\077\025\073" +
    "\026\074\027\070\030\101\031\100\032\102\033\067\035" +
    "\uffb6\036\uffb6\037\076\040\103\041\uffb6\001\002\000\036" +
    "\020\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\102\033\067\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\001\002\000\036\020\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\001\002\000\056\011" +
    "\055\012\063\013\053\014\061\015\062\016\050\017\054" +
    "\034\051\036\060\041\124\042\052\046\031\062\037\063" +
    "\010\064\025\065\005\066\046\067\042\070\033\071\036" +
    "\072\004\073\032\001\002\000\036\020\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\001\002\000" +
    "\036\020\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\001\002\000\034\024\077\025\073\026\074" +
    "\027\070\030\101\031\100\032\102\033\067\035\075\036" +
    "\072\037\076\040\103\041\125\001\002\000\036\020\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\001\002\000\036\020\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\001\002\000\034\024\077\025" +
    "\073\026\074\027\070\030\101\031\100\032\102\033\067" +
    "\035\075\036\072\037\076\040\103\041\127\001\002\000" +
    "\036\020\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\001\002\000\036\020\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002\000\016" +
    "\004\041\005\012\006\023\007\013\010\026\011\132\001" +
    "\002\000\004\022\160\001\002\000\004\011\155\001\002" +
    "\000\004\041\135\001\002\000\004\057\136\001\002\000" +
    "\004\042\137\001\002\000\054\011\055\012\063\013\053" +
    "\014\061\015\062\016\050\017\054\034\051\036\060\042" +
    "\052\046\031\062\037\063\010\064\025\065\005\066\046" +
    "\067\042\070\033\071\036\072\004\073\032\001\002\000" +
    "\034\024\077\025\073\026\074\027\070\030\101\031\100" +
    "\032\102\033\067\035\075\036\072\037\076\040\103\041" +
    "\141\001\002\000\060\004\041\005\012\006\023\007\013" +
    "\010\026\011\021\023\034\046\031\047\143\052\020\055" +
    "\007\056\044\060\014\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\064\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\023\uffc3\044\uffc3\046\uffc3\051\uffc3\052" +
    "\uffc3\055\uffc3\056\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\001\002\000\004\050\145\001\002\000\064\002\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\023" +
    "\uffca\044\uffca\046\uffca\051\uffca\052\uffca\055\uffca\056\uffca" +
    "\060\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\001\002\000\060" +
    "\004\041\005\012\006\023\007\013\010\026\011\021\023" +
    "\034\046\031\051\150\052\020\055\007\056\044\060\014" +
    "\062\037\063\010\064\025\065\005\066\046\067\042\070" +
    "\033\071\036\072\004\073\032\001\002\000\064\002\uffc4" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\023" +
    "\uffc4\044\uffc4\046\uffc4\051\uffc4\052\uffc4\055\uffc4\056\uffc4" +
    "\060\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\001\002\000\060" +
    "\004\041\005\012\006\023\007\013\010\026\011\021\023" +
    "\034\046\031\051\153\052\020\055\007\056\044\060\014" +
    "\062\037\063\010\064\025\065\005\066\046\067\042\070" +
    "\033\071\036\072\004\073\032\001\002\000\004\054\151" +
    "\001\002\000\064\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\023\uffc1\044\uffc1\046\uffc1\051\uffc1" +
    "\052\uffc1\055\uffc1\056\uffc1\060\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\001\002\000\064\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\023\ufffc\044\ufffc\046\ufffc" +
    "\051\ufffc\052\ufffc\055\ufffc\056\ufffc\060\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\001\002\000\004\054\154\001\002\000" +
    "\064\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\023\uffc2\044\uffc2\046\uffc2\051\uffc2\052\uffc2\055" +
    "\uffc2\056\uffc2\060\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001" +
    "\002\000\004\022\156\001\002\000\054\011\055\012\063" +
    "\013\053\014\061\015\062\016\050\017\054\034\051\036" +
    "\060\042\052\046\031\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\034\024\077\025\073\026\074\027\070\030\101" +
    "\031\100\032\102\033\067\035\075\036\072\037\076\040" +
    "\103\041\uffc7\001\002\000\054\011\055\012\063\013\053" +
    "\014\061\015\062\016\050\017\054\034\051\036\060\042" +
    "\052\046\031\062\037\063\010\064\025\065\005\066\046" +
    "\067\042\070\033\071\036\072\004\073\032\001\002\000" +
    "\034\024\077\025\073\026\074\027\070\030\101\031\100" +
    "\032\102\033\067\035\075\036\072\037\076\040\103\041" +
    "\uffc8\001\002\000\064\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\023\ufff6\044\ufff6\046\ufff6\051" +
    "\ufff6\052\ufff6\055\ufff6\056\ufff6\060\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\001\002\000\004\041\164\001\002\000\036" +
    "\020\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\001\002\000\010\020\uffe5\021\uffe5\022\uffe5\001" +
    "\002\000\004\011\165\001\002\000\006\020\174\022\175" +
    "\001\002\000\010\020\uffe8\021\171\022\uffe8\001\002\000" +
    "\004\011\172\001\002\000\010\020\uffe6\021\uffe6\022\uffe6" +
    "\001\002\000\064\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\023\uffe9\044\uffe9\046\uffe9\051\uffe9" +
    "\052\uffe9\055\uffe9\056\uffe9\060\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9" +
    "\073\uffe9\001\002\000\064\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\023\uffde\044\uffde\046\uffde" +
    "\051\uffde\052\uffde\055\uffde\056\uffde\060\uffde\062\uffde\063" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde" +
    "\072\uffde\073\uffde\001\002\000\054\011\055\012\063\013" +
    "\053\014\061\015\062\016\050\017\054\034\051\036\060" +
    "\042\052\046\031\062\037\063\010\064\025\065\005\066" +
    "\046\067\042\070\033\071\036\072\004\073\032\001\002" +
    "\000\034\020\177\024\077\025\073\026\074\027\070\030" +
    "\101\031\100\032\102\033\067\035\075\036\072\037\076" +
    "\040\103\001\002\000\064\002\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\023\uffdd\044\uffdd\046\uffdd" +
    "\051\uffdd\052\uffdd\055\uffdd\056\uffdd\060\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\001\002\000\010\020\uffe7\021\171\022" +
    "\uffe7\001\002\000\054\011\055\012\063\013\053\014\061" +
    "\015\062\016\050\017\054\034\051\036\060\042\052\046" +
    "\031\062\037\063\010\064\025\065\005\066\046\067\042" +
    "\070\033\071\036\072\004\073\032\001\002\000\034\024" +
    "\077\025\073\026\074\027\070\030\101\031\100\032\102" +
    "\033\067\035\075\036\072\037\076\040\103\041\203\001" +
    "\002\000\036\020\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\001\002\000\054\011\055\012\063" +
    "\013\053\014\061\015\062\016\050\017\054\034\051\036" +
    "\060\042\052\046\031\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\034\024\077\025\073\026\074\027\070\030\101" +
    "\031\100\032\102\033\067\035\075\036\072\037\076\040" +
    "\103\041\206\001\002\000\036\020\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002\000\060" +
    "\002\ufffe\004\041\005\012\006\023\007\013\010\026\011" +
    "\021\023\034\046\031\052\020\055\007\056\044\060\014" +
    "\062\037\063\010\064\025\065\005\066\046\067\042\070" +
    "\033\071\036\072\004\073\032\001\002\000\004\041\211" +
    "\001\002\000\036\020\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\001\002\000\004\041\213\001" +
    "\002\000\036\020\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\001\002\000\012\011\215\015\221" +
    "\016\220\017\222\001\002\000\006\021\uffcf\041\uffcf\001" +
    "\002\000\006\021\224\041\223\001\002\000\006\021\uffd0" +
    "\041\uffd0\001\002\000\006\021\uffcd\041\uffcd\001\002\000" +
    "\006\021\uffce\041\uffce\001\002\000\006\021\uffcc\041\uffcc" +
    "\001\002\000\036\020\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\001\002\000\012\011\215\015" +
    "\221\016\220\017\222\001\002\000\006\021\uffd1\041\uffd1" +
    "\001\002\000\054\011\055\012\063\013\053\014\061\015" +
    "\062\016\050\017\054\034\051\036\060\042\052\046\031" +
    "\062\037\063\010\064\025\065\005\066\046\067\042\070" +
    "\033\071\036\072\004\073\032\001\002\000\034\024\077" +
    "\025\073\026\074\027\070\030\101\031\100\032\102\033" +
    "\067\035\075\036\072\037\076\040\103\041\230\001\002" +
    "\000\036\020\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\001\002\000\054\011\055\012\063\013" +
    "\053\014\061\015\062\016\050\017\054\034\051\036\060" +
    "\042\052\046\031\062\037\063\010\064\025\065\005\066" +
    "\046\067\042\070\033\071\036\072\004\073\032\001\002" +
    "\000\034\020\233\024\077\025\073\026\074\027\070\030" +
    "\101\031\100\032\102\033\067\035\075\036\072\037\076" +
    "\040\103\001\002\000\064\002\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\023\uffdf\044\uffdf\046\uffdf" +
    "\051\uffdf\052\uffdf\055\uffdf\056\uffdf\060\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\001\002\000\054\011\055\012\063\013" +
    "\053\014\061\015\062\016\050\017\054\034\051\036\060" +
    "\042\052\046\031\062\037\063\010\064\025\065\005\066" +
    "\046\067\042\070\033\071\036\072\004\073\032\001\002" +
    "\000\034\024\077\025\073\026\074\027\070\030\101\031" +
    "\100\032\102\033\067\035\075\036\072\037\076\040\103" +
    "\041\236\001\002\000\004\053\237\001\002\000\060\004" +
    "\041\005\012\006\023\007\013\010\026\011\021\023\034" +
    "\046\031\047\143\052\020\055\007\056\044\060\014\062" +
    "\037\063\010\064\025\065\005\066\046\067\042\070\033" +
    "\071\036\072\004\073\032\001\002\000\064\002\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\023\uffc6" +
    "\044\uffc6\046\uffc6\051\uffc6\052\uffc6\055\uffc6\056\uffc6\060" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\073\uffc6\001\002\000\016\004" +
    "\041\005\012\006\023\007\013\010\026\041\243\001\002" +
    "\000\006\020\254\043\255\001\002\000\006\020\ufff0\043" +
    "\ufff0\001\002\000\004\011\252\001\002\000\006\021\uffed" +
    "\041\uffed\001\002\000\006\021\247\041\250\001\002\000" +
    "\014\004\041\005\012\006\023\007\013\010\026\001\002" +
    "\000\006\020\uffef\043\uffef\001\002\000\006\021\uffee\041" +
    "\uffee\001\002\000\006\021\uffec\041\uffec\001\002\000\064" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\023\ufff5\044\ufff5\046\ufff5\051\ufff5\052\ufff5\055\ufff5" +
    "\056\ufff5\060\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\001\002" +
    "\000\064\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\023\ufff1\044\ufff1\046\ufff1\051\ufff1\052\ufff1" +
    "\055\ufff1\056\ufff1\060\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1" +
    "\001\002\000\060\004\041\005\012\006\023\007\013\010" +
    "\026\011\021\023\034\044\260\046\031\052\020\055\007" +
    "\056\044\060\014\062\037\063\010\064\025\065\005\066" +
    "\046\067\042\070\033\071\036\072\004\073\032\001\002" +
    "\000\064\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\023\ufff2\044\ufff2\046\ufff2\051\ufff2\052\ufff2" +
    "\055\ufff2\056\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2" +
    "\001\002\000\060\004\041\005\012\006\023\007\013\010" +
    "\026\011\021\023\034\044\261\046\031\052\020\055\007" +
    "\056\044\060\014\062\037\063\010\064\025\065\005\066" +
    "\046\067\042\070\033\071\036\072\004\073\032\001\002" +
    "\000\064\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\023\uffeb\044\uffeb\046\uffeb\051\uffeb\052\uffeb" +
    "\055\uffeb\056\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\001\002\000\064\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\023\uffea\044\uffea\046\uffea\051\uffea" +
    "\052\uffea\055\uffea\056\uffea\060\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea" +
    "\073\uffea\001\002\000\054\011\055\012\063\013\053\014" +
    "\061\015\062\016\050\017\054\034\051\036\060\042\052" +
    "\046\031\062\037\063\010\064\025\065\005\066\046\067" +
    "\042\070\033\071\036\072\004\073\032\001\002\000\034" +
    "\024\077\025\073\026\074\027\070\030\101\031\100\032" +
    "\102\033\067\035\075\036\072\037\076\040\103\041\264" +
    "\001\002\000\004\061\265\001\002\000\060\004\041\005" +
    "\012\006\023\007\013\010\026\011\021\023\034\046\031" +
    "\047\143\052\020\055\007\056\044\060\014\062\037\063" +
    "\010\064\025\065\005\066\046\067\042\070\033\071\036" +
    "\072\004\073\032\001\002\000\064\002\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\023\uffc9\044\uffc9" +
    "\046\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\060\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\001\002\000\004\002\001\001" +
    "\002\000\054\011\055\012\063\013\053\014\061\015\062" +
    "\016\050\017\054\034\051\036\060\042\052\046\031\062" +
    "\037\063\010\064\025\065\005\066\046\067\042\070\033" +
    "\071\036\072\004\073\032\001\002\000\034\024\077\025" +
    "\073\026\074\027\070\030\101\031\100\032\102\033\067" +
    "\035\075\036\072\037\076\040\103\041\272\001\002\000" +
    "\036\020\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\001\002\000\064\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\023\uffc5\044\uffc5\046" +
    "\uffc5\051\uffc5\052\uffc5\055\uffc5\056\uffc5\060\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\001\002\000\054\011\055\012\063" +
    "\013\053\014\061\015\062\016\050\017\054\034\051\036" +
    "\060\042\052\046\031\062\037\063\010\064\025\065\005" +
    "\066\046\067\042\070\033\071\036\072\004\073\032\001" +
    "\002\000\034\024\077\025\073\026\074\027\070\030\101" +
    "\031\100\032\102\033\067\035\075\036\072\037\076\040" +
    "\103\041\276\001\002\000\036\020\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002\000\004" +
    "\041\300\001\002\000\036\020\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\032\002\010\003\026\004\027\005\005\006" +
    "\044\010\037\011\023\015\021\016\042\017\016\020\014" +
    "\035\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\141\006\044\010\037\011\023" +
    "\015\021\016\042\017\016\020\014\031\272\035\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\151\006\044\010\037\011\023\015\021\016" +
    "\042\017\016\020\014\035\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\206\005\005\006\044\010\037\011\023\015\021" +
    "\016\042\017\016\020\014\035\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\166\013\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\063\024\056\025\055\001\001\000\002\001\001\000" +
    "\010\016\063\024\127\025\055\001\001\000\010\016\063" +
    "\024\125\025\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\063\024\116\025\055\001" +
    "\001\000\010\016\063\024\115\025\055\001\001\000\002" +
    "\001\001\000\010\016\063\024\114\025\055\001\001\000" +
    "\010\016\063\024\113\025\055\001\001\000\010\016\063" +
    "\024\112\025\055\001\001\000\010\016\063\024\111\025" +
    "\055\001\001\000\010\016\063\024\110\025\055\001\001" +
    "\000\010\016\063\024\107\025\055\001\001\000\010\016" +
    "\063\024\106\025\055\001\001\000\010\016\063\024\105" +
    "\025\055\001\001\000\010\016\063\024\104\025\055\001" +
    "\001\000\010\016\063\024\103\025\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\063\024\122" +
    "\025\055\027\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\132\021\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\063\024\137\025\055\001\001\000\002" +
    "\001\001\000\026\005\141\006\044\010\037\011\023\015" +
    "\021\016\042\017\016\020\014\031\143\035\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\146\005\005\006\044\010\037\011\023\015\021" +
    "\016\042\017\016\020\014\032\145\035\015\001\001\000" +
    "\002\001\001\000\024\005\151\006\044\010\037\011\023" +
    "\015\021\016\042\017\016\020\014\035\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\063\024\156\025\055\001\001\000\002\001\001\000\010" +
    "\016\063\024\160\025\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\177\001\001\000\004\014\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\063\024" +
    "\175\025\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\063\024\201\025\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\063" +
    "\024\204\025\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\151\006\044\010\037\011\023\015\021" +
    "\016\042\017\016\020\014\035\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\215\023\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\224\001\001\000\002\001\001\000\010\016\063\024\226" +
    "\025\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\063\024\231\025\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\063\024\234\025\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\141" +
    "\006\044\010\037\011\023\015\021\016\042\017\016\020" +
    "\014\031\237\035\015\001\001\000\002\001\001\000\012" +
    "\010\243\033\245\034\244\036\241\001\001\000\004\030" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\243\034\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\256\005" +
    "\005\006\044\007\255\010\037\011\023\015\021\016\042" +
    "\017\016\020\014\035\015\001\001\000\002\001\001\000" +
    "\024\005\151\006\044\010\037\011\023\015\021\016\042" +
    "\017\016\020\014\035\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\063\024\262\025\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\141\006" +
    "\044\010\037\011\023\015\021\016\042\017\016\020\014" +
    "\031\265\035\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\063\024\270\025\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\063\024\274\025\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserScriptingToJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserScriptingToJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserScriptingToJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
    private ArrayList<String> listID = new ArrayList();
    private String javaScriptString = "";
    private String inserInsert = "";
    private String idEtiqueta = "";

	  public ParserScriptingToJS(LexemaScriptingToJS lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        Token token = getToken(cur_token);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    private Token getToken(Symbol cur_token){
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        return new Token(line, columna, lexema);
    }

    private Token getToken(int line,int columna,String lexema){
        return new Token(line, columna, lexema);
    }

private void addJavaScript(String addJS){
          javaScriptString += " "+addJS+" ";
          if(!this.inserInsert.isEmpty())
          {
            AnalyzerCC analizerCc = new AnalyzerCC(this.inserInsert);
            analizerCc.analyzer();
            String htmlString = "";
            if (analizerCc.isError()) {
              htmlString = this.inserInsert;
            } else {
              ListLabelCCToHTML html = new ListLabelCCToHTML();
              htmlString = html.listLabelCCToStringHTML(analizerCc.getListLabelCC(),"");
            }
            if(this.idEtiqueta.length() >= 3){
                this.idEtiqueta = this.idEtiqueta.substring(1, this.idEtiqueta.length() - 1);
            }
            /* window.onload = function () {
    const elemento = document.getElementById("mostrar_1");
    const div = document.createElement('div');
    div.innerHTML = '<input type="text" id="entrada_1">';
    elemento.appendChild(div.firstChild);
};*/

            this.javaScriptString += "window.onload = function () {";
            this.javaScriptString += "document.getElementById('"+this.idEtiqueta+"').innerHTML += '"+htmlString.replaceAll("\\r?\\n", "")+"';";
            this.javaScriptString += "};";
          }
    }

    public String getJavaScriptString(){
      return this.javaScriptString;
    }

    public String getInserInsert(){
        return this.inserInsert;
    }

    public void setIdEtiqueta(String newidEtiqueta){
        this.idEtiqueta = newidEtiqueta;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserScriptingToJS$actions {
  private final ParserScriptingToJS parser;

  /** Constructor */
  CUP$ParserScriptingToJS$actions(ParserScriptingToJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserScriptingToJS$do_action_part00000000(
    int                        CUP$ParserScriptingToJS$act_num,
    java_cup.runtime.lr_parser CUP$ParserScriptingToJS$parser,
    java.util.Stack            CUP$ParserScriptingToJS$stack,
    int                        CUP$ParserScriptingToJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserScriptingToJS$result;

      /* select the action based on the action number */
      switch (CUP$ParserScriptingToJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= gramtica EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = start_val;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserScriptingToJS$parser.done_parsing();
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // gramtica ::= inicio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		addJavaScript(a.toString());
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("gramtica",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= 
            {
              Object RESULT =null;
		RESULT =  "";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bucle_inicio ::= bucle_inicio instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString() + b.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_inicio",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bucle_inicio ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_inicio",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= asignar_variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= sentencias_control 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= funciones_defecto SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT =  a.toString() + " ; ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcion ::= agregar_tabla_funcion PARENTHESIS_OPEN parametro_funcion ejecucion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int ejleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object ej = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
if(id!=null){
    String idVer = id.toString();
    if(idVer.equals("ON_LOAD")){
        RESULT =  ej.toString() ;
    }else{
        if(ej != null ){
            String ejer = ej.toString();
            if(ejer.equals(") ; ")){
                RESULT =  id.toString() + " ( " + p.toString() + ej.toString() ;
            }else{
                RESULT =  " function "+ id.toString() + " ( " + p.toString() + ej.toString() ;
            }
        }
    }
}else{
    if(ej != null ){
        String ejer = ej.toString();
        if(ejer.equals(") ; ")){
            RESULT =  id.toString() + " ( " + ej.toString() ;
        }else{
            RESULT =  " function "+ id.toString() + " ( " + ej.toString() ;
        }
    }
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // agregar_tabla_funcion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = id;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("agregar_tabla_funcion",27, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // agregar_tabla_funcion ::= ON_LOAD 
            {
              Object RESULT =null;
		int onleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int onright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object on = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = "ON_LOAD";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("agregar_tabla_funcion",27, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ejecucion ::= BRACKETS_OPEN bucle_funcione 
            {
              Object RESULT =null;
		int buleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int buright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object bu = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " { " + bu.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("ejecucion",22, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ejecucion ::= SEMICOLON 
            {
              Object RESULT =null;
		RESULT =  "; " ;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("ejecucion",22, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_funcion ::= PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		RESULT =   " ) ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parametro_funcion",28, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro_funcion ::= bucle_parametros PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT =  p.toString() + " )" ;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parametro_funcion",28, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bucle_parametros ::= bucle_parametros COMA parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  p.toString() + "," + p2.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_parametros",25, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bucle_parametros ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  p.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_parametros",25, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametro ::= tipos_datos ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  type.toString() + d.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parametro",26, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bucle_funcione ::= BRACKETS_CLOSE 
            {
              Object RESULT =null;
		RESULT =  " } ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_funcione",5, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bucle_funcione ::= bucle_inicio BRACKETS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT =  a.toString() + " }";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_funcione",5, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= tipos_datos derivando_declaracion asignar 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int valorUsarleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int valorUsarright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object valorUsar = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT =  type.toString() + d.toString() + valorUsar.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // derivando_declaracion ::= bucle_id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivando_declaracion",8, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // derivando_declaracion ::= MODO bucle_id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivando_declaracion",8, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bucle_id ::= bucle_id COMA ID 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = b.toString()+" , "+  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_id",9, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bucle_id ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_id",9, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipos_datos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT =  " let ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipos_datos ::= DECIMAL 
            {
              Object RESULT =null;
		RESULT =  " let ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipos_datos ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT =  " let ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipos_datos ::= CHAR 
            {
              Object RESULT =null;
		RESULT =  " let ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipos_datos ::= STRING 
            {
              Object RESULT =null;
		RESULT =  " let ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignar_variable ::= ID EQUAL operaciones SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int dopeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int doperight = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object dope = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = id.toString()+" = " +dope.toString() + " ; ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar_variable",11, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignar ::= SEMICOLON 
            {
              Object RESULT =null;
		RESULT = " ; ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",10, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignar ::= EQUAL operaciones SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = " = " + a.toString() + " ; ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",10, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funciones_defecto ::= ASC PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').sort().join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funciones_defecto ::= DESC PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').sort().reverse().join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funciones_defecto ::= LETPAR_NUM PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').map((char, index) => (index + 1) % 2 === 0 ? char.charCodeAt(0) : char).join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funciones_defecto ::= LETIMPAR_NUM PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').map((char, index) => index % 2 === 0 ? char.charCodeAt(0) : char).join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funciones_defecto ::= REVERSE PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').reverse().join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funciones_defecto ::= CARACTER_ALEATORIO PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 52)] ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funciones_defecto ::= NUM_ALEATORIO PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " Math.random() ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funciones_defecto ::= ALERT_INFO PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = " alert("+parametro.toString()+") ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funciones_defecto ::= EXIT PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " return ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funciones_defecto ::= REDIRECT PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " incrementarHitsDataBaseReportCaptcha(idCaptchaUseInPut); ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funciones_defecto ::= INSERT PARENTHESIS_OPEN bucle_insert PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(a.toString().length() >= 3){
inserInsert+= a.toString().substring(1, a.toString().length() - 1);
}
RESULT = " ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bucle_insert ::= bucle_insert COMA datos_insert 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a.toString() + b.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_insert",16, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bucle_insert ::= datos_insert 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_insert",16, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datos_insert ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datos_insert ::= NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // datos_insert ::= NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // datos_insert ::= CHAR_TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencias_control ::= sentencia_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencias_control ::= REPEAT PARENTHESIS_OPEN condicion_repetir PARENTHESIS_CLOSE HUNTIL PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE sentencia_control_interno_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
if(a!=null){
    String useId = a.toString();
    Pattern pattern = Pattern.compile("var\\s+(\\w+)\\s*=");
    Matcher matcher = pattern.matcher(useId);
    String variable =  " i ";
        if (matcher.find()) {
            variable = matcher.group(1); // Extrae la variable capturada
        }
    RESULT = "for (  " +a.toString()+ " ; "+ variable + " < " + b.toString() + " ; " + variable + "++ ) { " + c.toString() + " } " ;
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-8)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencias_control ::= WHILE PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE THENWHILE sentencia_control_interno_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " while ( "+ a.toString() + " ) {" + b.toString()  +"}" ;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-5)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion_repetir ::= ID EQUAL operaciones 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = id.toString() +" = " + a.toString() ; 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("condicion_repetir",15, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion_repetir ::= tipos_datos ID EQUAL operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString() +" " + id.toString()  +" = " +b.toString(); 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("condicion_repetir",15, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_if ::= IF PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE THEN sentencia_control_interno_if 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " if ( " + op.toString() + " ) {" + in.toString() + " } " ; 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-5)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_if ::= ELSE sentencia_control_interno_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
if(a!=null){
    String texto = a.toString();
    if (!texto.isEmpty() && texto.charAt(0) == 'i') {
    RESULT =  a.toString();
    }else {
        RESULT = " { "+ a.toString() + " } ";
    }
}else {
    RESULT = " {  } ";
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_control_interno_if ::= INIT START_INIT vacio_sentincia_interna 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString(); 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencia_control_interno_if",23, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_control_interno_if ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString(); 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencia_control_interno_if",23, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // vacio_sentincia_interna ::= bucle_inicio AND_INIT END 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		RESULT = a.toString(); 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_sentincia_interna",24, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // vacio_sentincia_interna ::= AND_INIT END 
            {
              Object RESULT =null;
		RESULT = " "; 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_sentincia_interna",24, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones ::= operaciones SAME_AS operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " === " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones ::= operaciones NOT_THE_SAME operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " !== " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones ::= operaciones LESS_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " < " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones ::= operaciones LESS_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " <= " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones ::= operaciones GREATER_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " > " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones ::= operaciones GREATER_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " >= " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones ::= operaciones OR operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " || " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones ::= operaciones AND operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " && " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones ::= NOT operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = "!" + a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones ::= operaciones ADDITION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " + " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones ::= operaciones SUBTRACTION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " - " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones ::= operaciones DIVISION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " / " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones ::= operaciones MULTIPLICATION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " * " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones ::= PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = "("+ a.toString() + " ) ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operaciones ::= TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operaciones ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operaciones ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operaciones ::= NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operaciones ::= NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operaciones ::= SUBTRACTION NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =" - "+a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operaciones ::= SUBTRACTION NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " - "+a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operaciones ::= CHAR_TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operaciones ::= parentesis 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operaciones ::= funciones_defecto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parentesis ::= ID fucion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int funcion_idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int funcion_idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object funcion_id = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
if(id.equals("getElementById")){
    RESULT = "document.getElementById("+funcion_id.toString()+").value.trim()";
}else{
RESULT = id.toString() + funcion_id.toString();
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parentesis",19, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fucion_id ::= PARENTHESIS_OPEN vacio_interno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " ( " + a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("fucion_id",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fucion_id ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("fucion_id",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // vacio_interno ::= operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = a.toString() + " ) ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_interno",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // vacio_interno ::= PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		RESULT = " ) ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_interno",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserScriptingToJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserScriptingToJS$do_action(
    int                        CUP$ParserScriptingToJS$act_num,
    java_cup.runtime.lr_parser CUP$ParserScriptingToJS$parser,
    java.util.Stack            CUP$ParserScriptingToJS$stack,
    int                        CUP$ParserScriptingToJS$top)
    throws java.lang.Exception
    {
              return CUP$ParserScriptingToJS$do_action_part00000000(
                               CUP$ParserScriptingToJS$act_num,
                               CUP$ParserScriptingToJS$parser,
                               CUP$ParserScriptingToJS$stack,
                               CUP$ParserScriptingToJS$top);
    }
}

}
