
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.ScriptingToJS;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import com.cunoc.CaptchaForge.Model.JflexAndCup.AnalyzerSemantico;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Operation.ListTypeOperations;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Operation.ListsDefaultFunctionOperations;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.DataValue;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.ListTypeData;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserScriptingToJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymScriptingToJS.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserScriptingToJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserScriptingToJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserScriptingToJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\006\007\000\002\007\006\000\002\033" +
    "\004\000\002\033\003\000\002\034\003\000\002\034\005" +
    "\000\002\010\003\000\002\010\004\000\002\012\005\000" +
    "\002\013\003\000\002\013\004\000\002\014\005\000\002" +
    "\014\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\016\006" +
    "\000\002\015\003\000\002\015\005\000\002\015\003\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\005\000\002\017" +
    "\005\000\002\017\006\000\002\017\005\000\002\017\005" +
    "\000\002\017\006\000\002\025\005\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\020\003\000\002\020\017\000\002\020" +
    "\014\000\002\024\005\000\002\024\006\000\002\021\015" +
    "\000\002\022\004\000\002\022\002\000\002\023\007\000" +
    "\002\023\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\004" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\027\004\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\004\000" +
    "\002\031\004\000\002\031\002\000\002\032\004\000\002" +
    "\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\060\002\ufffd\003\034\004\040\005\012\006" +
    "\023\007\014\010\024\011\020\045\030\046\007\051\017" +
    "\055\042\057\013\061\036\062\010\063\025\064\004\065" +
    "\045\066\041\067\033\070\035\071\005\072\032\001\002" +
    "\000\004\041\311\001\002\000\004\041\307\001\002\000" +
    "\062\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\055" +
    "\ufffb\057\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\001\002\000" +
    "\004\047\303\001\002\000\004\041\300\001\002\000\004" +
    "\002\277\001\002\000\006\011\uffe6\044\uffe6\001\002\000" +
    "\004\041\266\001\002\000\006\011\uffe4\044\uffe4\001\002" +
    "\000\062\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\043\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd" +
    "\055\uffcd\057\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\001\002" +
    "\000\062\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\043\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7" +
    "\055\ufff7\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\001\002" +
    "\000\004\041\244\001\002\000\006\022\225\041\224\001" +
    "\002\000\062\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\043\ufff8\045\ufff8\046\ufff8\050\ufff8\051" +
    "\ufff8\055\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\001" +
    "\002\000\062\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\043\ufff9\045\ufff9\046\ufff9\050\ufff9\051" +
    "\ufff9\055\ufff9\057\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\001" +
    "\002\000\006\011\uffe5\044\uffe5\001\002\000\006\011\uffe3" +
    "\044\uffe3\001\002\000\004\041\221\001\002\000\004\002" +
    "\000\001\002\000\060\002\uffff\004\040\005\012\006\023" +
    "\007\014\010\024\011\020\045\030\046\007\050\uffff\051" +
    "\017\055\042\057\013\061\036\062\010\063\025\064\004" +
    "\065\045\066\041\067\033\070\035\071\005\072\032\001" +
    "\002\000\004\041\207\001\002\000\062\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\043\ufff5\045" +
    "\ufff5\046\ufff5\050\ufff5\051\ufff5\055\ufff5\057\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\001\002\000\004\041\205\001\002" +
    "\000\004\041\203\001\002\000\054\004\040\005\012\006" +
    "\023\007\014\010\024\011\020\045\030\046\007\051\017" +
    "\055\042\057\013\061\036\062\010\063\025\064\004\065" +
    "\045\066\041\067\033\070\035\071\005\072\032\001\002" +
    "\000\004\041\176\001\002\000\004\041\173\001\002\000" +
    "\006\011\156\044\157\001\002\000\006\011\uffe7\044\uffe7" +
    "\001\002\000\004\041\154\001\002\000\004\041\131\001" +
    "\002\000\004\020\130\001\002\000\062\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\043\ufffa\045" +
    "\ufffa\046\ufffa\050\ufffa\051\ufffa\055\ufffa\057\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070" +
    "\ufffa\071\ufffa\072\ufffa\001\002\000\004\041\046\001\002" +
    "\000\054\011\054\012\061\013\052\014\060\015\062\016" +
    "\047\017\053\033\050\035\057\041\051\045\030\061\036" +
    "\062\010\063\025\064\004\065\045\066\041\067\033\070" +
    "\035\071\005\072\032\001\002\000\036\020\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\001\002" +
    "\000\054\011\054\012\061\013\052\014\060\015\062\016" +
    "\047\017\053\033\050\035\057\041\051\045\030\061\036" +
    "\062\010\063\025\064\004\065\045\066\041\067\033\070" +
    "\035\071\005\072\032\001\002\000\054\011\054\012\061" +
    "\013\052\014\060\015\062\016\047\017\053\033\050\035" +
    "\057\041\051\045\030\061\036\062\010\063\025\064\004" +
    "\065\045\066\041\067\033\070\035\071\005\072\032\001" +
    "\002\000\036\020\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\001\002\000\036\020\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\001\002" +
    "\000\040\020\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\117\001\002\000\036\020\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\001" +
    "\002\000\034\023\076\024\073\025\072\026\067\027\100" +
    "\030\077\031\101\032\066\034\074\035\071\036\075\037" +
    "\102\040\070\001\002\000\006\015\065\016\064\001\002" +
    "\000\036\020\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\001\002\000\036\020\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\001\002\000" +
    "\036\020\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\001\002\000\036\020\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\001\002\000\036" +
    "\020\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\001\002\000\036\020\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\001\002\000\054\011" +
    "\054\012\061\013\052\014\060\015\062\016\047\017\053" +
    "\033\050\035\057\041\051\045\030\061\036\062\010\063" +
    "\025\064\004\065\045\066\041\067\033\070\035\071\005" +
    "\072\032\001\002\000\054\011\054\012\061\013\052\014" +
    "\060\015\062\016\047\017\053\033\050\035\057\041\051" +
    "\045\030\061\036\062\010\063\025\064\004\065\045\066" +
    "\041\067\033\070\035\071\005\072\032\001\002\000\036" +
    "\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\001\002\000\054\011\054\012\061\013\052\014" +
    "\060\015\062\016\047\017\053\033\050\035\057\041\051" +
    "\045\030\061\036\062\010\063\025\064\004\065\045\066" +
    "\041\067\033\070\035\071\005\072\032\001\002\000\054" +
    "\011\054\012\061\013\052\014\060\015\062\016\047\017" +
    "\053\033\050\035\057\041\051\045\030\061\036\062\010" +
    "\063\025\064\004\065\045\066\041\067\033\070\035\071" +
    "\005\072\032\001\002\000\054\011\054\012\061\013\052" +
    "\014\060\015\062\016\047\017\053\033\050\035\057\041" +
    "\051\045\030\061\036\062\010\063\025\064\004\065\045" +
    "\066\041\067\033\070\035\071\005\072\032\001\002\000" +
    "\054\011\054\012\061\013\052\014\060\015\062\016\047" +
    "\017\053\033\050\035\057\041\051\045\030\061\036\062" +
    "\010\063\025\064\004\065\045\066\041\067\033\070\035" +
    "\071\005\072\032\001\002\000\054\011\054\012\061\013" +
    "\052\014\060\015\062\016\047\017\053\033\050\035\057" +
    "\041\051\045\030\061\036\062\010\063\025\064\004\065" +
    "\045\066\041\067\033\070\035\071\005\072\032\001\002" +
    "\000\054\011\054\012\061\013\052\014\060\015\062\016" +
    "\047\017\053\033\050\035\057\041\051\045\030\061\036" +
    "\062\010\063\025\064\004\065\045\066\041\067\033\070" +
    "\035\071\005\072\032\001\002\000\054\011\054\012\061" +
    "\013\052\014\060\015\062\016\047\017\053\033\050\035" +
    "\057\041\051\045\030\061\036\062\010\063\025\064\004" +
    "\065\045\066\041\067\033\070\035\071\005\072\032\001" +
    "\002\000\054\011\054\012\061\013\052\014\060\015\062" +
    "\016\047\017\053\033\050\035\057\041\051\045\030\061" +
    "\036\062\010\063\025\064\004\065\045\066\041\067\033" +
    "\070\035\071\005\072\032\001\002\000\054\011\054\012" +
    "\061\013\052\014\060\015\062\016\047\017\053\033\050" +
    "\035\057\041\051\045\030\061\036\062\010\063\025\064" +
    "\004\065\045\066\041\067\033\070\035\071\005\072\032" +
    "\001\002\000\054\011\054\012\061\013\052\014\060\015" +
    "\062\016\047\017\053\033\050\035\057\041\051\045\030" +
    "\061\036\062\010\063\025\064\004\065\045\066\041\067" +
    "\033\070\035\071\005\072\032\001\002\000\036\020\uffb7" +
    "\023\076\024\073\025\072\026\067\027\100\030\077\031" +
    "\101\032\066\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\001\002\000\036\020\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\066\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\001\002\000\036\020\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\101" +
    "\032\066\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\001" +
    "\002\000\036\020\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\101\032\066\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\001\002\000\036\020\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\101\032" +
    "\066\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\001\002" +
    "\000\036\020\uffb8\023\076\024\073\025\072\026\067\027" +
    "\100\030\077\031\101\032\066\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\001\002\000\036\020\uffba\023\076\024" +
    "\073\025\072\026\067\027\100\030\077\031\101\032\066" +
    "\034\uffba\035\uffba\036\075\037\102\040\uffba\001\002\000" +
    "\036\020\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\101\032\066\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\001\002\000\036\020\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\101\032\066\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\001\002\000\036" +
    "\020\uffb9\023\076\024\073\025\072\026\067\027\100\030" +
    "\077\031\101\032\066\034\uffb9\035\uffb9\036\075\037\102" +
    "\040\uffb9\001\002\000\036\020\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\101\032\066\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\001\002\000\036\020" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\001\002\000\056\011\054\012\061\013\052\014\060" +
    "\015\062\016\047\017\053\033\050\035\057\040\123\041" +
    "\051\045\030\061\036\062\010\063\025\064\004\065\045" +
    "\066\041\067\033\070\035\071\005\072\032\001\002\000" +
    "\036\020\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\001\002\000\036\020\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\001\002\000\034" +
    "\023\076\024\073\025\072\026\067\027\100\030\077\031" +
    "\101\032\066\034\074\035\071\036\075\037\102\040\124" +
    "\001\002\000\036\020\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\001\002\000\036\020\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\001" +
    "\002\000\034\023\076\024\073\025\072\026\067\027\100" +
    "\030\077\031\101\032\066\034\074\035\071\036\075\037" +
    "\102\040\126\001\002\000\036\020\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\001\002\000\036" +
    "\020\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\001\002\000\062\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\043\ufff6\045\ufff6\046\ufff6" +
    "\050\ufff6\051\ufff6\055\ufff6\057\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\001\002\000\016\004\040\005\012\006\023\007" +
    "\014\010\024\011\132\001\002\000\004\022\152\001\002" +
    "\000\004\011\147\001\002\000\004\040\135\001\002\000" +
    "\004\056\136\001\002\000\004\041\137\001\002\000\054" +
    "\011\054\012\061\013\052\014\060\015\062\016\047\017" +
    "\053\033\050\035\057\041\051\045\030\061\036\062\010" +
    "\063\025\064\004\065\045\066\041\067\033\070\035\071" +
    "\005\072\032\001\002\000\034\023\076\024\073\025\072" +
    "\026\067\027\100\030\077\031\101\032\066\034\074\035" +
    "\071\036\075\037\102\040\141\001\002\000\004\046\142" +
    "\001\002\000\004\047\143\001\002\000\060\003\034\004" +
    "\040\005\012\006\023\007\014\010\024\011\020\045\030" +
    "\046\007\050\ufffd\051\017\055\042\057\013\061\036\062" +
    "\010\063\025\064\004\065\045\066\041\067\033\070\035" +
    "\071\005\072\032\001\002\000\004\050\145\001\002\000" +
    "\004\053\146\001\002\000\062\002\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\043\uffcc\045\uffcc\046" +
    "\uffcc\050\uffcc\051\uffcc\055\uffcc\057\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\001\002\000\004\022\150\001\002\000\054" +
    "\011\054\012\061\013\052\014\060\015\062\016\047\017" +
    "\053\033\050\035\057\041\051\045\030\061\036\062\010" +
    "\063\025\064\004\065\045\066\041\067\033\070\035\071" +
    "\005\072\032\001\002\000\034\023\076\024\073\025\072" +
    "\026\067\027\100\030\077\031\101\032\066\034\074\035" +
    "\071\036\075\037\102\040\uffc9\001\002\000\054\011\054" +
    "\012\061\013\052\014\060\015\062\016\047\017\053\033" +
    "\050\035\057\041\051\045\030\061\036\062\010\063\025" +
    "\064\004\065\045\066\041\067\033\070\035\071\005\072" +
    "\032\001\002\000\034\023\076\024\073\025\072\026\067" +
    "\027\100\030\077\031\101\032\066\034\074\035\071\036" +
    "\075\037\102\040\uffca\001\002\000\004\040\155\001\002" +
    "\000\036\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\001\002\000\012\003\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\001\002\000\004\011\156\001\002\000\010" +
    "\003\166\020\165\022\167\001\002\000\012\003\uffeb\020" +
    "\uffeb\021\162\022\uffeb\001\002\000\004\011\163\001\002" +
    "\000\012\003\uffe9\020\uffe9\021\uffe9\022\uffe9\001\002\000" +
    "\062\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\043\uffec\045\uffec\046\uffec\050\uffec\051\uffec\055" +
    "\uffec\057\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\001\002\000" +
    "\062\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\043\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1\055" +
    "\uffe1\057\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\001\002\000" +
    "\062\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\043\uffdf\045\uffdf\046\uffdf\050\uffdf\051\uffdf\055" +
    "\uffdf\057\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\001\002\000" +
    "\054\011\054\012\061\013\052\014\060\015\062\016\047" +
    "\017\053\033\050\035\057\041\051\045\030\061\036\062" +
    "\010\063\025\064\004\065\045\066\041\067\033\070\035" +
    "\071\005\072\032\001\002\000\034\020\171\023\076\024" +
    "\073\025\072\026\067\027\100\030\077\031\101\032\066" +
    "\034\074\035\071\036\075\037\102\001\002\000\062\002" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\043\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\055\uffe0\057" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\071\uffe0\072\uffe0\001\002\000\012\003" +
    "\uffea\020\uffea\021\162\022\uffea\001\002\000\054\011\054" +
    "\012\061\013\052\014\060\015\062\016\047\017\053\033" +
    "\050\035\057\041\051\045\030\061\036\062\010\063\025" +
    "\064\004\065\045\066\041\067\033\070\035\071\005\072" +
    "\032\001\002\000\034\023\076\024\073\025\072\026\067" +
    "\027\100\030\077\031\101\032\066\034\074\035\071\036" +
    "\075\037\102\040\175\001\002\000\036\020\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\001\002" +
    "\000\054\011\054\012\061\013\052\014\060\015\062\016" +
    "\047\017\053\033\050\035\057\041\051\045\030\061\036" +
    "\062\010\063\025\064\004\065\045\066\041\067\033\070" +
    "\035\071\005\072\032\001\002\000\034\023\076\024\073" +
    "\025\072\026\067\027\100\030\077\031\101\032\066\034" +
    "\074\035\071\036\075\037\102\040\200\001\002\000\036" +
    "\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\001\002\000\060\002\ufffe\004\040\005\012\006" +
    "\023\007\014\010\024\011\020\045\030\046\007\050\ufffe" +
    "\051\017\055\042\057\013\061\036\062\010\063\025\064" +
    "\004\065\045\066\041\067\033\070\035\071\005\072\032" +
    "\001\002\000\062\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\043\ufffc\045\ufffc\046\ufffc\050\ufffc" +
    "\051\ufffc\055\ufffc\057\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\001\002\000\004\040\204\001\002\000\036\020\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\001" +
    "\002\000\004\040\206\001\002\000\036\020\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002" +
    "\000\012\011\210\015\214\016\213\017\215\001\002\000" +
    "\006\021\uffd1\040\uffd1\001\002\000\006\021\217\040\216" +
    "\001\002\000\006\021\uffd2\040\uffd2\001\002\000\006\021" +
    "\uffcf\040\uffcf\001\002\000\006\021\uffd0\040\uffd0\001\002" +
    "\000\006\021\uffce\040\uffce\001\002\000\036\020\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\001" +
    "\002\000\012\011\210\015\214\016\213\017\215\001\002" +
    "\000\006\021\uffd3\040\uffd3\001\002\000\054\011\054\012" +
    "\061\013\052\014\060\015\062\016\047\017\053\033\050" +
    "\035\057\041\051\045\030\061\036\062\010\063\025\064" +
    "\004\065\045\066\041\067\033\070\035\071\005\072\032" +
    "\001\002\000\034\023\076\024\073\025\072\026\067\027" +
    "\100\030\077\031\101\032\066\034\074\035\071\036\075" +
    "\037\102\040\223\001\002\000\036\020\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000" +
    "\016\004\040\005\012\006\023\007\014\010\024\040\230" +
    "\001\002\000\054\011\054\012\061\013\052\014\060\015" +
    "\062\016\047\017\053\033\050\035\057\041\051\045\030" +
    "\061\036\062\010\063\025\064\004\065\045\066\041\067" +
    "\033\070\035\071\005\072\032\001\002\000\034\020\227" +
    "\023\076\024\073\025\072\026\067\027\100\030\077\031" +
    "\101\032\066\034\074\035\071\036\075\037\102\001\002" +
    "\000\062\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\043\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2" +
    "\055\uffe2\057\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\001\002" +
    "\000\006\020\ufff0\042\ufff0\001\002\000\006\020\236\042" +
    "\237\001\002\000\004\011\233\001\002\000\004\040\234" +
    "\001\002\000\006\020\uffef\042\uffef\001\002\000\062\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\043\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\055\ufff3\057" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002\000\062\002" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\043\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\055\ufff1\057" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\071\ufff1\072\ufff1\001\002\000\056\004" +
    "\040\005\012\006\023\007\014\010\024\011\020\043\242" +
    "\045\030\046\007\051\017\055\042\057\013\061\036\062" +
    "\010\063\025\064\004\065\045\066\041\067\033\070\035" +
    "\071\005\072\032\001\002\000\062\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\043\ufff2\045\ufff2" +
    "\046\ufff2\050\ufff2\051\ufff2\055\ufff2\057\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2" +
    "\071\ufff2\072\ufff2\001\002\000\056\004\040\005\012\006" +
    "\023\007\014\010\024\011\020\043\243\045\030\046\007" +
    "\051\017\055\042\057\013\061\036\062\010\063\025\064" +
    "\004\065\045\066\041\067\033\070\035\071\005\072\032" +
    "\001\002\000\062\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\043\uffee\045\uffee\046\uffee\050\uffee" +
    "\051\uffee\055\uffee\057\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\001\002\000\062\002\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\043\uffed\045\uffed\046\uffed\050\uffed" +
    "\051\uffed\055\uffed\057\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed" +
    "\001\002\000\054\011\054\012\061\013\052\014\060\015" +
    "\062\016\047\017\053\033\050\035\057\041\051\045\030" +
    "\061\036\062\010\063\025\064\004\065\045\066\041\067" +
    "\033\070\035\071\005\072\032\001\002\000\034\023\076" +
    "\024\073\025\072\026\067\027\100\030\077\031\101\032" +
    "\066\034\074\035\071\036\075\037\102\040\246\001\002" +
    "\000\004\052\247\001\002\000\004\046\250\001\002\000" +
    "\004\047\251\001\002\000\060\003\034\004\040\005\012" +
    "\006\023\007\014\010\024\011\020\045\030\046\007\050" +
    "\ufffd\051\017\055\042\057\013\061\036\062\010\063\025" +
    "\064\004\065\045\066\041\067\033\070\035\071\005\072" +
    "\032\001\002\000\004\050\253\001\002\000\004\053\254" +
    "\001\002\000\064\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\043\uffc6\045\uffc6\046\uffc6\050\uffc6" +
    "\051\uffc6\054\255\055\uffc6\057\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\001\002\000\006\046\260\051\017\001\002\000" +
    "\062\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\043\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\055" +
    "\uffc8\057\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\001\002\000" +
    "\062\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\043\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\055" +
    "\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\001\002\000" +
    "\004\047\262\001\002\000\062\002\uffc4\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\043\uffc4\045\uffc4\046" +
    "\uffc4\050\uffc4\051\uffc4\055\uffc4\057\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071" +
    "\uffc4\072\uffc4\001\002\000\060\003\034\004\040\005\012" +
    "\006\023\007\014\010\024\011\020\045\030\046\007\050" +
    "\ufffd\051\017\055\042\057\013\061\036\062\010\063\025" +
    "\064\004\065\045\066\041\067\033\070\035\071\005\072" +
    "\032\001\002\000\004\050\264\001\002\000\004\053\265" +
    "\001\002\000\062\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\043\uffc5\045\uffc5\046\uffc5\050\uffc5" +
    "\051\uffc5\055\uffc5\057\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\001\002\000\054\011\054\012\061\013\052\014\060\015" +
    "\062\016\047\017\053\033\050\035\057\041\051\045\030" +
    "\061\036\062\010\063\025\064\004\065\045\066\041\067" +
    "\033\070\035\071\005\072\032\001\002\000\034\023\076" +
    "\024\073\025\072\026\067\027\100\030\077\031\101\032" +
    "\066\034\074\035\071\036\075\037\102\040\270\001\002" +
    "\000\004\060\271\001\002\000\004\046\272\001\002\000" +
    "\004\047\273\001\002\000\060\003\034\004\040\005\012" +
    "\006\023\007\014\010\024\011\020\045\030\046\007\050" +
    "\ufffd\051\017\055\042\057\013\061\036\062\010\063\025" +
    "\064\004\065\045\066\041\067\033\070\035\071\005\072" +
    "\032\001\002\000\004\050\275\001\002\000\004\053\276" +
    "\001\002\000\062\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\043\uffcb\045\uffcb\046\uffcb\050\uffcb" +
    "\051\uffcb\055\uffcb\057\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb" +
    "\001\002\000\004\002\001\001\002\000\054\011\054\012" +
    "\061\013\052\014\060\015\062\016\047\017\053\033\050" +
    "\035\057\041\051\045\030\061\036\062\010\063\025\064" +
    "\004\065\045\066\041\067\033\070\035\071\005\072\032" +
    "\001\002\000\034\023\076\024\073\025\072\026\067\027" +
    "\100\030\077\031\101\032\066\034\074\035\071\036\075" +
    "\037\102\040\302\001\002\000\036\020\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002\000" +
    "\060\003\034\004\040\005\012\006\023\007\014\010\024" +
    "\011\020\045\030\046\007\050\ufffd\051\017\055\042\057" +
    "\013\061\036\062\010\063\025\064\004\065\045\066\041" +
    "\067\033\070\035\071\005\072\032\001\002\000\004\050" +
    "\305\001\002\000\004\053\306\001\002\000\062\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\043" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\055\ufff4\057\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\001\002\000\004\040\310" +
    "\001\002\000\036\020\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\001\002\000\054\011\054\012" +
    "\061\013\052\014\060\015\062\016\047\017\053\033\050" +
    "\035\057\041\051\045\030\061\036\062\010\063\025\064" +
    "\004\065\045\066\041\067\033\070\035\071\005\072\032" +
    "\001\002\000\034\023\076\024\073\025\072\026\067\027" +
    "\100\030\077\031\101\032\066\034\074\035\071\036\075" +
    "\037\102\040\313\001\002\000\036\020\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\032\002\010\003\025\004\026\005\005\006" +
    "\030\007\043\011\036\012\021\016\020\017\042\020\015" +
    "\021\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\201\006\030\007\043\011\036\012" +
    "\021\016\020\017\042\020\015\021\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\200\005\005\006\030\007\043\011\036" +
    "\012\021\016\020\017\042\020\015\021\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\157\014\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\062\027\055\030\054\001\001\000\002\001" +
    "\001\000\010\017\062\027\126\030\054\001\001\000\010" +
    "\017\062\027\124\030\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\062\027\115\030" +
    "\054\001\001\000\010\017\062\027\114\030\054\001\001" +
    "\000\002\001\001\000\010\017\062\027\113\030\054\001" +
    "\001\000\010\017\062\027\112\030\054\001\001\000\010" +
    "\017\062\027\111\030\054\001\001\000\010\017\062\027" +
    "\110\030\054\001\001\000\010\017\062\027\107\030\054" +
    "\001\001\000\010\017\062\027\106\030\054\001\001\000" +
    "\010\017\062\027\105\030\054\001\001\000\010\017\062" +
    "\027\104\030\054\001\001\000\010\017\062\027\103\030" +
    "\054\001\001\000\010\017\062\027\102\030\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\062" +
    "\027\121\030\054\032\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\132\024\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\062\027\137" +
    "\030\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\143\004\026\005\005\006\030" +
    "\007\043\011\036\012\021\016\020\017\042\020\015\021" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\062\027\150\030" +
    "\054\001\001\000\002\001\001\000\010\017\062\027\152" +
    "\030\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\171\001\001" +
    "\000\004\015\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\062\027\167\030\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\062\027\173\030\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\062\027\176\030\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\201\006\030\007\043\011\036\012\021\016\020\017\042" +
    "\020\015\021\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\210\026\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\217\001\001\000\002\001\001\000\010\017\062\027\221" +
    "\030\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\231\034\230\001\001\000\010\017\062\027\225" +
    "\030\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\240\005\005\006\030\007\043" +
    "\010\237\011\036\012\021\016\020\017\042\020\015\021" +
    "\014\001\001\000\002\001\001\000\024\005\201\006\030" +
    "\007\043\011\036\012\021\016\020\017\042\020\015\021" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\062\027\244\030\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\251\004\026\005\005\006\030\007\043\011\036\012" +
    "\021\016\020\017\042\020\015\021\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\255\001\001\000" +
    "\006\021\260\023\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\262\004\026\005\005\006\030\007\043\011\036\012\021" +
    "\016\020\017\042\020\015\021\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\062" +
    "\027\266\030\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\273" +
    "\004\026\005\005\006\030\007\043\011\036\012\021\016" +
    "\020\017\042\020\015\021\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\062\027\300\030\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\303\004\026\005\005\006" +
    "\030\007\043\011\036\012\021\016\020\017\042\020\015" +
    "\021\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\062\027\311\030\054\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserScriptingToJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserScriptingToJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserScriptingToJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
    private AnalyzerSemantico analyzerSemantico = new AnalyzerSemantico();
    private ArrayList<String> listID = new ArrayList();
    private String javaScriptString = "";

	  public ParserScriptingToJS(LexemaScriptingToJS lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        Token token = getToken(cur_token);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    private Token getToken(Symbol cur_token){
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        return new Token(line, columna, lexema);
    }

    private Token getToken(int line,int columna,String lexema){
        return new Token(line, columna, lexema);
    }

    public AnalyzerSemantico getAnalyzerSemantico(){
        return this.analyzerSemantico;
    }

    private void addJavaScript(String addJS){
          javaScriptString += " "+addJS+" ";
    }

    public String getJavaScriptString(){
      return this.javaScriptString;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserScriptingToJS$actions {
  private final ParserScriptingToJS parser;

  /** Constructor */
  CUP$ParserScriptingToJS$actions(ParserScriptingToJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserScriptingToJS$do_action_part00000000(
    int                        CUP$ParserScriptingToJS$act_num,
    java_cup.runtime.lr_parser CUP$ParserScriptingToJS$parser,
    java.util.Stack            CUP$ParserScriptingToJS$stack,
    int                        CUP$ParserScriptingToJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserScriptingToJS$result;

      /* select the action based on the action number */
      switch (CUP$ParserScriptingToJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= gramtica EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = start_val;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserScriptingToJS$parser.done_parsing();
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // gramtica ::= inicio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		addJavaScript(a.toString());
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("gramtica",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= 
            {
              Object RESULT =null;
		RESULT =  "";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bucle_inicio ::= bucle_inicio instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString() + b.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_inicio",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bucle_inicio ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_inicio",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= asignar_variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= sentencias_control 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= funciones_defecto SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT =  a.toString() + " ; ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= instrucciones_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =  a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones_int ::= INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		
RESULT =  in.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones_int",4, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-4)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= ID PARENTHESIS_OPEN parametro_funcion ejecucion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int ejleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object ej = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
if(ej != null ){
String ejer = ej.toString();
if(ejer.equals(") ; ")){
RESULT =  id.toString() + " ( " + ej.toString() ;
}else{
RESULT =  " function "+ id.toString() + " ( " + ej.toString() ;
}
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ejecucion ::= BRACKETS_OPEN bucle_funcione 
            {
              Object RESULT =null;
		int buleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int buright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object bu = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT = ") { " + bu.toString() ;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("ejecucion",25, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ejecucion ::= SEMICOLON 
            {
              Object RESULT =null;
		
RESULT =  ") ; " ;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("ejecucion",25, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_funcion ::= PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT =   " ) ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parametro_funcion",26, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro_funcion ::= tipos_datos ID PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT =  type.toString() + d.toString() + " ) ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parametro_funcion",26, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bucle_funcione ::= BRACKETS_CLOSE 
            {
              Object RESULT =null;
		
RESULT =  " } ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_funcione",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bucle_funcione ::= bucle_inicio BRACKETS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT =  a.toString() + " }";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_funcione",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= tipos_datos derivando_declaracion asignar 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int valorUsarleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int valorUsarright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object valorUsar = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT =  type.toString() + d.toString() + valorUsar.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // derivando_declaracion ::= bucle_id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT =  a.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivando_declaracion",9, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // derivando_declaracion ::= MODO bucle_id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT =  a.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivando_declaracion",9, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bucle_id ::= bucle_id COMA ID 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT = b.toString()+" , "+  a.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_id",10, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bucle_id ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT =  a.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_id",10, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipos_datos ::= INTEGER 
            {
              Object RESULT =null;
		
RESULT =  " let ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",7, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipos_datos ::= DECIMAL 
            {
              Object RESULT =null;
		
RESULT =  " let ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",7, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipos_datos ::= BOOLEAN 
            {
              Object RESULT =null;
		
RESULT =  " let ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",7, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipos_datos ::= CHAR 
            {
              Object RESULT =null;
		
RESULT =  " let ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",7, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipos_datos ::= STRING 
            {
              Object RESULT =null;
		
RESULT =  " let ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",7, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignar_variable ::= ID EQUAL operaciones SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int dopeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int doperight = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object dope = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = id.toString()+" = " +dope.toString() + " ; ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar_variable",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignar ::= SEMICOLON 
            {
              Object RESULT =null;
		
RESULT = " ; ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",11, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignar ::= EQUAL operaciones SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = " = " + a.toString() + " ; ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",11, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignar ::= error 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",11, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funciones_defecto ::= ASC PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').sort().join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funciones_defecto ::= DESC PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').sort().reverse().join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funciones_defecto ::= LETPAR_NUM PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').map((char, index) => (index + 1) % 2 === 0 ? char.charCodeAt(0) : char).join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funciones_defecto ::= LETIMPAR_NUM PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').map((char, index) => index % 2 === 0 ? char.charCodeAt(0) : char).join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funciones_defecto ::= REVERSE PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = parametro.toString()+".split('').reverse().join('')";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funciones_defecto ::= CARACTER_ALEATORIO PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 52)] ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funciones_defecto ::= NUM_ALEATORIO PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " Math.random() ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funciones_defecto ::= ALERT_INFO PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = " alert("+parametro.toString()+") ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funciones_defecto ::= EXIT PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " return ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funciones_defecto ::= REDIRECT PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funciones_defecto ::= INSERT PARENTHESIS_OPEN bucle_insert PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = a.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bucle_insert ::= bucle_insert COMA datos_insert 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a.toString() + b.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_insert",19, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bucle_insert ::= datos_insert 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_insert",19, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // datos_insert ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // datos_insert ::= NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datos_insert ::= NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datos_insert ::= CHAR_TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias_control ::= sentencia_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =a;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",14, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencias_control ::= REPEAT PARENTHESIS_OPEN condicion_repetir PARENTHESIS_CLOSE HUNTIL PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		
if(a!=null){
    String useId = a.toString();
    Pattern pattern = Pattern.compile("var\\s+(\\w+)\\s*=");
    Matcher matcher = pattern.matcher(useId);
    String variable =  " i ";
        if (matcher.find()) {
            variable = matcher.group(1); // Extrae la variable capturada
        }
    RESULT = "for (  " +a.toString()+ " ; "+ variable + " < " + b.toString() + " ; " + variable + "++ ) { " + c.toString() + " } " ;
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",14, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-12)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencias_control ::= WHILE PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE THENWHILE INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		RESULT = " while ( "+ a.toString() + " ) {" + b.toString()  +"}" ;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",14, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-9)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion_repetir ::= ID EQUAL operaciones 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = id.toString() +" = " + a.toString() ; 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("condicion_repetir",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion_repetir ::= tipos_datos ID EQUAL operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString() +" " + id.toString()  +" = " +b.toString(); 
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("condicion_repetir",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_if ::= IF PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE THEN INIT START_INIT inicio AND_INIT END else_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
if(b!=null){
RESULT = " if ( "+ a.toString() + " ) {" + b.toString()  +"}" +c.toString(); 
}else{
RESULT = " if ( "+ a.toString() + " ) {" + b.toString()  +"}"  +c.toString(); 
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencia_if",15, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-10)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // else_if ::= ELSE derivar_elser_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = "else"+ a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("else_if",16, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_if ::= 
            {
              Object RESULT =null;
		RESULT = " ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("else_if",16, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // derivar_elser_if ::= INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		RESULT = " { "+ a.toString() + " } ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivar_elser_if",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-4)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // derivar_elser_if ::= sentencia_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " { "+ a.toString() + " } ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivar_elser_if",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones ::= operaciones SAME_AS operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " === " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones ::= operaciones NOT_THE_SAME operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " !== " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones ::= operaciones LESS_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " < " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones ::= operaciones LESS_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " <= " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones ::= operaciones GREATER_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " > " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones ::= operaciones GREATER_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " >= " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones ::= operaciones OR operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " || " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones ::= operaciones AND operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " && " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones ::= NOT operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = "!" + a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones ::= operaciones ADDITION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " + " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones ::= operaciones SUBTRACTION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " - " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones ::= operaciones DIVISION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " / " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones ::= operaciones MULTIPLICATION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " * " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones ::= PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = "("+ a.toString() + " ) ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones ::= TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operaciones ::= NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operaciones ::= NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operaciones ::= SUBTRACTION NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =" - "+a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operaciones ::= SUBTRACTION NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " - "+a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operaciones ::= CHAR_TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operaciones ::= parentesis 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operaciones ::= funciones_defecto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parentesis ::= ID fucion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int funcion_idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int funcion_idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object funcion_id = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT = id.toString() + funcion_id.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parentesis",22, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // fucion_id ::= PARENTHESIS_OPEN vacio_interno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT = " ( " + a.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("fucion_id",23, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fucion_id ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("fucion_id",23, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vacio_interno ::= operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = a.toString() + " ) ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_interno",24, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // vacio_interno ::= PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " ) ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_interno",24, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserScriptingToJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserScriptingToJS$do_action(
    int                        CUP$ParserScriptingToJS$act_num,
    java_cup.runtime.lr_parser CUP$ParserScriptingToJS$parser,
    java.util.Stack            CUP$ParserScriptingToJS$stack,
    int                        CUP$ParserScriptingToJS$top)
    throws java.lang.Exception
    {
              return CUP$ParserScriptingToJS$do_action_part00000000(
                               CUP$ParserScriptingToJS$act_num,
                               CUP$ParserScriptingToJS$parser,
                               CUP$ParserScriptingToJS$stack,
                               CUP$ParserScriptingToJS$top);
    }
}

}
