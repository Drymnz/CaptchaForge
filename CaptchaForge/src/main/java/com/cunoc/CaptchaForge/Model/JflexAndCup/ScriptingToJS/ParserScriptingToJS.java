
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.ScriptingToJS;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import com.cunoc.CaptchaForge.Model.JflexAndCup.AnalyzerSemantico;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Operation.ListTypeOperations;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Operation.ListsDefaultFunctionOperations;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.DataValue;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.ListTypeData;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserScriptingToJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymScriptingToJS.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserScriptingToJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserScriptingToJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserScriptingToJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\005\007\000\002\006\007\000\002\007\003\000\002\007" +
    "\004\000\002\011\005\000\002\012\003\000\002\012\004" +
    "\000\002\013\005\000\002\013\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\015\006\000\002\014\003\000\002\014" +
    "\005\000\002\014\003\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\005\000\002\016\005\000\002\016\006\000\002" +
    "\016\005\000\002\016\005\000\002\016\006\000\002\024" +
    "\004\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\017\003\000\002\017\017\000" +
    "\002\017\014\000\002\023\005\000\002\023\006\000\002" +
    "\020\015\000\002\021\004\000\002\021\002\000\002\022" +
    "\007\000\002\022\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\004\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\004\000\002\030\004\000\002\030\002\000\002\031\004" +
    "\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\060\002\ufffe\003\033\004\037\005\011\006" +
    "\022\007\013\010\025\011\017\045\027\046\007\051\016" +
    "\055\042\057\012\061\035\062\010\063\024\064\004\065" +
    "\044\066\040\067\032\070\034\071\005\072\031\001\002" +
    "\000\004\041\300\001\002\000\004\041\276\001\002\000" +
    "\062\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\043\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\055" +
    "\ufffc\057\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\001\002\000" +
    "\004\047\272\001\002\000\004\041\267\001\002\000\006" +
    "\011\uffeb\044\uffeb\001\002\000\004\041\256\001\002\000" +
    "\006\011\uffe9\044\uffe9\001\002\000\062\002\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\043\uffd3\045" +
    "\uffd3\046\uffd3\050\uffd3\051\uffd3\055\uffd3\057\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\001\002\000\062\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\043\ufff8\045" +
    "\ufff8\046\ufff8\050\ufff8\051\ufff8\055\ufff8\057\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\001\002\000\004\041\234\001\002" +
    "\000\006\022\222\041\223\001\002\000\062\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\043\ufff9" +
    "\045\ufff9\046\ufff9\050\ufff9\051\ufff9\055\ufff9\057\ufff9\061" +
    "\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\071\ufff9\072\ufff9\001\002\000\062\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\043\ufffa" +
    "\045\ufffa\046\ufffa\050\ufffa\051\ufffa\055\ufffa\057\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\072\ufffa\001\002\000\006\011\uffea\044" +
    "\uffea\001\002\000\004\002\221\001\002\000\004\041\216" +
    "\001\002\000\006\011\uffe8\044\uffe8\001\002\000\060\002" +
    "\000\004\037\005\011\006\022\007\013\010\025\011\017" +
    "\045\027\046\007\050\000\051\016\055\042\057\012\061" +
    "\035\062\010\063\024\064\004\065\044\066\040\067\032" +
    "\070\034\071\005\072\031\001\002\000\004\041\206\001" +
    "\002\000\062\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\043\ufff6\045\ufff6\046\ufff6\050\ufff6\051" +
    "\ufff6\055\ufff6\057\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\001" +
    "\002\000\004\041\204\001\002\000\004\041\202\001\002" +
    "\000\054\004\037\005\011\006\022\007\013\010\025\011" +
    "\017\045\027\046\007\051\016\055\042\057\012\061\035" +
    "\062\010\063\024\064\004\065\044\066\040\067\032\070" +
    "\034\071\005\072\031\001\002\000\004\041\175\001\002" +
    "\000\004\041\172\001\002\000\006\011\155\044\156\001" +
    "\002\000\006\011\uffec\044\uffec\001\002\000\004\041\153" +
    "\001\002\000\004\020\152\001\002\000\004\041\127\001" +
    "\002\000\062\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\051" +
    "\ufffb\055\ufffb\057\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\001" +
    "\002\000\004\041\045\001\002\000\054\011\053\012\061" +
    "\013\051\014\057\015\060\016\046\017\052\033\047\035" +
    "\056\041\050\045\027\061\035\062\010\063\024\064\004" +
    "\065\044\066\040\067\032\070\034\071\005\072\031\001" +
    "\002\000\036\020\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\001\002\000\054\011\053\012\061" +
    "\013\051\014\057\015\060\016\046\017\052\033\047\035" +
    "\056\041\050\045\027\061\035\062\010\063\024\064\004" +
    "\065\044\066\040\067\032\070\034\071\005\072\031\001" +
    "\002\000\054\011\053\012\061\013\051\014\057\015\060" +
    "\016\046\017\052\033\047\035\056\041\050\045\027\061" +
    "\035\062\010\063\024\064\004\065\044\066\040\067\032" +
    "\070\034\071\005\072\031\001\002\000\036\020\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\001" +
    "\002\000\036\020\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\001\002\000\040\020\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\116" +
    "\001\002\000\036\020\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\001\002\000\034\023\075\024" +
    "\072\025\071\026\066\027\077\030\076\031\100\032\065" +
    "\034\073\035\070\036\074\037\101\040\067\001\002\000" +
    "\006\015\064\016\063\001\002\000\036\020\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\001\002" +
    "\000\036\020\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\001\002\000\036\020\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\001\002\000" +
    "\036\020\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\001\002\000\036\020\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\001\002\000\036" +
    "\020\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\001\002\000\054\011\053\012\061\013\051\014" +
    "\057\015\060\016\046\017\052\033\047\035\056\041\050" +
    "\045\027\061\035\062\010\063\024\064\004\065\044\066" +
    "\040\067\032\070\034\071\005\072\031\001\002\000\054" +
    "\011\053\012\061\013\051\014\057\015\060\016\046\017" +
    "\052\033\047\035\056\041\050\045\027\061\035\062\010" +
    "\063\024\064\004\065\044\066\040\067\032\070\034\071" +
    "\005\072\031\001\002\000\036\020\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\001\002\000\054" +
    "\011\053\012\061\013\051\014\057\015\060\016\046\017" +
    "\052\033\047\035\056\041\050\045\027\061\035\062\010" +
    "\063\024\064\004\065\044\066\040\067\032\070\034\071" +
    "\005\072\031\001\002\000\054\011\053\012\061\013\051" +
    "\014\057\015\060\016\046\017\052\033\047\035\056\041" +
    "\050\045\027\061\035\062\010\063\024\064\004\065\044" +
    "\066\040\067\032\070\034\071\005\072\031\001\002\000" +
    "\054\011\053\012\061\013\051\014\057\015\060\016\046" +
    "\017\052\033\047\035\056\041\050\045\027\061\035\062" +
    "\010\063\024\064\004\065\044\066\040\067\032\070\034" +
    "\071\005\072\031\001\002\000\054\011\053\012\061\013" +
    "\051\014\057\015\060\016\046\017\052\033\047\035\056" +
    "\041\050\045\027\061\035\062\010\063\024\064\004\065" +
    "\044\066\040\067\032\070\034\071\005\072\031\001\002" +
    "\000\054\011\053\012\061\013\051\014\057\015\060\016" +
    "\046\017\052\033\047\035\056\041\050\045\027\061\035" +
    "\062\010\063\024\064\004\065\044\066\040\067\032\070" +
    "\034\071\005\072\031\001\002\000\054\011\053\012\061" +
    "\013\051\014\057\015\060\016\046\017\052\033\047\035" +
    "\056\041\050\045\027\061\035\062\010\063\024\064\004" +
    "\065\044\066\040\067\032\070\034\071\005\072\031\001" +
    "\002\000\054\011\053\012\061\013\051\014\057\015\060" +
    "\016\046\017\052\033\047\035\056\041\050\045\027\061" +
    "\035\062\010\063\024\064\004\065\044\066\040\067\032" +
    "\070\034\071\005\072\031\001\002\000\054\011\053\012" +
    "\061\013\051\014\057\015\060\016\046\017\052\033\047" +
    "\035\056\041\050\045\027\061\035\062\010\063\024\064" +
    "\004\065\044\066\040\067\032\070\034\071\005\072\031" +
    "\001\002\000\054\011\053\012\061\013\051\014\057\015" +
    "\060\016\046\017\052\033\047\035\056\041\050\045\027" +
    "\061\035\062\010\063\024\064\004\065\044\066\040\067" +
    "\032\070\034\071\005\072\031\001\002\000\054\011\053" +
    "\012\061\013\051\014\057\015\060\016\046\017\052\033" +
    "\047\035\056\041\050\045\027\061\035\062\010\063\024" +
    "\064\004\065\044\066\040\067\032\070\034\071\005\072" +
    "\031\001\002\000\036\020\uffbd\023\075\024\072\025\071" +
    "\026\066\027\077\030\076\031\100\032\065\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\001\002\000\036\020\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\065\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\001\002\000\036\020\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\100\032\065\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\001\002\000\036\020\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\100" +
    "\032\065\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\001" +
    "\002\000\036\020\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\100\032\065\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\001\002\000\036\020\uffbe\023\075" +
    "\024\072\025\071\026\066\027\077\030\076\031\100\032" +
    "\065\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\001\002" +
    "\000\036\020\uffc0\023\075\024\072\025\071\026\066\027" +
    "\077\030\076\031\100\032\065\034\uffc0\035\uffc0\036\074" +
    "\037\101\040\uffc0\001\002\000\036\020\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\100\032\065" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\001\002\000" +
    "\036\020\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\100\032\065\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\001\002\000\036\020\uffbf\023\075\024\072" +
    "\025\071\026\066\027\077\030\076\031\100\032\065\034" +
    "\uffbf\035\uffbf\036\074\037\101\040\uffbf\001\002\000\036" +
    "\020\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\100\032\065\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\001\002\000\036\020\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\001\002\000\056\011" +
    "\053\012\061\013\051\014\057\015\060\016\046\017\052" +
    "\033\047\035\056\040\122\041\050\045\027\061\035\062" +
    "\010\063\024\064\004\065\044\066\040\067\032\070\034" +
    "\071\005\072\031\001\002\000\036\020\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\001\002\000" +
    "\036\020\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\001\002\000\034\023\075\024\072\025\071" +
    "\026\066\027\077\030\076\031\100\032\065\034\073\035" +
    "\070\036\074\037\101\040\123\001\002\000\036\020\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\001\002\000\036\020\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\001\002\000\034\023\075\024" +
    "\072\025\071\026\066\027\077\030\076\031\100\032\065" +
    "\034\073\035\070\036\074\037\101\040\125\001\002\000" +
    "\036\020\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\001\002\000\036\020\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\001\002\000\016" +
    "\004\037\005\011\006\022\007\013\010\025\011\130\001" +
    "\002\000\004\022\150\001\002\000\004\011\145\001\002" +
    "\000\004\040\133\001\002\000\004\056\134\001\002\000" +
    "\004\041\135\001\002\000\054\011\053\012\061\013\051" +
    "\014\057\015\060\016\046\017\052\033\047\035\056\041" +
    "\050\045\027\061\035\062\010\063\024\064\004\065\044" +
    "\066\040\067\032\070\034\071\005\072\031\001\002\000" +
    "\034\023\075\024\072\025\071\026\066\027\077\030\076" +
    "\031\100\032\065\034\073\035\070\036\074\037\101\040" +
    "\137\001\002\000\004\046\140\001\002\000\004\047\141" +
    "\001\002\000\060\003\033\004\037\005\011\006\022\007" +
    "\013\010\025\011\017\045\027\046\007\050\ufffe\051\016" +
    "\055\042\057\012\061\035\062\010\063\024\064\004\065" +
    "\044\066\040\067\032\070\034\071\005\072\031\001\002" +
    "\000\004\050\143\001\002\000\004\053\144\001\002\000" +
    "\062\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\043\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\055" +
    "\uffd2\057\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\001\002\000" +
    "\004\022\146\001\002\000\054\011\053\012\061\013\051" +
    "\014\057\015\060\016\046\017\052\033\047\035\056\041" +
    "\050\045\027\061\035\062\010\063\024\064\004\065\044" +
    "\066\040\067\032\070\034\071\005\072\031\001\002\000" +
    "\034\023\075\024\072\025\071\026\066\027\077\030\076" +
    "\031\100\032\065\034\073\035\070\036\074\037\101\040" +
    "\uffcf\001\002\000\054\011\053\012\061\013\051\014\057" +
    "\015\060\016\046\017\052\033\047\035\056\041\050\045" +
    "\027\061\035\062\010\063\024\064\004\065\044\066\040" +
    "\067\032\070\034\071\005\072\031\001\002\000\034\023" +
    "\075\024\072\025\071\026\066\027\077\030\076\031\100" +
    "\032\065\034\073\035\070\036\074\037\101\040\uffd0\001" +
    "\002\000\062\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\043\ufff7\045\ufff7\046\ufff7\050\ufff7\051" +
    "\ufff7\055\ufff7\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\001" +
    "\002\000\004\040\154\001\002\000\036\020\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\001\002" +
    "\000\012\003\uffed\020\uffed\021\uffed\022\uffed\001\002\000" +
    "\004\011\155\001\002\000\010\003\165\020\164\022\166" +
    "\001\002\000\012\003\ufff0\020\ufff0\021\161\022\ufff0\001" +
    "\002\000\004\011\162\001\002\000\012\003\uffee\020\uffee" +
    "\021\uffee\022\uffee\001\002\000\062\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\043\ufff1\045\ufff1" +
    "\046\ufff1\050\ufff1\051\ufff1\055\ufff1\057\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\001\002\000\062\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\043\uffe6\045\uffe6" +
    "\046\uffe6\050\uffe6\051\uffe6\055\uffe6\057\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\071\uffe6\072\uffe6\001\002\000\062\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\043\uffe4\045\uffe4" +
    "\046\uffe4\050\uffe4\051\uffe4\055\uffe4\057\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\001\002\000\054\011\053\012\061\013" +
    "\051\014\057\015\060\016\046\017\052\033\047\035\056" +
    "\041\050\045\027\061\035\062\010\063\024\064\004\065" +
    "\044\066\040\067\032\070\034\071\005\072\031\001\002" +
    "\000\034\020\170\023\075\024\072\025\071\026\066\027" +
    "\077\030\076\031\100\032\065\034\073\035\070\036\074" +
    "\037\101\001\002\000\062\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\043\uffe5\045\uffe5\046\uffe5" +
    "\050\uffe5\051\uffe5\055\uffe5\057\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\001\002\000\012\003\uffef\020\uffef\021\161\022" +
    "\uffef\001\002\000\054\011\053\012\061\013\051\014\057" +
    "\015\060\016\046\017\052\033\047\035\056\041\050\045" +
    "\027\061\035\062\010\063\024\064\004\065\044\066\040" +
    "\067\032\070\034\071\005\072\031\001\002\000\034\023" +
    "\075\024\072\025\071\026\066\027\077\030\076\031\100" +
    "\032\065\034\073\035\070\036\074\037\101\040\174\001" +
    "\002\000\036\020\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\001\002\000\054\011\053\012\061" +
    "\013\051\014\057\015\060\016\046\017\052\033\047\035" +
    "\056\041\050\045\027\061\035\062\010\063\024\064\004" +
    "\065\044\066\040\067\032\070\034\071\005\072\031\001" +
    "\002\000\034\023\075\024\072\025\071\026\066\027\077" +
    "\030\076\031\100\032\065\034\073\035\070\036\074\037" +
    "\101\040\177\001\002\000\036\020\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000\060" +
    "\002\uffff\004\037\005\011\006\022\007\013\010\025\011" +
    "\017\045\027\046\007\050\uffff\051\016\055\042\057\012" +
    "\061\035\062\010\063\024\064\004\065\044\066\040\067" +
    "\032\070\034\071\005\072\031\001\002\000\062\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\043" +
    "\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd\055\ufffd\057\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\001\002\000\004\040\203" +
    "\001\002\000\036\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\001\002\000\004\040\205\001" +
    "\002\000\036\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\001\002\000\010\011\207\015\213" +
    "\016\212\001\002\000\012\011\uffd6\015\uffd6\016\uffd6\040" +
    "\uffd6\001\002\000\012\011\207\015\213\016\212\040\214" +
    "\001\002\000\012\011\uffd7\015\uffd7\016\uffd7\040\uffd7\001" +
    "\002\000\012\011\uffd4\015\uffd4\016\uffd4\040\uffd4\001\002" +
    "\000\012\011\uffd5\015\uffd5\016\uffd5\040\uffd5\001\002\000" +
    "\036\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\001\002\000\012\011\uffd8\015\uffd8\016\uffd8" +
    "\040\uffd8\001\002\000\054\011\053\012\061\013\051\014" +
    "\057\015\060\016\046\017\052\033\047\035\056\041\050" +
    "\045\027\061\035\062\010\063\024\064\004\065\044\066" +
    "\040\067\032\070\034\071\005\072\031\001\002\000\034" +
    "\023\075\024\072\025\071\026\066\027\077\030\076\031" +
    "\100\032\065\034\073\035\070\036\074\037\101\040\220" +
    "\001\002\000\036\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\001\002\000\004\002\001\001" +
    "\002\000\054\011\053\012\061\013\051\014\057\015\060" +
    "\016\046\017\052\033\047\035\056\041\050\045\027\061" +
    "\035\062\010\063\024\064\004\065\044\066\040\067\032" +
    "\070\034\071\005\072\031\001\002\000\004\040\224\001" +
    "\002\000\004\042\225\001\002\000\056\004\037\005\011" +
    "\006\022\007\013\010\025\011\017\043\230\045\027\046" +
    "\007\051\016\055\042\057\012\061\035\062\010\063\024" +
    "\064\004\065\044\066\040\067\032\070\034\071\005\072" +
    "\031\001\002\000\062\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\043\ufff4\045\ufff4\046\ufff4\050" +
    "\ufff4\051\ufff4\055\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072" +
    "\ufff4\001\002\000\056\004\037\005\011\006\022\007\013" +
    "\010\025\011\017\043\231\045\027\046\007\051\016\055" +
    "\042\057\012\061\035\062\010\063\024\064\004\065\044" +
    "\066\040\067\032\070\034\071\005\072\031\001\002\000" +
    "\062\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\043\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\055" +
    "\ufff3\057\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3" +
    "\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002\000" +
    "\062\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\043\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\055" +
    "\ufff2\057\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\001\002\000" +
    "\034\020\233\023\075\024\072\025\071\026\066\027\077" +
    "\030\076\031\100\032\065\034\073\035\070\036\074\037" +
    "\101\001\002\000\062\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\043\uffe7\045\uffe7\046\uffe7\050" +
    "\uffe7\051\uffe7\055\uffe7\057\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\001\002\000\054\011\053\012\061\013\051\014\057" +
    "\015\060\016\046\017\052\033\047\035\056\041\050\045" +
    "\027\061\035\062\010\063\024\064\004\065\044\066\040" +
    "\067\032\070\034\071\005\072\031\001\002\000\034\023" +
    "\075\024\072\025\071\026\066\027\077\030\076\031\100" +
    "\032\065\034\073\035\070\036\074\037\101\040\236\001" +
    "\002\000\004\052\237\001\002\000\004\046\240\001\002" +
    "\000\004\047\241\001\002\000\060\003\033\004\037\005" +
    "\011\006\022\007\013\010\025\011\017\045\027\046\007" +
    "\050\ufffe\051\016\055\042\057\012\061\035\062\010\063" +
    "\024\064\004\065\044\066\040\067\032\070\034\071\005" +
    "\072\031\001\002\000\004\050\243\001\002\000\004\053" +
    "\244\001\002\000\064\002\uffcc\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\043\uffcc\045\uffcc\046\uffcc\050" +
    "\uffcc\051\uffcc\054\245\055\uffcc\057\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\001\002\000\006\046\250\051\016\001\002" +
    "\000\062\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\043\uffce\045\uffce\046\uffce\050\uffce\051\uffce" +
    "\055\uffce\057\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\001\002" +
    "\000\062\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\043\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd" +
    "\055\uffcd\057\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\001\002" +
    "\000\004\047\252\001\002\000\062\002\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\043\uffca\045\uffca" +
    "\046\uffca\050\uffca\051\uffca\055\uffca\057\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\001\002\000\060\003\033\004\037\005" +
    "\011\006\022\007\013\010\025\011\017\045\027\046\007" +
    "\050\ufffe\051\016\055\042\057\012\061\035\062\010\063" +
    "\024\064\004\065\044\066\040\067\032\070\034\071\005" +
    "\072\031\001\002\000\004\050\254\001\002\000\004\053" +
    "\255\001\002\000\062\002\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\043\uffcb\045\uffcb\046\uffcb\050" +
    "\uffcb\051\uffcb\055\uffcb\057\uffcb\061\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\001\002\000\054\011\053\012\061\013\051\014\057" +
    "\015\060\016\046\017\052\033\047\035\056\041\050\045" +
    "\027\061\035\062\010\063\024\064\004\065\044\066\040" +
    "\067\032\070\034\071\005\072\031\001\002\000\034\023" +
    "\075\024\072\025\071\026\066\027\077\030\076\031\100" +
    "\032\065\034\073\035\070\036\074\037\101\040\260\001" +
    "\002\000\004\060\261\001\002\000\004\046\262\001\002" +
    "\000\004\047\263\001\002\000\060\003\033\004\037\005" +
    "\011\006\022\007\013\010\025\011\017\045\027\046\007" +
    "\050\ufffe\051\016\055\042\057\012\061\035\062\010\063" +
    "\024\064\004\065\044\066\040\067\032\070\034\071\005" +
    "\072\031\001\002\000\004\050\265\001\002\000\004\053" +
    "\266\001\002\000\062\002\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\043\uffd1\045\uffd1\046\uffd1\050" +
    "\uffd1\051\uffd1\055\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072" +
    "\uffd1\001\002\000\054\011\053\012\061\013\051\014\057" +
    "\015\060\016\046\017\052\033\047\035\056\041\050\045" +
    "\027\061\035\062\010\063\024\064\004\065\044\066\040" +
    "\067\032\070\034\071\005\072\031\001\002\000\034\023" +
    "\075\024\072\025\071\026\066\027\077\030\076\031\100" +
    "\032\065\034\073\035\070\036\074\037\101\040\271\001" +
    "\002\000\036\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\001\002\000\060\003\033\004\037" +
    "\005\011\006\022\007\013\010\025\011\017\045\027\046" +
    "\007\050\ufffe\051\016\055\042\057\012\061\035\062\010" +
    "\063\024\064\004\065\044\066\040\067\032\070\034\071" +
    "\005\072\031\001\002\000\004\050\274\001\002\000\004" +
    "\053\275\001\002\000\062\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\043\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\051\ufff5\055\ufff5\057\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\001\002\000\004\040\277\001\002\000\036\020" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\001\002\000\054\011\053\012\061\013\051\014\057" +
    "\015\060\016\046\017\052\033\047\035\056\041\050\045" +
    "\027\061\035\062\010\063\024\064\004\065\044\066\040" +
    "\067\032\070\034\071\005\072\031\001\002\000\034\023" +
    "\075\024\072\025\071\026\066\027\077\030\076\031\100" +
    "\032\065\034\073\035\070\036\074\037\101\040\302\001" +
    "\002\000\036\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\030\002\022\003\025\004\005\005\027\006" +
    "\042\010\035\011\020\015\017\016\040\017\014\020\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\200" +
    "\005\027\006\042\010\035\011\020\015\017\016\040\017" +
    "\014\020\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\177\004" +
    "\005\005\027\006\042\010\035\011\020\015\017\016\040" +
    "\017\014\020\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\156\013\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\061\026\054" +
    "\027\053\001\001\000\002\001\001\000\010\016\061\026" +
    "\125\027\053\001\001\000\010\016\061\026\123\027\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\061\026\114\027\053\001\001\000\010\016" +
    "\061\026\113\027\053\001\001\000\002\001\001\000\010" +
    "\016\061\026\112\027\053\001\001\000\010\016\061\026" +
    "\111\027\053\001\001\000\010\016\061\026\110\027\053" +
    "\001\001\000\010\016\061\026\107\027\053\001\001\000" +
    "\010\016\061\026\106\027\053\001\001\000\010\016\061" +
    "\026\105\027\053\001\001\000\010\016\061\026\104\027" +
    "\053\001\001\000\010\016\061\026\103\027\053\001\001" +
    "\000\010\016\061\026\102\027\053\001\001\000\010\016" +
    "\061\026\101\027\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\061\026\120\027\053\031\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\130\023" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\061\026\135\027\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\141\003\025\004" +
    "\005\005\027\006\042\010\035\011\020\015\017\016\040" +
    "\017\014\020\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\061" +
    "\026\146\027\053\001\001\000\002\001\001\000\010\016" +
    "\061\026\150\027\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\170\001\001\000\004\014\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\061\026\166\027\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\061\026\172" +
    "\027\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\061\026\175\027\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\200\005\027\006\042\010" +
    "\035\011\020\015\017\016\040\017\014\020\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\207\025\210" +
    "\001\001\000\002\001\001\000\004\025\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\061\026\216\027" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\061\026\231\027\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\226\004\005" +
    "\005\027\006\042\007\225\010\035\011\020\015\017\016" +
    "\040\017\014\020\013\001\001\000\002\001\001\000\024" +
    "\004\200\005\027\006\042\010\035\011\020\015\017\016" +
    "\040\017\014\020\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\061\026\234\027\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\241\003\025\004\005\005\027\006\042\010\035\011\020" +
    "\015\017\016\040\017\014\020\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\245\001\001\000\006" +
    "\020\250\022\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\252" +
    "\003\025\004\005\005\027\006\042\010\035\011\020\015" +
    "\017\016\040\017\014\020\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\061\026" +
    "\256\027\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\263\003" +
    "\025\004\005\005\027\006\042\010\035\011\020\015\017" +
    "\016\040\017\014\020\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\061\026\267" +
    "\027\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\272\003\025\004\005\005\027\006\042\010\035" +
    "\011\020\015\017\016\040\017\014\020\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\061\026\300\027" +
    "\053\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserScriptingToJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserScriptingToJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserScriptingToJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
    private AnalyzerSemantico analyzerSemantico = new AnalyzerSemantico();
    private ArrayList<String> listID = new ArrayList();
    private String javaScriptString = "";

	  public ParserScriptingToJS(LexemaScriptingToJS lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        Token token = getToken(cur_token);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    private Token getToken(Symbol cur_token){
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        return new Token(line, columna, lexema);
    }

    private Token getToken(int line,int columna,String lexema){
        return new Token(line, columna, lexema);
    }

    public AnalyzerSemantico getAnalyzerSemantico(){
        return this.analyzerSemantico;
    }

    private void addJavaScript(String addJS){
          javaScriptString += " "+addJS+" ";
    }

    public String getJavaScriptString(){
      return this.javaScriptString;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserScriptingToJS$actions {
  private final ParserScriptingToJS parser;

  /** Constructor */
  CUP$ParserScriptingToJS$actions(ParserScriptingToJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserScriptingToJS$do_action_part00000000(
    int                        CUP$ParserScriptingToJS$act_num,
    java_cup.runtime.lr_parser CUP$ParserScriptingToJS$parser,
    java.util.Stack            CUP$ParserScriptingToJS$stack,
    int                        CUP$ParserScriptingToJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserScriptingToJS$result;

      /* select the action based on the action number */
      switch (CUP$ParserScriptingToJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = start_val;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserScriptingToJS$parser.done_parsing();
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bucle_inicio ::= bucle_inicio instrucciones 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bucle_inicio ::= instrucciones 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= asignar_variable 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= sentencias_control 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= funciones_defecto SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= instrucciones_int 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones_int ::= INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("instrucciones_int",3, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-4)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcion ::= ID PARENTHESIS_OPEN PARENTHESIS_CLOSE BRACKETS_OPEN bucle_funcione 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-4)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bucle_funcione ::= BRACKETS_CLOSE 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_funcione",5, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bucle_funcione ::= bucle_inicio BRACKETS_CLOSE 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_funcione",5, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= tipos_datos derivando_declaracion asignar 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int valorUsarleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int valorUsarright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object valorUsar = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
if(type!=null && valorUsar!=null){
    ListTypeData typeData = (ListTypeData) type;
    DataValue data = (DataValue) valorUsar;
    analyzerSemantico.registerVariables(listID,data,getToken(this.parser.cur_token));
}
listID = new ArrayList();	

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // derivando_declaracion ::= bucle_id 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivando_declaracion",8, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // derivando_declaracion ::= MODO bucle_id 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivando_declaracion",8, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bucle_id ::= bucle_id COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
listID.add(a.toString());
addJavaScript(","+a.toString());

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_id",9, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bucle_id ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
listID.add(a.toString());
addJavaScript(a.toString());

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_id",9, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipos_datos ::= INTEGER 
            {
              Object RESULT =null;
		
addJavaScript("let");
RESULT = ListTypeData.INTEGER;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipos_datos ::= DECIMAL 
            {
              Object RESULT =null;
		
addJavaScript("let");
RESULT = ListTypeData.DECIMAL;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipos_datos ::= BOOLEAN 
            {
              Object RESULT =null;
		
addJavaScript("let");
RESULT = ListTypeData.BOOLEAN;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipos_datos ::= CHAR 
            {
              Object RESULT =null;
		
addJavaScript("let");
RESULT = ListTypeData.CHAR;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipos_datos ::= STRING 
            {
              Object RESULT =null;
		
addJavaScript("let");
RESULT = ListTypeData.STRING;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("tipos_datos",6, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignar_variable ::= ID EQUAL operaciones SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)).value;
		int dopeleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int doperight = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object dope = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(id != null && dope != null){
DataValue dopeDataValue = (DataValue) dope;
analyzerSemantico.assignNewData(id.toString(),dopeDataValue,getToken(this.parser.cur_token));
addJavaScript(id.toString()+" = " );
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar_variable",11, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar ::= SEMICOLON 
            {
              Object RESULT =null;
		
RESULT = null;
addJavaScript(" ; " );

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",10, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignar ::= EQUAL operaciones SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = a;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",10, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignar ::= error 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("asignar",10, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funciones_defecto ::= ASC PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(parametro!=null){
DataValue parametroDataValue = (DataValue) parametro;
RESULT = analyzerSemantico.getFunctionResult(parametroDataValue, ListsDefaultFunctionOperations.ASC,getToken(this.parser.cur_token));
addJavaScript(parametroDataValue.getValue()+".split('').sort().join('')");
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funciones_defecto ::= DESC PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(parametro!=null){
DataValue parametroDataValue = (DataValue) parametro;
RESULT = analyzerSemantico.getFunctionResult(parametroDataValue, ListsDefaultFunctionOperations.DESC,getToken(this.parser.cur_token));
addJavaScript(parametroDataValue.getValue()+".split('').sort().reverse().join('')");
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funciones_defecto ::= LETPAR_NUM PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(parametro!=null){
DataValue parametroDataValue = (DataValue) parametro;
RESULT = analyzerSemantico.getFunctionResult(parametroDataValue, ListsDefaultFunctionOperations.LETPAR_NUM,getToken(this.parser.cur_token));
addJavaScript(parametroDataValue.getValue()+".split('').map((char, index) => (index + 1) % 2 === 0 ? char.charCodeAt(0) : char).join('')");
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funciones_defecto ::= LETIMPAR_NUM PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(parametro!=null){
DataValue parametroDataValue = (DataValue) parametro;
RESULT = analyzerSemantico.getFunctionResult(parametroDataValue, ListsDefaultFunctionOperations.LETIMPAR_NUM,getToken(this.parser.cur_token));
addJavaScript(parametroDataValue.getValue()+".split('').map((char, index) => index % 2 === 0 ? char.charCodeAt(0) : char).join('')");
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funciones_defecto ::= REVERSE PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(parametro!=null){
DataValue parametroDataValue = (DataValue) parametro;
RESULT = analyzerSemantico.getFunctionResult(parametroDataValue, ListsDefaultFunctionOperations.REVERSE,getToken(this.parser.cur_token));
addJavaScript(parametroDataValue.getValue()+".split('').reverse().join('')");
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funciones_defecto ::= CARACTER_ALEATORIO PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = analyzerSemantico.getFunctionResult(null, ListsDefaultFunctionOperations.CARACTER_ALEATORIO,getToken(this.parser.cur_token));
addJavaScript("'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 52)]");

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funciones_defecto ::= NUM_ALEATORIO PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
addJavaScript("Math.random()");
RESULT = analyzerSemantico.getFunctionResult(null, ListsDefaultFunctionOperations.NUM_ALEATORIO,getToken(this.parser.cur_token));

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funciones_defecto ::= ALERT_INFO PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
if(parametro!=null){
DataValue parametroDataValue = (DataValue) parametro;
RESULT = analyzerSemantico.getFunctionResult(parametroDataValue, ListsDefaultFunctionOperations.ALERT_INFO,getToken(this.parser.cur_token));
addJavaScript("alert("+parametroDataValue.getValue()+")");
}

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funciones_defecto ::= EXIT PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = analyzerSemantico.getFunctionResult(null, ListsDefaultFunctionOperations.EXIT,getToken(this.parser.cur_token));
addJavaScript("return");

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funciones_defecto ::= REDIRECT PARENTHESIS_OPEN PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = analyzerSemantico.getFunctionResult(null, ListsDefaultFunctionOperations.REDIRECT,getToken(this.parser.cur_token));

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funciones_defecto ::= INSERT PARENTHESIS_OPEN bucle_insert PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("funciones_defecto",12, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bucle_insert ::= bucle_insert datos_insert 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_insert",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bucle_insert ::= datos_insert 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("bucle_insert",18, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // datos_insert ::= ID 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",19, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // datos_insert ::= NUM_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",19, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // datos_insert ::= NUM_DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("datos_insert",19, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencias_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencias_control ::= REPEAT PARENTHESIS_OPEN condicion_repetir PARENTHESIS_CLOSE HUNTIL PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;
		
addJavaScript("return");

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-12)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencias_control ::= WHILE PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE THENWHILE INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencias_control",13, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-9)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion_repetir ::= ID EQUAL operaciones 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("condicion_repetir",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion_repetir ::= tipos_datos ID EQUAL operaciones 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("condicion_repetir",17, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-3)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_if ::= IF PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE THEN INIT START_INIT inicio AND_INIT END else_if 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-10)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_if ::= ELSE derivar_elser_if 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_if ::= 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // derivar_elser_if ::= INIT START_INIT inicio AND_INIT END 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivar_elser_if",16, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-4)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // derivar_elser_if ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("derivar_elser_if",16, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones ::= operaciones SAME_AS operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " === " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones ::= operaciones NOT_THE_SAME operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " !== " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones ::= operaciones LESS_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " < " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones ::= operaciones LESS_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " <= " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones ::= operaciones GREATER_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " > " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones ::= operaciones GREATER_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " >= " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones ::= operaciones OR operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " || " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones ::= operaciones AND operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " && " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones ::= NOT operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = "!" + a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones ::= operaciones ADDITION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " + " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones ::= operaciones SUBTRACTION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " - " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones ::= operaciones DIVISION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " / " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones ::= operaciones MULTIPLICATION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = leftString.toString() + " * " + rightString.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones ::= PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		RESULT = "("+ a.toString() + " ) ";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-2)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones ::= TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones ::= NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones ::= NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones ::= SUBTRACTION NUM_DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT =" - "+a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones ::= SUBTRACTION NUM_INTEGER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = " - "+a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones ::= CHAR_TEXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones ::= parentesis 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operaciones ::= funciones_defecto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		RESULT = a.toString();
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("operaciones",20, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parentesis ::= ID fucion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		int funcion_idleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int funcion_idright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object funcion_id = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT = id.toString() + funcion_id.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("parentesis",21, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fucion_id ::= PARENTHESIS_OPEN vacio_interno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.peek()).value;
		
RESULT = " ) " + a.toString();

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("fucion_id",22, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // fucion_id ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("fucion_id",22, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vacio_interno ::= operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)).value;
		
RESULT = a.toString() + " ) ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_interno",23, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.elementAt(CUP$ParserScriptingToJS$top-1)), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // vacio_interno ::= PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		
RESULT = " ) ";

              CUP$ParserScriptingToJS$result = parser.getSymbolFactory().newSymbol("vacio_interno",23, ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserScriptingToJS$stack.peek()), RESULT);
            }
          return CUP$ParserScriptingToJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserScriptingToJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserScriptingToJS$do_action(
    int                        CUP$ParserScriptingToJS$act_num,
    java_cup.runtime.lr_parser CUP$ParserScriptingToJS$parser,
    java.util.Stack            CUP$ParserScriptingToJS$stack,
    int                        CUP$ParserScriptingToJS$top)
    throws java.lang.Exception
    {
              return CUP$ParserScriptingToJS$do_action_part00000000(
                               CUP$ParserScriptingToJS$act_num,
                               CUP$ParserScriptingToJS$parser,
                               CUP$ParserScriptingToJS$stack,
                               CUP$ParserScriptingToJS$top);
    }
}

}
