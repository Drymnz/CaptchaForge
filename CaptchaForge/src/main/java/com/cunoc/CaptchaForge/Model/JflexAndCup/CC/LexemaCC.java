// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package com.cunoc.CaptchaForge.Model.JflexAndCup.CC;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.StringReader;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaCC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STATE_SCRIPTING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\5\6\2\0\3\6\1\7\1\0\1\10\1\6\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\5\6\1\17\1\20"+
    "\1\21\1\0\1\6\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\33\1\42\1\43\1\44\1\45"+
    "\1\46\1\33\1\47\1\50\1\33\1\0\1\51\1\0"+
    "\1\6\1\52\1\6\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\33\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\33\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\0\1\1\1\0"+
    "\1\6\6\0\1\3\32\0\1\1\1\6\37\0\1\6"+
    "\7\0\1\6\3\0\1\6\3\0\1\6\1\0\1\6"+
    "\6\0\1\6\6\0\1\6\7\0\1\6\3\0\1\6"+
    "\3\0\1\6\1\0\1\6\6\0\1\6\u0185\0\1\1"+
    "\177\0\13\1\35\0\2\3\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\3\1\4\1\5"+
    "\1\6\1\7\16\3\3\10\1\3\1\0\1\11\2\0"+
    "\11\3\1\12\10\3\3\0\1\13\1\0\11\14\1\15"+
    "\3\14\1\16\11\3\1\17\4\3\3\0\1\14\1\20"+
    "\1\14\1\21\2\14\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\13\14\3\3\1\30\2\3\1\31\1\32\1\3"+
    "\1\33\1\3\1\34\2\3\3\0\2\14\1\35\2\14"+
    "\1\36\11\14\1\3\1\37\1\40\5\3\1\41\3\0"+
    "\1\42\1\14\1\43\1\44\1\14\1\45\4\14\1\46"+
    "\2\14\3\3\1\47\3\3\2\0\1\14\1\50\5\14"+
    "\1\51\3\3\1\52\1\3\1\53\2\0\1\54\1\55"+
    "\2\14\1\56\1\14\4\3\2\0\3\14\2\3\1\57"+
    "\1\3\2\0\2\14\1\60\1\61\1\3\1\62\2\0"+
    "\2\14\1\63\3\0\1\64\1\0\1\65\2\0\1\66"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\210"+
    "\0\u01dc\0\210\0\210\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330"+
    "\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550"+
    "\0\u0594\0\210\0\u05d8\0\u061c\0\u0660\0\u0154\0\210\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u0198\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0"+
    "\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\210\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0cc0\0\u0f24\0\u0f68\0\u0fac\0\u0198\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u0198"+
    "\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430"+
    "\0\u0cc0\0\u1474\0\u0cc0\0\u14b8\0\u14fc\0\u0cc0\0\u0cc0\0\u0cc0"+
    "\0\u0cc0\0\u0cc0\0\u0cc0\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650"+
    "\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u0198\0\u18f8\0\u193c\0\u0198\0\u0198\0\u1980\0\u0198"+
    "\0\u19c4\0\u0198\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u0cc0\0\u1be4\0\u1c28\0\u0cc0\0\u1c6c\0\u1cb0\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u0198"+
    "\0\u0198\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u0198\0\u2068"+
    "\0\u20ac\0\u20f0\0\u0cc0\0\u2134\0\u0cc0\0\u0cc0\0\u2178\0\u0cc0"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u0cc0\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u0198\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530"+
    "\0\u2574\0\u0cc0\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u0cc0"+
    "\0\u270c\0\u2750\0\u2794\0\u0198\0\u27d8\0\u0198\0\u281c\0\u2860"+
    "\0\u0cc0\0\u0cc0\0\u28a4\0\u28e8\0\u0cc0\0\u292c\0\u2970\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4"+
    "\0\u2c18\0\u0198\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u0cc0"+
    "\0\u0198\0\u2db0\0\u0198\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u0198"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\210\0\u2fd0\0\210\0\u3014\0\u3058"+
    "\0\210\0\210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\2\7\1\10\6\7\1\11"+
    "\1\12\1\13\2\7\1\14\24\7\1\3\1\7\1\15"+
    "\1\16\1\17\2\7\1\20\1\7\1\21\1\22\3\7"+
    "\1\23\1\24\1\7\1\25\1\26\1\27\1\7\1\30"+
    "\1\31\3\7\1\3\4\32\1\33\12\32\1\34\64\32"+
    "\105\0\3\4\104\0\1\35\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\31\7\1\0\5\36\1\37\43\36"+
    "\1\40\32\36\4\0\1\7\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\31\7\5\0\1\41\103\0\1\7"+
    "\1\0\2\7\1\0\6\7\3\0\27\7\1\0\1\42"+
    "\30\7\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\13\7\1\43\15\7\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\1\7\1\44"+
    "\27\7\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\1\45\12\7\1\46\2\7\1\47\12\7"+
    "\5\0\1\7\1\0\2\7\1\0\6\7\3\0\27\7"+
    "\1\0\16\7\1\50\12\7\5\0\1\7\1\0\2\7"+
    "\1\0\6\7\3\0\27\7\1\0\5\7\1\51\12\7"+
    "\1\52\10\7\5\0\1\7\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\4\7\1\53\24\7\5\0\1\7"+
    "\1\0\2\7\1\0\6\7\3\0\27\7\1\0\1\7"+
    "\1\54\27\7\5\0\1\7\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\15\7\1\55\13\7\5\0\1\7"+
    "\1\0\2\7\1\0\6\7\3\0\27\7\1\0\16\7"+
    "\1\56\12\7\5\0\1\7\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\20\7\1\57\10\7\5\0\1\7"+
    "\1\0\2\7\1\0\6\7\3\0\27\7\1\0\5\7"+
    "\1\60\21\7\1\61\1\7\5\0\1\7\1\0\2\7"+
    "\1\0\6\7\3\0\27\7\1\0\5\7\1\62\23\7"+
    "\5\0\1\7\1\0\2\7\1\0\6\7\3\0\27\7"+
    "\1\0\11\7\1\63\17\7\5\0\1\64\100\0\3\65"+
    "\1\41\3\0\1\66\73\0\2\64\1\67\1\64\1\35"+
    "\1\64\2\35\1\64\6\35\3\64\27\35\1\64\31\35"+
    "\1\64\2\36\2\0\77\36\10\0\1\70\100\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\1\71\1\72\1\73"+
    "\1\74\1\71\1\75\1\71\1\76\1\77\2\71\1\100"+
    "\2\71\1\101\1\102\1\71\1\103\1\104\4\71\1\0"+
    "\1\7\20\71\1\105\7\71\5\0\1\7\1\0\2\7"+
    "\1\0\6\7\3\0\27\7\1\0\22\7\1\106\6\7"+
    "\5\0\1\7\1\0\2\7\1\0\6\7\3\0\27\7"+
    "\1\0\3\7\1\107\25\7\5\0\1\7\1\0\2\7"+
    "\1\0\6\71\3\0\21\71\1\105\5\71\1\0\1\7"+
    "\20\71\1\105\7\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\1\7\1\110\27\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\13\7\1\111\15\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\15\7\1\112\13\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\11\7\1\113\17\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\5\7\1\114\23\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\14\7\1\115\14\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\3\7\1\116\25\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\25\7\1\117\3\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\3\7\1\120\25\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\26\7\1\121\2\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\17\7\1\122\11\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\20\7\1\123\10\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\4\7\1\124\24\7\1\0"+
    "\2\64\1\67\101\64\1\0\3\65\4\0\1\66\74\0"+
    "\3\66\20\0\1\125\30\0\1\126\35\0\1\127\100\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\27\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\16\71\1\130\1\71\1\131\2\71\1\132\3\71"+
    "\1\0\1\7\30\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\71\3\0\2\71\1\133\24\71\1\0\1\7\30\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\10\71"+
    "\1\134\16\71\1\0\1\7\30\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\71\3\0\16\71\1\135\10\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\3\0\4\71\1\144"+
    "\22\71\1\0\1\7\30\71\5\0\1\7\1\0\2\7"+
    "\1\0\6\71\3\0\14\71\1\145\1\146\11\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\10\71\1\147\16\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\17\71\1\150"+
    "\7\71\1\0\1\7\30\71\5\0\1\7\1\0\2\7"+
    "\1\0\6\71\3\0\2\71\1\151\1\71\1\152\12\71"+
    "\1\153\7\71\1\0\1\7\2\71\1\154\25\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\4\71\1\155"+
    "\3\71\1\156\16\71\1\0\1\7\30\71\5\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\2\71\1\154\24\71"+
    "\1\0\1\7\2\71\1\154\25\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\12\7\1\157"+
    "\16\7\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\21\7\1\160\7\7\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\16\7\1\161"+
    "\2\7\1\162\7\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\22\7\1\163\6\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\7\7\1\164\21\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\6\7\1\165\22\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\5\7\1\166\23\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\13\7\1\167\15\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\21\7\1\170\7\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\22\7\1\171\6\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\5\7\1\172\23\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\21\7\1\173\7\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\22\7\1\174\6\7\53\0\1\175\103\0\1\176\31\0"+
    "\7\127\1\177\74\127\4\0\1\7\1\0\2\7\1\0"+
    "\6\71\3\0\3\71\1\200\23\71\1\0\1\7\30\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\22\71"+
    "\1\201\4\71\1\0\1\7\30\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\71\3\0\24\71\1\202\2\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\20\71\1\203\6\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\1\204\26\71"+
    "\1\0\1\7\30\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\71\3\0\6\71\1\205\20\71\1\0\1\7\30\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\17\71"+
    "\1\206\7\71\1\0\1\7\30\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\71\3\0\15\71\1\207\11\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\22\71\1\210\4\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\20\71\1\211"+
    "\6\71\1\0\1\7\17\71\1\212\10\71\5\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\13\71\1\213\13\71"+
    "\1\0\1\7\30\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\71\3\0\1\214\26\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\20\71\1\212"+
    "\6\71\1\0\1\7\17\71\1\212\10\71\5\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\25\71\1\215\1\71"+
    "\1\0\1\7\30\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\71\3\0\22\71\1\216\4\71\1\0\1\7\30\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\7\3\0\27\7"+
    "\1\0\7\7\1\217\21\7\5\0\1\7\1\0\2\7"+
    "\1\0\6\7\3\0\27\7\1\0\21\7\1\220\7\7"+
    "\5\0\1\7\1\0\2\7\1\0\6\7\3\0\27\7"+
    "\1\0\20\7\1\221\10\7\5\0\1\7\1\0\1\7"+
    "\1\222\1\0\6\7\3\0\27\7\1\0\31\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\10\7\1\223\20\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\11\7\1\224\17\7\5\0"+
    "\1\7\1\0\1\7\1\225\1\0\6\7\3\0\27\7"+
    "\1\0\31\7\5\0\1\7\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\11\7\1\226\17\7\5\0\1\7"+
    "\1\0\2\7\1\0\6\7\3\0\27\7\1\0\10\7"+
    "\1\227\20\7\44\0\1\230\27\0\1\231\53\0\1\231"+
    "\27\0\1\231\10\0\7\127\1\232\74\127\4\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\26\71\1\233\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\22\71\1\234\4\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\14\71\1\235"+
    "\12\71\1\0\1\7\30\71\5\0\1\7\1\0\2\7"+
    "\1\0\6\71\3\0\3\71\1\236\23\71\1\0\1\7"+
    "\30\71\5\0\1\7\1\0\2\7\1\0\6\71\3\0"+
    "\23\71\1\237\3\71\1\0\1\7\30\71\5\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\12\71\1\240\14\71"+
    "\1\0\1\7\30\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\71\3\0\10\71\1\241\16\71\1\0\1\7\30\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\10\71"+
    "\1\242\16\71\1\0\1\7\10\71\1\243\17\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\10\71\1\243"+
    "\16\71\1\0\1\7\10\71\1\243\17\71\5\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\4\71\1\244\22\71"+
    "\1\0\1\7\30\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\71\3\0\14\71\1\245\12\71\1\0\1\7\30\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\22\71"+
    "\1\246\4\71\1\0\1\7\30\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\71\3\0\13\71\1\247\13\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\20\7\1\250\10\7\5\0\1\7"+
    "\1\0\2\7\1\0\6\7\3\0\27\7\1\0\6\7"+
    "\1\251\12\7\1\252\7\7\5\0\1\7\1\0\2\7"+
    "\1\0\6\7\3\0\27\7\1\0\22\7\1\253\6\7"+
    "\5\0\1\7\1\0\2\7\1\0\6\7\3\0\27\7"+
    "\1\0\3\7\1\254\25\7\5\0\1\7\1\0\2\7"+
    "\1\0\6\7\3\0\27\7\1\0\1\7\1\255\27\7"+
    "\5\0\1\7\1\0\2\7\1\0\6\7\3\0\27\7"+
    "\1\0\16\7\1\256\12\7\25\0\1\257\30\0\1\260"+
    "\52\0\1\260\30\0\1\260\26\0\7\127\1\232\11\127"+
    "\1\67\62\127\4\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\16\71\1\261\10\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\22\71\1\262"+
    "\4\71\1\0\1\7\30\71\5\0\1\7\1\0\2\7"+
    "\1\0\6\71\3\0\16\71\1\263\10\71\1\0\1\7"+
    "\30\71\5\0\1\7\1\0\2\7\1\0\6\71\3\0"+
    "\17\71\1\264\7\71\1\0\1\7\16\71\1\265\11\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\17\71"+
    "\1\265\7\71\1\0\1\7\16\71\1\265\11\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\2\71\1\266"+
    "\24\71\1\0\1\7\30\71\5\0\1\7\1\0\2\7"+
    "\1\0\6\71\3\0\1\267\26\71\1\0\1\7\30\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\4\71"+
    "\1\270\22\71\1\0\1\7\30\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\16\7\1\271"+
    "\12\7\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\1\7\1\272\27\7\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\11\7\1\273"+
    "\17\7\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\12\7\1\274\16\7\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\13\7\1\275"+
    "\15\7\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\15\7\1\276\13\7\43\0\1\277\27\0"+
    "\1\300\53\0\1\300\27\0\1\300\15\0\1\7\1\0"+
    "\2\7\1\0\6\71\3\0\15\71\1\301\11\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\15\71\1\302\11\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\22\71\1\303"+
    "\4\71\1\0\1\7\21\71\1\304\6\71\5\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\22\71\1\304\4\71"+
    "\1\0\1\7\21\71\1\304\6\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\71\3\0\22\71\1\305\4\71\1\0"+
    "\1\7\30\71\5\0\1\7\1\0\2\7\1\0\6\71"+
    "\3\0\20\71\1\306\6\71\1\0\1\7\30\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\23\7\1\307\5\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\14\7\1\310\14\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\30\7\1\311\5\0\1\7\1\0\2\7\1\0\6\7"+
    "\3\0\27\7\1\0\11\7\1\312\17\7\33\0\1\313"+
    "\30\0\1\314\52\0\1\314\30\0\1\314\24\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\10\71\1\315\16\71"+
    "\1\0\1\7\10\71\1\316\17\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\71\3\0\10\71\1\316\16\71\1\0"+
    "\1\7\10\71\1\316\17\71\5\0\1\7\1\0\2\7"+
    "\1\0\6\71\3\0\4\71\1\317\22\71\1\0\1\7"+
    "\30\71\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\15\7\1\320\13\7\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\11\7\1\321"+
    "\17\7\5\0\1\7\1\0\2\7\1\0\6\7\3\0"+
    "\27\7\1\0\5\7\1\322\23\7\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\7\7\1\323"+
    "\21\7\42\0\1\324\27\0\1\325\53\0\1\325\27\0"+
    "\1\325\16\0\1\7\1\0\2\7\1\0\6\71\3\0"+
    "\15\71\1\326\11\71\1\0\1\7\14\71\1\327\13\71"+
    "\5\0\1\7\1\0\2\7\1\0\6\71\3\0\15\71"+
    "\1\327\11\71\1\0\1\7\14\71\1\327\13\71\5\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\1\330\26\71"+
    "\1\0\1\7\30\71\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\4\7\1\331\24\7\5\0"+
    "\1\7\1\0\2\7\1\0\6\7\3\0\27\7\1\0"+
    "\13\7\1\332\15\7\5\0\1\7\1\0\2\7\1\0"+
    "\6\7\3\0\27\7\1\0\15\7\1\333\13\7\45\0"+
    "\1\334\27\0\1\335\53\0\1\335\27\0\1\335\13\0"+
    "\1\7\1\0\2\7\1\0\6\71\3\0\6\71\1\336"+
    "\20\71\1\0\1\7\6\71\1\337\21\71\5\0\1\7"+
    "\1\0\2\7\1\0\6\71\3\0\6\71\1\337\20\71"+
    "\1\0\1\7\6\71\1\337\21\71\5\0\1\7\1\0"+
    "\2\7\1\0\6\7\3\0\27\7\1\0\27\7\1\340"+
    "\1\7\33\0\1\341\30\0\1\342\52\0\1\342\30\0"+
    "\1\342\21\0\3\343\1\7\1\0\2\7\1\0\6\71"+
    "\2\0\1\344\27\71\1\0\1\7\30\71\2\0\3\345"+
    "\1\7\1\0\2\7\1\0\6\71\2\0\1\346\27\71"+
    "\1\0\1\7\30\71\40\0\1\347\27\0\1\350\53\0"+
    "\1\350\27\0\1\350\15\0\3\343\15\0\1\344\63\0"+
    "\3\345\15\0\1\346\112\0\1\351\30\0\1\352\52\0"+
    "\1\352\30\0\1\352\22\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12444];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\2\11\16\1\1\11"+
    "\3\1\1\0\1\11\2\0\22\1\3\0\1\11\1\0"+
    "\34\1\3\0\45\1\3\0\30\1\3\0\24\1\2\0"+
    "\16\1\2\0\12\1\2\0\7\1\2\0\6\1\2\0"+
    "\3\1\3\0\1\11\1\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/

    private String space = "";
    private String stringScripting = "";
    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
    private ArrayList<String> listScripting = new ArrayList();

    public LexemaCC(String in) {
        this.zzReader = new StringReader(in);
    }
      
    private void print(String token) {
        //System.out.println(token+ " < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ""));
    }

    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    public String getSpace(){
        return this.space;
    }

    public String getStringScripting(){
        return this.stringScripting;
    }

    public void setStringScripting(String newStringScripting){
        this.stringScripting = newStringScripting;
    }

        public String convertToDesiredFormat(String text) {
        text = text.replaceAll("\\s+", "");
        StringBuilder result = new StringBuilder();

        // Iterar sobre cada carácter de la cadena
        for (int i = 0; i < text.length(); i++) {
            char currentChar = text.charAt(i);

            // Verificar si es el primer carácter
            if (i == 0) {
                result.append(Character.toUpperCase(currentChar)); // Mantener en mayúscula
            } else if (currentChar == '_') {
                result.append(currentChar); // Mantener el guion bajo
            } else {
                result.append(Character.toUpperCase(currentChar)); // Convertir a mayúscula
            }
        }

        return result.toString();
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaCC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(SymCC.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 56: break;
          case 2:
            { space = yytext();
            }
          // fall through
          case 57: break;
          case 3:
            { print("CONTENIDO"); return new Symbol(SymCC.CONTENIDO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 58: break;
          case 4:
            { print("/"); return new Symbol(SymCC.BAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 59: break;
          case 5:
            { print("<" ); return new Symbol(SymCC.OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 60: break;
          case 6:
            { print("="); return new Symbol(SymCC.EQUAL,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 61: break;
          case 7:
            { print(">" ); return new Symbol(SymCC.CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 62: break;
          case 8:
            { stringScripting += yytext();
            }
          // fall through
          case 63: break;
          case 9:
            { print("STRING"); return new Symbol(SymCC.STRING_TOKEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 64: break;
          case 10:
            { print("id"); return new         Symbol(SymCC.ID,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 65: break;
          case 11:
            { /* print(); */
            }
          // fall through
          case 66: break;
          case 12:
            { String lowercaseText = convertToDesiredFormat(yytext());
                                     switch(lowercaseText) {
                                        case "C_CC":print("C_CC"); return new Symbol(SymCC.C_CC,yyline,yycolumn, (yytext()));
                                        case "C_HEAD":print("C_HEAD"); return new Symbol(SymCC.C_HEAD,yyline,yycolumn, (yytext()));
                                        case "C_TITLE":print("C_TITLE"); return new Symbol(SymCC.C_TITLE,yyline,yycolumn, (yytext()));
                                        case "C_LINK":print("C_LINK"); return new Symbol(SymCC.C_LINK,yyline,yycolumn, (yytext()));
                                        case "C_BODY":print("C_BODY"); return new Symbol(SymCC.C_BODY,yyline,yycolumn, (yytext()));
                                        case "C_SPAM":print("C_SPAM"); return new Symbol(SymCC.C_SPAM,yyline,yycolumn, (yytext()));
                                        case "C_INPUT":print("C_INPUT"); return new Symbol(SymCC.C_INPUT,yyline,yycolumn, (yytext()));
                                        case "C_TEXTAREA":print("C_TEXTAREA"); return new Symbol(SymCC.C_TEXTAREA,yyline,yycolumn, (yytext()));
                                        case "C_SELECT":print("C_SELECT"); return new Symbol(SymCC.C_SELECT,yyline,yycolumn, (yytext()));
                                        case "C_OPTION":print("C_OPTION"); return new Symbol(SymCC.C_OPTION,yyline,yycolumn, (yytext()));
                                        case "C_DIV":print("C_DIV"); return new Symbol(SymCC.C_DIV,yyline,yycolumn, (yytext()));
                                        case "C_IMG":print("C_IMG"); return new Symbol(SymCC.C_IMG,yyline,yycolumn, (yytext()));
                                        case "C_BR":print("C_BR"); return new Symbol(SymCC.C_BR,yyline,yycolumn, (yytext()));
                                        case "C_BUTTON":print("C_BUTTON"); return new Symbol(SymCC.C_BUTTON,yyline,yycolumn, (yytext()));
                                        case "C_H1":print("C_H1"); return new Symbol(SymCC.C_H1,yyline,yycolumn, (yytext()));
                                        case "C_H2":print("C_H2"); return new Symbol(SymCC.C_H2,yyline,yycolumn, (yytext()));
                                        case "C_H3":print("C_H3"); return new Symbol(SymCC.C_H3,yyline,yycolumn, (yytext()));
                                        case "C_H4":print("C_H4"); return new Symbol(SymCC.C_H4,yyline,yycolumn, (yytext()));
                                        case "C_H5":print("C_H5"); return new Symbol(SymCC.C_H5,yyline,yycolumn, (yytext()));
                                        case "C_H6":print("C_H6"); return new Symbol(SymCC.C_H6,yyline,yycolumn, (yytext()));
                                        case "C_P":print("C_P"); return new Symbol(SymCC.C_P,yyline,yycolumn, (yytext()));
                                        case "C_FORM":print("C_FORM"); return new Symbol(SymCC.C_FORM,yyline,yycolumn, (yytext()));
                                        default:print("ERROR");addError();break;
                                     }
            }
          // fall through
          case 67: break;
          case 13:
            { print("C_P"); return new Symbol(SymCC.C_P,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 68: break;
          case 14:
            { print("alt"); return new        Symbol(SymCC.ALT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 69: break;
          case 15:
            { print("src"); return new        Symbol(SymCC.SRC,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 70: break;
          case 16:
            { print("C_BR"); return new Symbol(SymCC.C_BR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 71: break;
          case 17:
            { print("C_CC"); return new Symbol(SymCC.C_CC,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 72: break;
          case 18:
            { print("C_H1"); return new Symbol(SymCC.C_H1,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 73: break;
          case 19:
            { print("C_H2"); return new Symbol(SymCC.C_H2,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 74: break;
          case 20:
            { print("C_H3"); return new Symbol(SymCC.C_H3,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 75: break;
          case 21:
            { print("C_H4"); return new Symbol(SymCC.C_H4,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 76: break;
          case 22:
            { print("C_H5"); return new Symbol(SymCC.C_H5,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 77: break;
          case 23:
            { print("C_H6"); return new Symbol(SymCC.C_H6,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 78: break;
          case 24:
            { print("cols"); return new       Symbol(SymCC.COLS,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 79: break;
          case 25:
            { print("href"); return new       Symbol(SymCC.HREF,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 80: break;
          case 26:
            { print("name"); return new       Symbol(SymCC.NAME,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 81: break;
          case 27:
            { print("rows"); return new       Symbol(SymCC.ROWS,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 82: break;
          case 28:
            { print("type"); return new       Symbol(SymCC.TYPE,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 83: break;
          case 29:
            { print("C_DIV"); return new Symbol(SymCC.C_DIV,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 84: break;
          case 30:
            { print("C_IMG"); return new Symbol(SymCC.C_IMG,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 85: break;
          case 31:
            { print("class"); return new      Symbol(SymCC.CLASS,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 86: break;
          case 32:
            { print("color"); return new      Symbol(SymCC.COLOR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 87: break;
          case 33:
            { print("width"); return new      Symbol(SymCC.WIDTH,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 88: break;
          case 34:
            { print("C_BODY"); return new Symbol(SymCC.C_BODY,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 89: break;
          case 35:
            { print("C_FORM"); return new Symbol(SymCC.C_FORM,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 90: break;
          case 36:
            { print("C_HEAD"); return new Symbol(SymCC.C_HEAD,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 91: break;
          case 37:
            { print("C_LINK"); return new Symbol(SymCC.C_LINK,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 92: break;
          case 38:
            { print("C_SPAM"); return new Symbol(SymCC.C_SPAM,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 93: break;
          case 39:
            { print("height"); return new     Symbol(SymCC.HEIGHT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 94: break;
          case 40:
            { print("C_INPUT"); return new Symbol(SymCC.C_INPUT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 95: break;
          case 41:
            { print("C_TITLE"); return new Symbol(SymCC.C_TITLE,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 96: break;
          case 42:
            { print("onclick"); return new    Symbol(SymCC.ONCLICK,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 97: break;
          case 43:
            { print("version"); return new Symbol(SymCC.VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 44:
            { print("C_BUTTON"); return new Symbol(SymCC.C_BUTTON,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 99: break;
          case 45:
            { print("C_OPTION"); return new Symbol(SymCC.C_OPTION,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 100: break;
          case 46:
            { print("C_SELECT"); return new Symbol(SymCC.C_SELECT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 101: break;
          case 47:
            { print("font"); return new       Symbol(SymCC.FONT_SIZE,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 102: break;
          case 48:
            { print("C_TEXTAREA"); return new Symbol(SymCC.C_TEXTAREA,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 103: break;
          case 49:
            { print("background"); return new Symbol(SymCC.BACKGROUND,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 104: break;
          case 50:
            { print("text"); return new       Symbol(SymCC.FONT_ALIG,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 105: break;
          case 51:
            { print("font"); return new       Symbol(SymCC.FONT_FAMILY,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 106: break;
          case 52:
            { print("\"C_SCRIPTING\"{espacio}?\">\""); 
                        yybegin(STATE_SCRIPTING);
                        return new Symbol(SymCC.C_SCRIPTING,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 107: break;
          case 53:
            { String lowercaseText = convertToDesiredFormat(yytext());
                                switch(lowercaseText) {
                                    case "C_SCRIPTING>":
                                        print("[cC]\"_\"[sS][cC][rR][Ii][pP][tT][Ii][nN][Gg]{espacio}?\">\""); 
                                        yybegin(STATE_SCRIPTING);
                                        return new Symbol(SymCC.C_SCRIPTING,yyline,yycolumn, (yytext()));
                                    default:print("ERROR");addError();break;
                                }
            }
          // fall through
          case 108: break;
          case 54:
            { print("\"<\"{espacio}?\"/\"{espacio}?\"C_SCRIPTING\""); 
                        yybegin(YYINITIAL);
                        listScripting.add(stringScripting);
                        return new Symbol(SymCC.OUTPUT_C_SCRIPTING,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 109: break;
          case 55:
            { String lowercaseText = convertToDesiredFormat(yytext());
                                     switch(lowercaseText) {
                                        case "</C_SCRIPTING":
                                            print("\"<\"{espacio}?\"/\"{espacio}?[cC]\"_\"[sS][cC][rR][Ii][pP][tT][Ii][nN][Gg]"); 
                                            yybegin(YYINITIAL);
                                            listScripting.add(stringScripting);
                                            return new Symbol(SymCC.OUTPUT_C_SCRIPTING,yyline,yycolumn, (yytext()));
                                        default:
                                            stringScripting += yytext();
                                        break;
                                     }
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
