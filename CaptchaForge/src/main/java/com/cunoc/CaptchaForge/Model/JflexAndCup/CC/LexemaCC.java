// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package com.cunoc.CaptchaForge.Model.JflexAndCup.CC;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.StringReader;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaCC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\11\0\1\6\1\7\1\0\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\3\0\1\17\1\0\1\20"+
    "\1\21\1\22\2\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\30\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\30\1\42\1\43\1\44\1\45"+
    "\1\46\1\30\1\47\1\50\1\30\1\51\1\52\1\53"+
    "\1\0\1\54\1\0\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\30\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\30\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\1\1\106"+
    "\7\0\1\3\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\3\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0\u0100\107";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\15\11\1\14\1\15"+
    "\2\0\1\16\2\0\10\11\1\17\10\11\1\2\1\0"+
    "\7\11\1\20\2\11\1\21\11\11\1\22\4\11\1\0"+
    "\1\11\1\23\1\11\1\24\1\11\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\14\11\1\33\2\11\1\34\1\35"+
    "\1\11\1\36\1\11\1\37\2\11\1\0\2\11\1\40"+
    "\1\11\1\41\10\11\1\42\1\43\1\0\2\11\1\0"+
    "\1\11\1\44\1\0\1\45\1\11\1\46\1\11\1\47"+
    "\2\11\1\50\3\11\2\0\1\51\1\11\1\0\2\11"+
    "\1\52\3\11\1\53\1\11\2\0\1\54\1\0\1\55"+
    "\1\56\1\57\1\60\2\11\3\0\2\11\1\0\1\61"+
    "\1\0\1\62\1\63\1\0\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\110\0\110\0\110"+
    "\0\u0168\0\110\0\110\0\u01b0\0\u01f8\0\110\0\110\0\u0240"+
    "\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480"+
    "\0\u04c8\0\u0510\0\u0558\0\u05a0\0\110\0\110\0\u05e8\0\u0120"+
    "\0\110\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0"+
    "\0\u0828\0\u0870\0\u08b8\0\u01b0\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\110\0\u0b40\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u01b0\0\u0d80\0\u0dc8"+
    "\0\u01b0\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u01b0\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8"+
    "\0\u1200\0\u01b0\0\u1248\0\u01b0\0\u1290\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u01b0"+
    "\0\u1638\0\u1680\0\u01b0\0\u01b0\0\u16c8\0\u01b0\0\u1710\0\u01b0"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u01b0\0\u18c0\0\u01b0"+
    "\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00"+
    "\0\u01b0\0\u01b0\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u01b0"+
    "\0\u1cb0\0\u01b0\0\u1cf8\0\u01b0\0\u1d40\0\u01b0\0\u1d88\0\u1dd0"+
    "\0\u01b0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u01b0\0\u1f80"+
    "\0\u1fc8\0\u2010\0\u2058\0\u01b0\0\u20a0\0\u20e8\0\u2130\0\u01b0"+
    "\0\u2178\0\u21c0\0\u2208\0\u01b0\0\u2250\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448"+
    "\0\u2490\0\110\0\u24d8\0\u01b0\0\u01b0\0\u2520\0\110\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\6\2"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\23\14\1\16"+
    "\1\2\1\17\1\14\1\20\1\21\1\22\2\14\1\23"+
    "\1\14\1\24\1\25\3\14\1\26\1\27\1\14\1\30"+
    "\1\31\1\32\1\14\1\33\1\34\3\14\1\35\1\36"+
    "\112\0\3\3\110\0\1\37\103\0\5\40\1\41\44\40"+
    "\1\42\35\40\4\0\1\43\126\0\26\14\3\0\31\14"+
    "\26\0\26\14\3\0\1\44\30\14\26\0\26\14\3\0"+
    "\13\14\1\45\15\14\26\0\26\14\3\0\1\14\1\46"+
    "\27\14\26\0\26\14\3\0\13\14\1\47\2\14\1\50"+
    "\12\14\26\0\26\14\3\0\16\14\1\51\12\14\26\0"+
    "\26\14\3\0\5\14\1\52\12\14\1\53\10\14\26\0"+
    "\26\14\3\0\4\14\1\54\24\14\26\0\26\14\3\0"+
    "\1\14\1\55\27\14\26\0\26\14\3\0\15\14\1\56"+
    "\13\14\26\0\26\14\3\0\16\14\1\57\12\14\26\0"+
    "\26\14\3\0\20\14\1\60\10\14\26\0\26\14\3\0"+
    "\5\14\1\61\21\14\1\62\1\14\26\0\26\14\3\0"+
    "\5\14\1\63\23\14\26\0\26\14\3\0\11\14\1\64"+
    "\17\14\3\0\2\37\1\65\105\37\2\40\2\0\103\40"+
    "\10\0\1\66\123\0\1\14\1\67\1\70\1\71\3\14"+
    "\1\72\1\73\1\14\1\74\2\14\1\75\1\76\1\14"+
    "\1\77\1\100\4\14\3\0\31\14\26\0\26\14\3\0"+
    "\22\14\1\101\6\14\26\0\26\14\3\0\3\14\1\102"+
    "\25\14\26\0\26\14\3\0\1\14\1\103\27\14\26\0"+
    "\26\14\3\0\13\14\1\104\15\14\26\0\26\14\3\0"+
    "\15\14\1\105\13\14\26\0\26\14\3\0\11\14\1\106"+
    "\17\14\26\0\26\14\3\0\5\14\1\107\23\14\26\0"+
    "\26\14\3\0\14\14\1\110\14\14\26\0\26\14\3\0"+
    "\3\14\1\111\25\14\26\0\26\14\3\0\25\14\1\112"+
    "\3\14\26\0\26\14\3\0\3\14\1\113\25\14\26\0"+
    "\26\14\3\0\26\14\1\114\2\14\26\0\26\14\3\0"+
    "\17\14\1\115\11\14\26\0\26\14\3\0\20\14\1\116"+
    "\10\14\26\0\26\14\3\0\4\14\1\117\24\14\12\0"+
    "\1\120\123\0\15\14\1\121\1\14\1\122\2\14\1\123"+
    "\3\14\3\0\31\14\26\0\2\14\1\124\23\14\3\0"+
    "\31\14\26\0\10\14\1\125\15\14\3\0\31\14\14\0"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\4\0\4\14"+
    "\1\134\21\14\3\0\31\14\26\0\13\14\1\135\1\136"+
    "\11\14\3\0\31\14\26\0\10\14\1\137\15\14\3\0"+
    "\31\14\26\0\16\14\1\140\7\14\3\0\31\14\26\0"+
    "\4\14\1\141\11\14\1\142\7\14\3\0\31\14\26\0"+
    "\4\14\1\143\3\14\1\144\15\14\3\0\31\14\26\0"+
    "\26\14\3\0\12\14\1\145\16\14\26\0\26\14\3\0"+
    "\21\14\1\146\7\14\26\0\26\14\3\0\16\14\1\147"+
    "\2\14\1\150\7\14\26\0\26\14\3\0\22\14\1\151"+
    "\6\14\26\0\26\14\3\0\7\14\1\152\21\14\26\0"+
    "\26\14\3\0\6\14\1\153\22\14\26\0\26\14\3\0"+
    "\5\14\1\154\23\14\26\0\26\14\3\0\13\14\1\155"+
    "\15\14\26\0\26\14\3\0\21\14\1\156\7\14\26\0"+
    "\26\14\3\0\22\14\1\157\6\14\26\0\26\14\3\0"+
    "\5\14\1\160\23\14\26\0\26\14\3\0\21\14\1\161"+
    "\7\14\26\0\26\14\3\0\22\14\1\162\6\14\3\0"+
    "\7\120\1\163\100\120\23\0\3\14\1\164\22\14\3\0"+
    "\31\14\26\0\21\14\1\165\4\14\3\0\31\14\26\0"+
    "\23\14\1\166\2\14\3\0\31\14\26\0\1\167\25\14"+
    "\3\0\31\14\26\0\6\14\1\170\17\14\3\0\31\14"+
    "\26\0\16\14\1\171\7\14\3\0\31\14\26\0\14\14"+
    "\1\172\11\14\3\0\31\14\26\0\21\14\1\173\4\14"+
    "\3\0\31\14\26\0\12\14\1\174\13\14\3\0\31\14"+
    "\26\0\1\175\25\14\3\0\31\14\26\0\24\14\1\176"+
    "\1\14\3\0\31\14\26\0\21\14\1\177\4\14\3\0"+
    "\31\14\26\0\26\14\3\0\7\14\1\200\21\14\26\0"+
    "\26\14\3\0\21\14\1\201\7\14\26\0\26\14\3\0"+
    "\20\14\1\202\10\14\12\0\1\203\13\0\26\14\3\0"+
    "\31\14\26\0\26\14\3\0\10\14\1\204\20\14\26\0"+
    "\26\14\3\0\11\14\1\205\17\14\12\0\1\206\13\0"+
    "\26\14\3\0\31\14\26\0\26\14\3\0\11\14\1\207"+
    "\17\14\26\0\26\14\3\0\10\14\1\210\20\14\3\0"+
    "\7\120\1\211\100\120\23\0\25\14\1\212\3\0\31\14"+
    "\26\0\21\14\1\213\4\14\3\0\31\14\26\0\3\14"+
    "\1\214\22\14\3\0\31\14\26\0\22\14\1\215\3\14"+
    "\3\0\31\14\26\0\11\14\1\216\14\14\3\0\31\14"+
    "\26\0\10\14\1\217\15\14\3\0\31\14\26\0\4\14"+
    "\1\220\21\14\3\0\31\14\26\0\13\14\1\221\12\14"+
    "\3\0\31\14\26\0\21\14\1\222\4\14\3\0\31\14"+
    "\26\0\12\14\1\223\13\14\3\0\31\14\26\0\26\14"+
    "\3\0\20\14\1\224\10\14\65\0\1\225\12\0\1\226"+
    "\35\0\26\14\3\0\22\14\1\227\6\14\26\0\26\14"+
    "\3\0\3\14\1\230\25\14\60\0\1\231\55\0\26\14"+
    "\3\0\16\14\1\232\12\14\3\0\7\120\1\211\12\120"+
    "\1\65\65\120\23\0\15\14\1\233\10\14\3\0\31\14"+
    "\26\0\21\14\1\234\4\14\3\0\31\14\26\0\15\14"+
    "\1\235\10\14\3\0\31\14\26\0\2\14\1\236\23\14"+
    "\3\0\31\14\26\0\1\237\25\14\3\0\31\14\26\0"+
    "\4\14\1\240\21\14\3\0\31\14\26\0\26\14\3\0"+
    "\16\14\1\241\12\14\60\0\1\242\117\0\1\243\45\0"+
    "\26\14\3\0\12\14\1\244\16\14\72\0\1\245\43\0"+
    "\26\14\3\0\15\14\1\246\13\14\26\0\14\14\1\247"+
    "\11\14\3\0\31\14\26\0\14\14\1\250\11\14\3\0"+
    "\31\14\26\0\21\14\1\251\4\14\3\0\31\14\26\0"+
    "\17\14\1\252\6\14\3\0\31\14\26\0\26\14\3\0"+
    "\23\14\1\253\5\14\73\0\1\254\123\0\1\255\70\0"+
    "\1\256\45\0\4\14\1\257\21\14\3\0\31\14\26\0"+
    "\26\14\3\0\15\14\1\260\13\14\70\0\1\261\103\0"+
    "\1\262\111\0\1\263\47\0\1\264\25\14\3\0\31\14"+
    "\26\0\26\14\3\0\4\14\1\265\24\14\72\0\1\266"+
    "\111\0\1\267\121\0\1\270\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9576];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\1\1\2\11\2\1\2\11"+
    "\15\1\2\11\2\0\1\11\2\0\21\1\1\11\1\0"+
    "\31\1\1\0\5\1\6\11\27\1\1\0\17\1\1\0"+
    "\2\1\1\0\2\1\1\0\13\1\2\0\2\1\1\0"+
    "\10\1\2\0\1\1\1\0\6\1\3\0\2\1\1\0"+
    "\1\11\1\0\2\1\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

     public LexemaCC(String in) {
    this.zzReader = new StringReader(in);
    }
    /*START-CODE*/
    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
  
    private void print(String token) {
        System.out.println(token+ " < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ""));
    }
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaCC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(SymCC.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 54: break;
          case 2:
            { /* print(); */
            }
          // fall through
          case 55: break;
          case 3:
            { print(","); return new Symbol(SymCC.COMA,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 56: break;
          case 4:
            { print("/"); return new Symbol(SymCC.BAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 57: break;
          case 5:
            { print(":"); return new Symbol(SymCC.COLNO,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 58: break;
          case 6:
            { print("<" ); return new Symbol(SymCC.OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 59: break;
          case 7:
            { print("="); return new Symbol(SymCC.EQUAL,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 60: break;
          case 8:
            { print(">" ); return new Symbol(SymCC.CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 61: break;
          case 9:
            { String lowercaseText = yytext().toLowerCase();
                                     switch(lowercaseText) {
                                         case "version":
                                            print("version"); 
                                            return new Symbol(SymCC.VERSION ,yyline,yycolumn,yytext());
                                        default:
                                            print("ERROR");
                                            addError();
                                            break;
                                     }
            }
          // fall through
          case 62: break;
          case 10:
            { print("["); return new Symbol(SymCC.BRACKETS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 63: break;
          case 11:
            { print("]"); return new Symbol(SymCC.BRACKETS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 64: break;
          case 12:
            { print("{"); return new Symbol(SymCC.KEYS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 65: break;
          case 13:
            { print("}"); return new Symbol(SymCC.KEYS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 66: break;
          case 14:
            { print("STRING"); return new Symbol(SymCC.STRING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 67: break;
          case 15:
            { print("id"); return new         Symbol(SymCC.ID,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 68: break;
          case 16:
            { print("C_P"); return new Symbol(SymCC.C_P,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 69: break;
          case 17:
            { print("alt"); return new        Symbol(SymCC.ALT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 70: break;
          case 18:
            { print("src"); return new        Symbol(SymCC.SRC,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 71: break;
          case 19:
            { print("C_BR"); return new Symbol(SymCC.C_BR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 72: break;
          case 20:
            { print("/"); return new Symbol(SymCC.C_CC,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 73: break;
          case 21:
            { print("C_H1"); return new Symbol(SymCC.C_H1,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 74: break;
          case 22:
            { print("C_H2"); return new Symbol(SymCC.C_H2,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 75: break;
          case 23:
            { print("C_H3"); return new Symbol(SymCC.C_H3,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 76: break;
          case 24:
            { print("C_H4"); return new Symbol(SymCC.C_H4,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 77: break;
          case 25:
            { print("C_H5"); return new Symbol(SymCC.C_H5,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 78: break;
          case 26:
            { print("C_H6"); return new Symbol(SymCC.C_H6,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 79: break;
          case 27:
            { print("cols"); return new       Symbol(SymCC.COLS,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 80: break;
          case 28:
            { print("href"); return new       Symbol(SymCC.HREF,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 81: break;
          case 29:
            { print("name"); return new       Symbol(SymCC.NAME,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 82: break;
          case 30:
            { print("rows"); return new       Symbol(SymCC.ROWS,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 83: break;
          case 31:
            { print("type"); return new       Symbol(SymCC.TYPE,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 84: break;
          case 32:
            { print("C_DIV"); return new Symbol(SymCC.C_DIV,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 85: break;
          case 33:
            { print("C_IMG"); return new Symbol(SymCC.C_IMG,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 86: break;
          case 34:
            { print("class"); return new      Symbol(SymCC.CLASS,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 87: break;
          case 35:
            { print("color"); return new      Symbol(SymCC.COLOR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 88: break;
          case 36:
            { print("width"); return new      Symbol(SymCC.WIDTH,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 89: break;
          case 37:
            { print("C_BODY"); return new Symbol(SymCC.C_BODY,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 90: break;
          case 38:
            { print("C_HEAD"); return new Symbol(SymCC.C_HEAD,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 91: break;
          case 39:
            { print("C_LINK"); return new Symbol(SymCC.C_LINK,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 92: break;
          case 40:
            { print("C_SPAM"); return new Symbol(SymCC.C_SPAM,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 93: break;
          case 41:
            { print("height"); return new     Symbol(SymCC.HEIGHT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 94: break;
          case 42:
            { print("C_INPUT"); return new Symbol(SymCC.C_INPUT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 95: break;
          case 43:
            { print("C_TITLE"); return new Symbol(SymCC.C_TITLE,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 96: break;
          case 44:
            { print("onclick"); return new    Symbol(SymCC.ONCLICK,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 97: break;
          case 45:
            { print("version"); return new Symbol(SymCC.VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 46:
            { print("C_BUTTON"); return new Symbol(SymCC.C_BUTTON,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 99: break;
          case 47:
            { print("C_OPTION"); return new Symbol(SymCC.C_OPTION,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 100: break;
          case 48:
            { print("C_SELECT"); return new Symbol(SymCC.C_SELECT,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 101: break;
          case 49:
            { print("font"); return new       Symbol(SymCC.FONT_SIZE,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 102: break;
          case 50:
            { print("C_TEXTAREA"); return new Symbol(SymCC.C_TEXTAREA,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 103: break;
          case 51:
            { print("background"); return new Symbol(SymCC.BACKGROUND,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 104: break;
          case 52:
            { print("text"); return new       Symbol(SymCC.FONT_ALIG,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 105: break;
          case 53:
            { print("font"); return new       Symbol(SymCC.FONT_FAMILY,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
