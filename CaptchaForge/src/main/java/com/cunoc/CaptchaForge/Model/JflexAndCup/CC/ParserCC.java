
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.CC;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.LabelCC;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.ListTypeLabelCC;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.ListTypeProms;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.NodoSimple;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.Proms;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import com.cunoc.CaptchaForge.Model.Utility.Converter.NodeSimpleConverter;
import com.cunoc.CaptchaForge.Model.JflexAndCup.AnalyzerScripting;
import com.cunoc.CaptchaForge.Model.JflexAndCup.AnalyzerScriptingToJS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymCC.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\006\000\002\005\007" +
    "\000\002\005\006\000\002\005\003\000\002\013\004\000" +
    "\002\013\003\000\002\013\003\000\002\004\005\000\002" +
    "\006\010\000\002\006\006\000\002\006\003\000\002\010" +
    "\004\000\002\010\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\007\000\002\010\004\000\002\011\006\000" +
    "\002\011\003\000\002\011\003\000\002\015\006\000\002" +
    "\015\004\000\002\015\003\000\002\014\006\000\002\014" +
    "\004\000\002\012\002\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\027\003\000\002\027\006\000\002\027\003\000\002" +
    "\020\003\000\002\020\006\000\002\020\003\000\002\021" +
    "\003\000\002\021\006\000\002\021\003\000\002\022\003" +
    "\000\002\022\006\000\002\022\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\033\005\000\002" +
    "\017\006\000\002\017\004\000\002\017\003\000\002\026" +
    "\003\000\002\026\004\000\002\023\003\000\002\023\004" +
    "\000\002\024\004\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\030\004\000\002\030" +
    "\003\000\002\031\004\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\010\002\ufffe\003\004\004\005\001\002\000" +
    "\004\004\005\001\002\000\004\012\011\001\002\000\004" +
    "\002\000\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\050\005\015\037\013\040\037\041\022" +
    "\042\036\043\023\044\040\045\030\046\026\047\024\050" +
    "\035\051\034\052\014\053\027\054\021\055\033\056\012" +
    "\057\032\063\025\001\002\000\004\006\u0105\001\002\000" +
    "\004\006\u0103\001\002\000\004\006\u0101\001\002\000\010" +
    "\003\uffbc\004\uffbc\011\uffbc\001\002\000\052\005\uffb9\007" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\063\uffb9\001\002" +
    "\000\006\003\123\004\125\001\002\000\052\005\uffb7\007" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\063\uffb7\001\002" +
    "\000\004\006\120\001\002\000\004\006\116\001\002\000" +
    "\004\006\114\001\002\000\004\006\112\001\002\000\044" +
    "\037\013\040\037\041\022\042\036\043\023\044\040\045" +
    "\030\046\026\047\024\050\035\051\034\052\014\053\027" +
    "\054\021\055\033\056\012\057\032\001\002\000\004\006" +
    "\106\001\002\000\004\006\104\001\002\000\004\006\102" +
    "\001\002\000\050\005\101\037\013\040\037\041\022\042" +
    "\036\043\023\044\040\045\030\046\026\047\024\050\035" +
    "\051\034\052\014\053\027\054\021\055\033\056\012\057" +
    "\032\063\025\001\002\000\004\006\076\001\002\000\004" +
    "\006\074\001\002\000\004\006\072\001\002\000\004\006" +
    "\070\001\002\000\004\006\066\001\002\000\004\006\043" +
    "\001\002\000\004\006\041\001\002\000\004\010\042\001" +
    "\002\000\054\005\uffb1\007\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\063\uffb1\064\uffb1\001\002\000\044\010\050\065" +
    "\057\066\060\067\044\070\064\071\046\072\045\073\062" +
    "\074\065\075\052\076\055\077\054\100\047\101\056\102" +
    "\051\103\053\104\063\001\002\000\054\005\uff9d\007\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\063\uff9d\064\uff9d\001" +
    "\002\000\054\005\uff9a\007\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\063\uff9a\064\uff9a\001\002\000\054\005\uff9b\007" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\063\uff9b\064\uff9b" +
    "\001\002\000\054\005\uff94\007\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\057\uff94\063\uff94\064\uff94\001\002\000\054\005\uff8f" +
    "\007\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\063\uff8f\064" +
    "\uff8f\001\002\000\054\005\uff92\007\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\063\uff92\064\uff92\001\002\000\054\005" +
    "\uff97\007\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\063\uff97" +
    "\064\uff97\001\002\000\054\005\uff91\007\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\063\uff91\064\uff91\001\002\000\054" +
    "\005\uff95\007\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\063" +
    "\uff95\064\uff95\001\002\000\054\005\uff96\007\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046" +
    "\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\063\uff96\064\uff96\001\002\000" +
    "\054\005\uff93\007\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\063\uff93\064\uff93\001\002\000\054\005\uff9f\007\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\063\uff9f\064\uff9f\001\002" +
    "\000\054\005\uff9e\007\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\063\uff9e\064\uff9e\001\002\000\054\005\uffb5\007\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\063\uffb5\064\uffb5\001" +
    "\002\000\054\005\uff99\007\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\063\uff99\064\uff99\001\002\000\054\005\uff90\007" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\057\uff90\063\uff90\064\uff90" +
    "\001\002\000\054\005\uff9c\007\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\063\uff9c\064\uff9c\001\002\000\054\005\uff98" +
    "\007\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\063\uff98\064" +
    "\uff98\001\002\000\004\010\067\001\002\000\054\005\uffb3" +
    "\007\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\063\uffb3\064" +
    "\uffb3\001\002\000\004\010\071\001\002\000\054\005\uffad" +
    "\007\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\063\uffad\064" +
    "\uffad\001\002\000\004\010\073\001\002\000\054\005\uffac" +
    "\007\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\063\uffac\064" +
    "\uffac\001\002\000\004\010\075\001\002\000\054\005\uffa8" +
    "\007\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\063\uffa8\064" +
    "\uffa8\001\002\000\004\010\077\001\002\000\054\005\uffa6" +
    "\007\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\063\uffa6\064" +
    "\uffa6\001\002\000\052\005\uffba\007\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\063\uffba\001\002\000\010\003\uffbb\004" +
    "\uffbb\011\uffbb\001\002\000\004\010\103\001\002\000\054" +
    "\005\uffb0\007\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\063" +
    "\uffb0\064\uffb0\001\002\000\004\010\105\001\002\000\054" +
    "\005\uffaa\007\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\063" +
    "\uffaa\064\uffaa\001\002\000\004\010\107\001\002\000\054" +
    "\005\uffaf\007\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\063" +
    "\uffaf\064\uffaf\001\002\000\004\064\111\001\002\000\052" +
    "\005\uffb8\007\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\063" +
    "\uffb8\001\002\000\004\010\113\001\002\000\054\005\uffae" +
    "\007\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\063\uffae\064" +
    "\uffae\001\002\000\004\010\115\001\002\000\054\005\uffb2" +
    "\007\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\063\uffb2\064" +
    "\uffb2\001\002\000\044\010\050\065\057\066\060\067\044" +
    "\070\064\071\046\072\045\073\062\074\065\075\052\076" +
    "\055\077\054\100\047\101\056\102\051\103\053\104\063" +
    "\001\002\000\054\005\uffb4\007\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\063\uffb4\064\uffb4\001\002\000\004\010\121" +
    "\001\002\000\054\005\uffa9\007\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\063\uffa9\064\uffa9\001\002\000\004\002\ufffd" +
    "\001\002\000\006\002\ufffa\004\ufff7\001\002\000\004\004" +
    "\374\001\002\000\012\003\130\007\131\013\132\016\127" +
    "\001\002\000\004\004\ufff8\001\002\000\050\005\015\037" +
    "\013\040\037\041\022\042\036\043\023\044\040\045\030" +
    "\046\026\047\024\050\035\051\034\052\014\053\027\054" +
    "\021\055\033\056\012\057\032\063\025\001\002\000\004" +
    "\005\ufff3\001\002\000\004\012\177\001\002\000\004\005" +
    "\135\001\002\000\004\005\134\001\002\000\004\004\ufff6" +
    "\001\002\000\012\003\136\004\141\014\140\015\142\001" +
    "\002\000\010\003\uffef\004\uffef\005\uffef\001\002\000\006" +
    "\003\136\004\174\001\002\000\050\005\015\037\013\040" +
    "\037\041\022\042\036\043\023\044\040\045\030\046\026" +
    "\047\024\050\035\051\034\052\014\053\027\054\021\055" +
    "\033\056\012\057\032\063\025\001\002\000\012\003\136" +
    "\004\141\014\140\015\142\001\002\000\054\003\150\005" +
    "\015\007\151\037\013\040\037\041\022\042\036\043\023" +
    "\044\040\045\030\046\026\047\024\050\035\051\034\052" +
    "\014\053\027\054\021\055\033\056\012\057\032\063\025" +
    "\001\002\000\010\003\ufff1\004\ufff1\005\ufff1\001\002\000" +
    "\004\004\153\001\002\000\010\003\uffeb\004\uffeb\005\uffeb" +
    "\001\002\000\010\003\uffed\004\uffed\005\uffed\001\002\000" +
    "\052\005\101\007\152\037\013\040\037\041\022\042\036" +
    "\043\023\044\040\045\030\046\026\047\024\050\035\051" +
    "\034\052\014\053\027\054\021\055\033\056\012\057\032" +
    "\063\025\001\002\000\010\003\uffea\004\uffea\005\uffea\001" +
    "\002\000\010\003\uffbe\004\uffbe\005\uffbe\001\002\000\010" +
    "\003\uffbd\004\uffbd\005\uffbd\001\002\000\004\007\154\001" +
    "\002\000\004\015\155\001\002\000\010\003\uffec\004\uffec" +
    "\005\uffec\001\002\000\010\003\136\004\141\005\157\001" +
    "\002\000\010\003\ufff0\004\ufff0\005\ufff0\001\002\000\010" +
    "\003\ufff2\004\ufff2\005\ufff2\001\002\000\010\003\163\004" +
    "\166\011\165\001\002\000\010\003\uffa2\004\uffa2\011\uffa2" +
    "\001\002\000\010\003\uffa0\004\uffa0\011\uffa0\001\002\000" +
    "\010\003\163\004\173\011\165\001\002\000\010\003\uffa1" +
    "\004\uffa1\011\uffa1\001\002\000\054\003\uffa4\005\uffa4\007" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\060\uffa4\061\uffa4\001\002" +
    "\000\004\007\170\001\002\000\004\014\171\001\002\000" +
    "\010\003\uffee\004\uffee\005\uffee\001\002\000\010\003\uffa3" +
    "\004\uffa3\011\uffa3\001\002\000\054\003\uffa5\005\uffa5\007" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\060\uffa5\061\uffa5\001\002" +
    "\000\014\003\136\004\141\007\175\014\140\015\142\001" +
    "\002\000\004\013\176\001\002\000\004\005\ufff5\001\002" +
    "\000\004\005\200\001\002\000\004\002\ufffb\001\002\000" +
    "\004\004\202\001\002\000\054\003\216\005\uffe4\007\224" +
    "\017\205\020\221\021\220\022\211\023\210\024\203\025" +
    "\213\026\204\027\222\030\231\031\230\032\227\033\226" +
    "\034\225\035\223\036\215\060\214\061\207\001\002\000" +
    "\050\005\015\037\013\040\037\041\022\042\036\043\023" +
    "\044\040\045\030\046\026\047\024\050\035\051\034\052" +
    "\014\053\027\054\021\055\033\056\012\057\032\063\025" +
    "\001\002\000\054\003\363\005\015\007\151\037\013\040" +
    "\037\041\022\042\036\043\023\044\040\045\030\046\026" +
    "\047\024\050\035\051\034\052\014\053\027\054\021\055" +
    "\033\056\012\057\032\063\025\001\002\000\050\005\015" +
    "\037\013\040\037\041\022\042\036\043\023\044\040\045" +
    "\030\046\026\047\024\050\035\051\034\052\014\053\027" +
    "\054\021\055\033\056\012\057\032\063\025\001\002\000" +
    "\004\005\354\001\002\000\004\062\353\001\002\000\050" +
    "\005\015\037\013\040\037\041\022\042\036\043\023\044" +
    "\040\045\030\046\026\047\024\050\035\051\034\052\014" +
    "\053\027\054\021\055\033\056\012\057\032\063\025\001" +
    "\002\000\050\005\015\037\013\040\037\041\022\042\036" +
    "\043\023\044\040\045\030\046\026\047\024\050\035\051" +
    "\034\052\014\053\027\054\021\055\033\056\012\057\032" +
    "\063\025\001\002\000\004\005\ufff4\001\002\000\054\003" +
    "\337\005\015\007\151\037\013\040\037\041\022\042\036" +
    "\043\023\044\040\045\030\046\026\047\024\050\035\051" +
    "\034\052\014\053\027\054\021\055\033\056\012\057\032" +
    "\063\025\001\002\000\050\005\015\037\013\040\037\041" +
    "\022\042\036\043\023\044\040\045\030\046\026\047\024" +
    "\050\035\051\034\052\014\053\027\054\021\055\033\056" +
    "\012\057\032\063\025\001\002\000\050\005\015\037\013" +
    "\040\037\041\022\042\036\043\023\044\040\045\030\046" +
    "\026\047\024\050\035\051\034\052\014\053\027\054\021" +
    "\055\033\056\012\057\032\063\025\001\002\000\004\005" +
    "\uffe7\001\002\000\004\004\317\001\002\000\054\003\313" +
    "\005\015\007\151\037\013\040\037\041\022\042\036\043" +
    "\023\044\040\045\030\046\026\047\024\050\035\051\034" +
    "\052\014\053\027\054\021\055\033\056\012\057\032\063" +
    "\025\001\002\000\054\003\304\005\015\007\151\037\013" +
    "\040\037\041\022\042\036\043\023\044\040\045\030\046" +
    "\026\047\024\050\035\051\034\052\014\053\027\054\021" +
    "\055\033\056\012\057\032\063\025\001\002\000\050\005" +
    "\015\037\013\040\037\041\022\042\036\043\023\044\040" +
    "\045\030\046\026\047\024\050\035\051\034\052\014\053" +
    "\027\054\021\055\033\056\012\057\032\063\025\001\002" +
    "\000\050\005\015\037\013\040\037\041\022\042\036\043" +
    "\023\044\040\045\030\046\026\047\024\050\035\051\034" +
    "\052\014\053\027\054\021\055\033\056\012\057\032\063" +
    "\025\001\002\000\004\016\270\001\002\000\050\005\015" +
    "\037\013\040\037\041\022\042\036\043\023\044\040\045" +
    "\030\046\026\047\024\050\035\051\034\052\014\053\027" +
    "\054\021\055\033\056\012\057\032\063\025\001\002\000" +
    "\050\005\015\037\013\040\037\041\022\042\036\043\023" +
    "\044\040\045\030\046\026\047\024\050\035\051\034\052" +
    "\014\053\027\054\021\055\033\056\012\057\032\063\025" +
    "\001\002\000\050\005\015\037\013\040\037\041\022\042" +
    "\036\043\023\044\040\045\030\046\026\047\024\050\035" +
    "\051\034\052\014\053\027\054\021\055\033\056\012\057" +
    "\032\063\025\001\002\000\050\005\015\037\013\040\037" +
    "\041\022\042\036\043\023\044\040\045\030\046\026\047" +
    "\024\050\035\051\034\052\014\053\027\054\021\055\033" +
    "\056\012\057\032\063\025\001\002\000\050\005\015\037" +
    "\013\040\037\041\022\042\036\043\023\044\040\045\030" +
    "\046\026\047\024\050\035\051\034\052\014\053\027\054" +
    "\021\055\033\056\012\057\032\063\025\001\002\000\010" +
    "\003\163\004\166\011\165\001\002\000\054\003\237\005" +
    "\uffe4\007\241\017\205\020\221\021\220\022\211\023\210" +
    "\024\203\025\213\026\204\027\222\030\231\031\230\032" +
    "\227\033\226\034\225\035\223\036\215\060\214\061\207" +
    "\001\002\000\004\004\244\001\002\000\004\030\243\001" +
    "\002\000\004\005\242\001\002\000\046\004\uffbf\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\060\uffc3\001\002\000\044\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\060\uffc4\001\002\000\044\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\060\uffc5\001\002\000\004\004\uffc0\001\002\000" +
    "\004\005\uffde\001\002\000\052\005\uffe4\007\246\017\205" +
    "\020\221\021\220\022\211\023\210\024\203\025\213\026" +
    "\204\027\222\030\231\031\230\032\227\033\226\034\225" +
    "\035\223\036\215\060\214\061\207\001\002\000\004\005" +
    "\247\001\002\000\044\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\060\uffc2" +
    "\001\002\000\004\004\uffc1\001\002\000\010\003\163\004" +
    "\166\011\165\001\002\000\054\003\237\005\uffe4\007\241" +
    "\017\205\020\221\021\220\022\211\023\210\024\203\025" +
    "\213\026\204\027\222\030\231\031\230\032\227\033\226" +
    "\034\225\035\223\036\215\060\214\061\207\001\002\000" +
    "\004\031\253\001\002\000\004\005\uffdd\001\002\000\010" +
    "\003\163\004\166\011\165\001\002\000\054\003\237\005" +
    "\uffe4\007\241\017\205\020\221\021\220\022\211\023\210" +
    "\024\203\025\213\026\204\027\222\030\231\031\230\032" +
    "\227\033\226\034\225\035\223\036\215\060\214\061\207" +
    "\001\002\000\004\032\257\001\002\000\004\005\uffdc\001" +
    "\002\000\010\003\163\004\166\011\165\001\002\000\054" +
    "\003\237\005\uffe4\007\241\017\205\020\221\021\220\022" +
    "\211\023\210\024\203\025\213\026\204\027\222\030\231" +
    "\031\230\032\227\033\226\034\225\035\223\036\215\060" +
    "\214\061\207\001\002\000\004\033\263\001\002\000\004" +
    "\005\uffdb\001\002\000\010\003\163\004\166\011\165\001" +
    "\002\000\054\003\237\005\uffe4\007\241\017\205\020\221" +
    "\021\220\022\211\023\210\024\203\025\213\026\204\027" +
    "\222\030\231\031\230\032\227\033\226\034\225\035\223" +
    "\036\215\060\214\061\207\001\002\000\004\034\267\001" +
    "\002\000\004\005\uffda\001\002\000\004\005\uffe8\001\002" +
    "\000\010\003\163\004\166\011\165\001\002\000\054\003" +
    "\237\005\uffe4\007\241\017\205\020\221\021\220\022\211" +
    "\023\210\024\203\025\213\026\204\027\222\030\231\031" +
    "\230\032\227\033\226\034\225\035\223\036\215\060\214" +
    "\061\207\001\002\000\004\035\274\001\002\000\004\005" +
    "\uffd9\001\002\000\010\003\163\004\166\011\165\001\002" +
    "\000\054\003\237\005\uffe4\007\241\017\205\020\221\021" +
    "\220\022\211\023\210\024\203\025\213\026\204\027\222" +
    "\030\231\031\230\032\227\033\226\034\225\035\223\036" +
    "\215\060\214\061\207\001\002\000\004\027\300\001\002" +
    "\000\004\005\uffd7\001\002\000\004\005\uffd6\001\002\000" +
    "\010\003\163\004\166\011\165\001\002\000\004\005\uffce" +
    "\001\002\000\004\005\uffcc\001\002\000\054\003\237\005" +
    "\uffe4\007\241\017\205\020\221\021\220\022\211\023\210" +
    "\024\203\025\213\026\204\027\222\030\231\031\230\032" +
    "\227\033\226\034\225\035\223\036\215\060\214\061\207" +
    "\001\002\000\004\020\307\001\002\000\004\005\uffcd\001" +
    "\002\000\010\003\163\004\166\011\165\001\002\000\004" +
    "\005\uffd3\001\002\000\004\005\uffd1\001\002\000\004\005" +
    "\uffcf\001\002\000\054\003\237\005\uffe4\007\241\017\205" +
    "\020\221\021\220\022\211\023\210\024\203\025\213\026" +
    "\204\027\222\030\231\031\230\032\227\033\226\034\225" +
    "\035\223\036\215\060\214\061\207\001\002\000\004\021" +
    "\316\001\002\000\004\005\uffd0\001\002\000\052\005\uffe4" +
    "\007\321\017\205\020\221\021\220\022\211\023\210\024" +
    "\203\025\213\026\204\027\222\030\231\031\230\032\227" +
    "\033\226\034\225\035\223\036\215\060\214\061\207\001" +
    "\002\000\004\005\323\001\002\000\004\016\322\001\002" +
    "\000\004\005\uffe9\001\002\000\004\004\uffe6\001\002\000" +
    "\010\003\163\004\166\011\165\001\002\000\054\003\237" +
    "\005\uffe4\007\241\017\205\020\221\021\220\022\211\023" +
    "\210\024\203\025\213\026\204\027\222\030\231\031\230" +
    "\032\227\033\226\034\225\035\223\036\215\060\214\061" +
    "\207\001\002\000\004\036\327\001\002\000\004\005\uffd8" +
    "\001\002\000\010\003\163\004\166\011\165\001\002\000" +
    "\054\003\237\005\uffe4\007\241\017\205\020\221\021\220" +
    "\022\211\023\210\024\203\025\213\026\204\027\222\030" +
    "\231\031\230\032\227\033\226\034\225\035\223\036\215" +
    "\060\214\061\207\001\002\000\004\060\333\001\002\000" +
    "\004\005\uffdf\001\002\000\010\003\163\004\166\011\165" +
    "\001\002\000\004\005\uffc8\001\002\000\004\005\uffd4\001" +
    "\002\000\004\005\uffc6\001\002\000\054\003\237\005\uffe4" +
    "\007\241\017\205\020\221\021\220\022\211\023\210\024" +
    "\203\025\213\026\204\027\222\030\231\031\230\032\227" +
    "\033\226\034\225\035\223\036\215\060\214\061\207\001" +
    "\002\000\004\025\342\001\002\000\004\005\uffc7\001\002" +
    "\000\010\003\163\004\166\011\165\001\002\000\054\003" +
    "\237\005\uffe4\007\241\017\205\020\221\021\220\022\211" +
    "\023\210\024\203\025\213\026\204\027\222\030\231\031" +
    "\230\032\227\033\226\034\225\035\223\036\215\060\214" +
    "\061\207\001\002\000\004\022\346\001\002\000\004\005" +
    "\uffe2\001\002\000\010\003\163\004\166\011\165\001\002" +
    "\000\054\003\237\005\uffe4\007\241\017\205\020\221\021" +
    "\220\022\211\023\210\024\203\025\213\026\204\027\222" +
    "\030\231\031\230\032\227\033\226\034\225\035\223\036" +
    "\215\060\214\061\207\001\002\000\004\023\352\001\002" +
    "\000\004\005\uffe1\001\002\000\004\005\uffd2\001\002\000" +
    "\004\004\uffe5\001\002\000\010\003\163\004\166\011\165" +
    "\001\002\000\054\003\237\005\uffe4\007\241\017\205\020" +
    "\221\021\220\022\211\023\210\024\203\025\213\026\204" +
    "\027\222\030\231\031\230\032\227\033\226\034\225\035" +
    "\223\036\215\060\214\061\207\001\002\000\004\017\360" +
    "\001\002\000\004\005\uffe3\001\002\000\010\003\163\004" +
    "\166\011\165\001\002\000\004\005\uffcb\001\002\000\004" +
    "\005\uffc9\001\002\000\004\005\uffd5\001\002\000\054\003" +
    "\237\005\uffe4\007\241\017\205\020\221\021\220\022\211" +
    "\023\210\024\203\025\213\026\204\027\222\030\231\031" +
    "\230\032\227\033\226\034\225\035\223\036\215\060\214" +
    "\061\207\001\002\000\004\026\367\001\002\000\004\005" +
    "\uffca\001\002\000\010\003\163\004\166\011\165\001\002" +
    "\000\054\003\237\005\uffe4\007\241\017\205\020\221\021" +
    "\220\022\211\023\210\024\203\025\213\026\204\027\222" +
    "\030\231\031\230\032\227\033\226\034\225\035\223\036" +
    "\215\060\214\061\207\001\002\000\004\024\373\001\002" +
    "\000\004\005\uffe0\001\002\000\012\003\130\007\376\013" +
    "\132\016\127\001\002\000\004\004\ufff9\001\002\000\004" +
    "\012\377\001\002\000\004\005\u0100\001\002\000\004\002" +
    "\ufffc\001\002\000\004\010\u0102\001\002\000\054\005\uffab" +
    "\007\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\063\uffab\064" +
    "\uffab\001\002\000\004\010\u0104\001\002\000\054\005\uffb6" +
    "\007\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\063\uffb6\064" +
    "\uffb6\001\002\000\004\010\u0106\001\002\000\054\005\uffa7" +
    "\007\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\063\uffa7\064" +
    "\uffa7\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\006\002\006\003\005\001\001\000\004\003" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\016\024\030\025" +
    "\015\034\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\125\005\121\013\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\077\034" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\374\001\001\000\004" +
    "\006\132\001\001\000\002\001\001\000\012\023\200\024" +
    "\030\025\015\034\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\142\010\136\001\001\000\002\001\001" +
    "\000\004\007\157\001\001\000\012\023\160\024\030\025" +
    "\015\034\017\001\001\000\006\007\142\010\155\001\001" +
    "\000\016\011\145\023\143\024\146\025\015\026\144\034" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\077\034\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\166\031\163\032\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\142\010\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\205\014\216\015\211\001\001\000" +
    "\012\023\367\024\030\025\015\034\017\001\001\000\016" +
    "\021\363\023\360\024\146\025\015\026\361\034\017\001" +
    "\001\000\012\023\354\024\030\025\015\034\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\346\024" +
    "\030\025\015\034\017\001\001\000\012\023\342\024\030" +
    "\025\015\034\017\001\001\000\002\001\001\000\016\022" +
    "\335\023\333\024\146\025\015\026\334\034\017\001\001" +
    "\000\012\023\327\024\030\025\015\034\017\001\001\000" +
    "\012\023\323\024\030\025\015\034\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\307\024\146\025" +
    "\015\026\311\027\310\034\017\001\001\000\016\020\300" +
    "\023\301\024\146\025\015\026\302\034\017\001\001\000" +
    "\012\023\274\024\030\025\015\034\017\001\001\000\012" +
    "\023\270\024\030\025\015\034\017\001\001\000\002\001" +
    "\001\000\012\023\263\024\030\025\015\034\017\001\001" +
    "\000\012\023\257\024\030\025\015\034\017\001\001\000" +
    "\012\023\253\024\030\025\015\034\017\001\001\000\012" +
    "\023\247\024\030\025\015\034\017\001\001\000\012\023" +
    "\231\024\030\025\015\034\017\001\001\000\010\030\232" +
    "\031\163\032\161\001\001\000\012\012\235\016\234\017" +
    "\233\033\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\250\031\163\032\161\001\001" +
    "\000\012\012\235\016\251\017\233\033\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\254\031\163" +
    "\032\161\001\001\000\012\012\235\016\255\017\233\033" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\260\031\163\032\161\001\001\000\012\012\235\016" +
    "\261\017\233\033\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\264\031\163\032\161\001\001\000" +
    "\012\012\235\016\265\017\233\033\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\271\031\163\032\161\001\001\000\012\012\235\016\272" +
    "\017\233\033\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\275\031\163\032\161\001\001\000\012" +
    "\012\235\016\276\017\233\033\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\304" +
    "\031\163\032\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\235\016\305\017\233\033\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\313\031" +
    "\163\032\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\235\016\314\017\233\033" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\324\031\163" +
    "\032\161\001\001\000\012\012\235\016\325\017\233\033" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\330\031\163\032\161\001\001\000\012\012\235\016" +
    "\331\017\233\033\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\337\031\163\032\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\235\016\340\017\233\033\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\343\031\163\032\161" +
    "\001\001\000\012\012\235\016\344\017\233\033\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\347" +
    "\031\163\032\161\001\001\000\012\012\235\016\350\017" +
    "\233\033\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\355\031" +
    "\163\032\161\001\001\000\012\012\235\016\356\017\233" +
    "\033\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\364\031\163\032\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\235\016" +
    "\365\017\233\033\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\370\031\163\032\161\001\001\000" +
    "\012\012\235\016\371\017\233\033\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<Proms> listProms= new ArrayList();
private ArrayList<LabelCC> listLabelCC= new ArrayList();
private String javaScript = "" ;
private LexemaCC lexer;
private int counter = 0;

	  public ParserCC(LexemaCC lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        System.out.println("Error  "+token.toString()+"Error   \n");
        if(lexema.toUpperCase().equals("C_BODY")){
          this.listError.add(new ReportErrorInterpreter(type, token, "Se detectó un error en la estructura HTML por una etiqueta mal cerrada dentro de <body>"));
        }else{
          this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        }
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    private LabelCC newLayout(Object listPromsUser,Object listSon, ListTypeLabelCC type, String data){
      List<Proms> newlistProms = (ArrayList<Proms>) listPromsUser;
      ArrayList<LabelCC> newlistLabelSon = (ArrayList<LabelCC>) listSon;
      return new LabelCC(newlistProms,newlistLabelSon,type,data);
    }

    private LabelCC newSonLayoutBody(Object listPromsUser,Object listSon, ListTypeLabelCC type, Object data){
      List<Proms> newlistProms = (listPromsUser!=null)? (ArrayList<Proms>) listPromsUser : new ArrayList();
      ArrayList<LabelCC> newlistLabelSon = (listSon!=null)? (ArrayList<LabelCC>) listSon : new ArrayList();
      String newData = (data != null )? data.toString() : "";
      return new LabelCC(newlistProms,newlistLabelSon,type,newData);
    }

    public ArrayList<LabelCC> getListLabelCC(){
        return this.listLabelCC; 
    }

    private void AnalizerScripting(){
      AnalyzerScriptingToJS analizerScripting = new AnalyzerScriptingToJS(lexer.getStringScripting());
      analizerScripting.analyzer();
      this.javaScript = analizerScripting.getJavaScript();
      this.listError.addAll(analizerScripting.getListError());  
      System.out.println(analizerScripting.getInsert());
    }

    public String getJavaScript(){
      return this.javaScript;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCC$actions {
  private final ParserCC parser;

  /** Constructor */
  CUP$ParserCC$actions(ParserCC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action_part00000000(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCC$result;

      /* select the action based on the action number */
      switch (CUP$ParserCC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = start_val;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCC$parser.done_parsing();
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // etiqueta_inicial ::= OPEN C_CC insertar_proms derivar_etiqueta_inicial 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
 listLabelCC.add(newLayout(listProms,listSon,ListTypeLabelCC.C_CC,""));

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",1, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // derivar_etiqueta_inicial ::= bucle_etiquetas OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)).value;
		
if(node!=null && node instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) node;
  RESULT = new NodeSimpleConverter().getListLabelCC(useNode);
}else{
  RESULT = new ArrayList();
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // derivar_etiqueta_inicial ::= OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;
		RESULT =new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // derivar_etiqueta_inicial ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bucle_etiquetas ::= bucle_etiquetas hijos_etiqueta_inicial 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof LabelCC){
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  LabelCC newLayout = (LabelCC) son;
  newNodoSimple.addNodoSimpleRight(new NodoSimple(newLayout));
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bucle_etiquetas ::= hijos_etiqueta_inicial 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bucle_etiquetas ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // hijos_etiqueta_inicial ::= OPEN etiquetas CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = son;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_etiqueta_inicial",2, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiquetas ::= C_HEAD CLOSE etiquetas_head OPEN BAR C_HEAD 
            {
              Object RESULT =null;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		
if(listSon!=null && listSon instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) listSon;
  RESULT = newLayout(listProms,new NodeSimpleConverter().getListLabelCC(useNode),ListTypeLabelCC.C_HEAD,"");
}else{
  RESULT = newLayout(listProms,listSon,ListTypeLabelCC.C_HEAD,"");
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiquetas ::= C_BODY insertar_proms OPEN derivar_body 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(listSon != null){
  RESULT = newLayout(listProms,listSon,ListTypeLabelCC.C_BODY,"");
}else{
  RESULT = newLayout(listProms,new ArrayList(),ListTypeLabelCC.C_BODY,"");
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiquetas ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiquetas_head ::= etiquetas_head etiqueta_head 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof NodoSimple){
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  NodoSimple nodoSimpleRigh = (NodoSimple) son;
  newNodoSimple.addNodoSimpleRight(nodoSimpleRigh);
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetas_head ::= etiqueta_head 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
  RESULT = son;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // etiqueta_head ::= OPEN etiquetas_head CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta_head ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiquetas_head ::= C_TITLE insertar_proms contenido BAR C_TITLE 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		if(data!=null && listProms!=null){
    RESULT = newLayout(listProms,new ArrayList(),ListTypeLabelCC.C_TITLE,data.toString());
}
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiquetas_head ::= C_LINK auto_cerradura_link 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(listProms==null){
    RESULT = newLayout(new ArrayList(),new ArrayList(),ListTypeLabelCC.C_LINK,"");
}else{
    RESULT = newLayout(listProms,new ArrayList(),ListTypeLabelCC.C_LINK,"");
}
counter++;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // auto_cerradura_link ::= insertar_proms OPEN BAR C_LINK 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // auto_cerradura_link ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // auto_cerradura_link ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // derivar_body ::= bucle_body OPEN BAR C_BODY 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		
if(nodo!=null && nodo instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) nodo;
  RESULT = new NodeSimpleConverter().getListLabelCC(useNode);
}else{
  RESULT = new ArrayList();
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // derivar_body ::= BAR C_BODY 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // derivar_body ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bucle_body ::= bucle_body OPEN etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof LabelCC){
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  LabelCC newLayout = (LabelCC) son;
  newNodoSimple.addNodoSimpleRight(new NodoSimple(newLayout));
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bucle_body ::= etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiquetas_body ::= 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // etiquetas_body ::= C_SPAM insertar_proms contenido derivar_hijos_hijos_body_nada C_SPAM 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_SPAM,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiquetas_body ::= C_SELECT insertar_proms contenido derivar_hijos_hijos_body_nada C_SELECT 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_SELECT,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etiquetas_body ::= C_OPTION insertar_proms contenido derivar_hijos_hijos_body_nada C_OPTION 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_OPTION,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etiquetas_body ::= C_DIV insertar_proms contenido derivar_hijos_hijos_body_nada C_DIV 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_DIV,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiquetas_body ::= C_FORM insertar_proms contenido derivar_hijos_hijos_body_nada C_FORM 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_FORM,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // etiquetas_body ::= C_H1 insertar_proms contenido derivar_hijos_hijos_body_nada C_H1 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H1,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // etiquetas_body ::= C_H2 insertar_proms contenido derivar_hijos_hijos_body_nada C_H2 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H2,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // etiquetas_body ::= C_H3 insertar_proms contenido derivar_hijos_hijos_body_nada C_H3 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H3,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // etiquetas_body ::= C_H4 insertar_proms contenido derivar_hijos_hijos_body_nada C_H4 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H4,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // etiquetas_body ::= C_H5 insertar_proms contenido derivar_hijos_hijos_body_nada C_H5 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H5,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // etiquetas_body ::= C_H6 insertar_proms contenido derivar_hijos_hijos_body_nada C_H6 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H6,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // etiquetas_body ::= C_P insertar_proms contenido derivar_hijos_hijos_body_nada C_P 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_P,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiquetas_body ::= C_BUTTON insertar_proms contenido derivar_hijos_hijos_body_nada C_BUTTON 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_BUTTON,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // etiquetas_body ::= C_INPUT auto_cerradura_input 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiquetas_body ::= C_BR auto_cerradura_br 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetas_body ::= C_IMG auto_cerradura_img 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas_body ::= C_TEXTAREA auto_cerradura_text_area 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetas_body ::= C_SCRIPTING OUTPUT_C_SCRIPTING 
            {
              Object RESULT =null;
		
RESULT = newLayout(new ArrayList(),new ArrayList(),ListTypeLabelCC.C_SCRIPTING,lexer.getStringScripting());
AnalizerScripting();
lexer.setStringScripting("");

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // auto_cerradura_text_area ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_TEXTAREA,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_text_area",21, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // auto_cerradura_text_area ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_TEXTAREA 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_TEXTAREA,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_text_area",21, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // auto_cerradura_text_area ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_text_area",21, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // auto_cerradura_input ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_INPUT,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // auto_cerradura_input ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_INPUT 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_INPUT,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // auto_cerradura_input ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // auto_cerradura_br ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_BR,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // auto_cerradura_br ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_BR 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_BR,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // auto_cerradura_br ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // auto_cerradura_img ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_IMG,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",16, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // auto_cerradura_img ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_IMG 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_IMG,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",16, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // auto_cerradura_img ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",16, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // derivar_hijos_hijos_body_nada ::= BAR 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body_nada",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // derivar_hijos_hijos_body_nada ::= hijos_body_hijos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body_nada",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // derivar_hijos_hijos_body_nada ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body_nada",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // hijos_body_hijos ::= derivar_hijos_hijos_body OPEN BAR 
            {
              Object RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		
if(node!=null && node instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) node;
  RESULT = new NodeSimpleConverter().getListLabelCC(useNode);
}else{
  RESULT = new ArrayList();
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_body_hijos",25, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // derivar_hijos_hijos_body ::= derivar_hijos_hijos_body OPEN etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof LabelCC )
{
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  LabelCC newLayout = (LabelCC) son;
  newNodoSimple.addNodoSimpleRight(new NodoSimple(newLayout));
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // derivar_hijos_hijos_body ::= etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // derivar_hijos_hijos_body ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insertar_promos_auto_cerrado ::= BAR 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_promos_auto_cerrado",20, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // insertar_promos_auto_cerrado ::= bucle_proms BAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
    RESULT = listProms;
    listProms = new ArrayList();

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_promos_auto_cerrado",20, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // insertar_proms ::= CLOSE 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_proms",17, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // insertar_proms ::= bucle_proms CLOSE 
            {
              Object RESULT =null;
		
    RESULT = listProms;
    listProms = new ArrayList();

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_proms",17, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bucle_proms ::= bucle_proms proms 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(data!=null && data instanceof Proms){
    Proms newProms = (Proms) data;
    listProms.add(newProms);
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_proms",18, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bucle_proms ::= proms 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(data!=null && data instanceof Proms){
    Proms newProms = (Proms) data;
    listProms.add(newProms);
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_proms",18, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // proms ::= BRACKETS_OPEN prom BRACKETS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // proms ::= prom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prom ::= HREF EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.HREF);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prom ::= BACKGROUND EQUAL color 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.BACKGROUND);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prom ::= COLOR EQUAL color 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.COLOR);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prom ::= FONT_SIZE EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.FONT_SIZE);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prom ::= FONT_FAMILY EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.FONT_FAMILY);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prom ::= FONT_ALIG EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.FONT_ALIG);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prom ::= TYPE EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.TYPE);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prom ::= ID EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ID);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prom ::= NAME EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.NAME);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // prom ::= COLS EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.COLS);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prom ::= ROWS EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ROWS);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // prom ::= CLASS EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.CLASS);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // prom ::= SRC EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.SRC);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // prom ::= WIDTH EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.WIDTH);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // prom ::= HEIGHT EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.HEIGHT);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // prom ::= ALT EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ALT);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // prom ::= ONCLICK EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ONCLICK);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contenido ::= bucle_contenido OPEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT=a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // contenido ::= OPEN 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bucle_contenido ::= bucle_contenido dato_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
RESULT=a.toString()+lexer.getSpace()+b.toString();

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_contenido",23, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bucle_contenido ::= dato_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT=a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_contenido",23, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dato_contenido ::= CONTENIDO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT=a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("dato_contenido",24, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dato_contenido ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("dato_contenido",24, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // color ::= COLOR_BLACK 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // color ::= COLOR_OLIVE 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // color ::= COLOR_TEAL 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // color ::= COLOR_RED 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // color ::= COLOR_BLUE 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // color ::= COLOR_MAROON 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // color ::= COLOR_NAVY 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // color ::= COLOR_GRAY 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // color ::= COLOR_LIME 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // color ::= COLOR_FUCHSIA 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // color ::= COLOR_GREEN 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // color ::= COLOR_WHITE 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // color ::= COLOR_PURPLE 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // color ::= COLOR_SILVER 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // color ::= COLOR_YELLOW 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // color ::= COLOR_AQUA 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // color ::= STRING_TOKEN 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = color;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("color",27, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
              return CUP$ParserCC$do_action_part00000000(
                               CUP$ParserCC$act_num,
                               CUP$ParserCC$parser,
                               CUP$ParserCC$stack,
                               CUP$ParserCC$top);
    }
}

}
