
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.CC;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.LabelCC;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.ListTypeLabelCC;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.ListTypeProms;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.NodoSimple;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Recolectora.Proms;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import com.cunoc.CaptchaForge.Model.Utility.Converter.NodeSimpleConverter;
import com.cunoc.CaptchaForge.Model.JflexAndCup.AnalyzerScripting;
import com.cunoc.CaptchaForge.Model.JflexAndCup.AnalyzerScriptingToJS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymCC.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\006\000\002\005\007" +
    "\000\002\005\006\000\002\005\003\000\002\013\004\000" +
    "\002\013\003\000\002\013\003\000\002\004\005\000\002" +
    "\006\010\000\002\006\006\000\002\006\003\000\002\010" +
    "\004\000\002\010\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\007\000\002\010\004\000\002\011\006\000" +
    "\002\011\003\000\002\011\003\000\002\015\006\000\002" +
    "\015\004\000\002\015\003\000\002\014\006\000\002\014" +
    "\004\000\002\012\002\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\027\003\000\002\027\006\000\002\020\003\000\002" +
    "\020\006\000\002\021\003\000\002\021\006\000\002\022" +
    "\003\000\002\022\006\000\002\016\003\000\002\016\003" +
    "\000\002\033\005\000\002\017\006\000\002\017\004\000" +
    "\002\017\003\000\002\026\003\000\002\026\004\000\002" +
    "\023\003\000\002\023\004\000\002\024\004\000\002\024" +
    "\003\000\002\025\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\030\004\000" +
    "\002\030\003\000\002\031\004\000\002\031\003\000\002" +
    "\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\010\002\ufffe\003\004\004\005\001\002\000" +
    "\004\004\005\001\002\000\004\012\011\001\002\000\004" +
    "\002\000\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\005\014\063\013\001\002\000\006" +
    "\003\107\004\111\001\002\000\044\037\022\040\041\041" +
    "\026\042\040\043\030\044\042\045\033\046\031\047\027" +
    "\050\037\051\036\052\023\053\032\054\025\055\035\056" +
    "\021\057\034\001\002\000\010\003\uffc1\004\uffc1\011\uffc1" +
    "\001\002\000\006\005\017\063\013\001\002\000\010\005" +
    "\uffbe\007\uffbe\063\uffbe\001\002\000\010\003\uffc0\004\uffc0" +
    "\011\uffc0\001\002\000\010\005\uffbf\007\uffbf\063\uffbf\001" +
    "\002\000\004\006\104\001\002\000\004\006\102\001\002" +
    "\000\004\006\100\001\002\000\004\064\077\001\002\000" +
    "\004\006\075\001\002\000\004\006\073\001\002\000\004" +
    "\006\071\001\002\000\004\006\067\001\002\000\004\006" +
    "\065\001\002\000\004\006\063\001\002\000\004\006\061" +
    "\001\002\000\004\006\057\001\002\000\004\006\055\001" +
    "\002\000\004\006\053\001\002\000\004\006\051\001\002" +
    "\000\004\006\047\001\002\000\004\006\045\001\002\000" +
    "\004\006\043\001\002\000\004\010\044\001\002\000\004" +
    "\064\uffb7\001\002\000\004\010\046\001\002\000\004\064" +
    "\uffbb\001\002\000\004\010\050\001\002\000\004\064\uffb9" +
    "\001\002\000\004\010\052\001\002\000\004\064\uffb3\001" +
    "\002\000\004\010\054\001\002\000\004\064\uffb2\001\002" +
    "\000\004\010\056\001\002\000\004\064\uffae\001\002\000" +
    "\004\010\060\001\002\000\004\064\uffac\001\002\000\004" +
    "\010\062\001\002\000\004\064\uffb6\001\002\000\004\010" +
    "\064\001\002\000\004\064\uffb0\001\002\000\004\010\066" +
    "\001\002\000\004\064\uffb5\001\002\000\004\010\070\001" +
    "\002\000\004\064\uffb8\001\002\000\004\010\072\001\002" +
    "\000\004\064\uffb4\001\002\000\004\010\074\001\002\000" +
    "\004\064\uffba\001\002\000\004\010\076\001\002\000\004" +
    "\064\uffaf\001\002\000\010\005\uffbd\007\uffbd\063\uffbd\001" +
    "\002\000\004\010\101\001\002\000\004\064\uffb1\001\002" +
    "\000\004\010\103\001\002\000\004\064\uffbc\001\002\000" +
    "\004\010\105\001\002\000\004\064\uffad\001\002\000\004" +
    "\002\ufffd\001\002\000\006\002\ufffa\004\ufff7\001\002\000" +
    "\004\004\354\001\002\000\012\003\114\007\115\013\116" +
    "\016\113\001\002\000\004\004\ufff8\001\002\000\006\005" +
    "\014\063\013\001\002\000\004\005\ufff3\001\002\000\004" +
    "\012\163\001\002\000\004\005\121\001\002\000\004\005" +
    "\120\001\002\000\004\004\ufff6\001\002\000\012\003\122" +
    "\004\125\014\124\015\126\001\002\000\010\003\uffef\004" +
    "\uffef\005\uffef\001\002\000\006\003\122\004\160\001\002" +
    "\000\006\005\014\063\013\001\002\000\012\003\122\004" +
    "\125\014\124\015\126\001\002\000\012\003\134\005\014" +
    "\007\131\063\013\001\002\000\010\003\ufff1\004\ufff1\005" +
    "\ufff1\001\002\000\004\004\137\001\002\000\010\003\uffc3" +
    "\004\uffc3\005\uffc3\001\002\000\010\003\uffeb\004\uffeb\005" +
    "\uffeb\001\002\000\010\005\017\007\136\063\013\001\002" +
    "\000\010\003\uffea\004\uffea\005\uffea\001\002\000\010\003" +
    "\uffed\004\uffed\005\uffed\001\002\000\010\003\uffc2\004\uffc2" +
    "\005\uffc2\001\002\000\004\007\140\001\002\000\004\015" +
    "\141\001\002\000\010\003\uffec\004\uffec\005\uffec\001\002" +
    "\000\010\003\122\004\125\005\143\001\002\000\010\003" +
    "\ufff0\004\ufff0\005\ufff0\001\002\000\010\003\ufff2\004\ufff2" +
    "\005\ufff2\001\002\000\010\003\147\004\152\011\151\001" +
    "\002\000\010\003\uffa8\004\uffa8\011\uffa8\001\002\000\010" +
    "\003\uffa6\004\uffa6\011\uffa6\001\002\000\010\003\147\004" +
    "\157\011\151\001\002\000\010\003\uffa7\004\uffa7\011\uffa7" +
    "\001\002\000\054\003\uffaa\005\uffaa\007\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\060\uffaa\061\uffaa\001\002\000\004\007\154" +
    "\001\002\000\004\014\155\001\002\000\010\003\uffee\004" +
    "\uffee\005\uffee\001\002\000\010\003\uffa9\004\uffa9\011\uffa9" +
    "\001\002\000\054\003\uffab\005\uffab\007\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\060\uffab\061\uffab\001\002\000\014\003\122" +
    "\004\125\007\161\014\124\015\126\001\002\000\004\013" +
    "\162\001\002\000\004\005\ufff5\001\002\000\004\005\164" +
    "\001\002\000\004\002\ufffb\001\002\000\004\004\166\001" +
    "\002\000\054\003\202\005\uffe4\007\210\017\171\020\205" +
    "\021\204\022\175\023\174\024\167\025\177\026\170\027" +
    "\206\030\215\031\214\032\213\033\212\034\211\035\207" +
    "\036\201\060\200\061\173\001\002\000\006\005\014\063" +
    "\013\001\002\000\010\005\014\007\131\063\013\001\002" +
    "\000\006\005\014\063\013\001\002\000\004\005\335\001" +
    "\002\000\004\062\334\001\002\000\006\005\014\063\013" +
    "\001\002\000\006\005\014\063\013\001\002\000\004\005" +
    "\ufff4\001\002\000\010\005\014\007\131\063\013\001\002" +
    "\000\006\005\014\063\013\001\002\000\006\005\014\063" +
    "\013\001\002\000\004\005\uffe7\001\002\000\004\004\301" +
    "\001\002\000\010\005\014\007\131\063\013\001\002\000" +
    "\010\005\014\007\131\063\013\001\002\000\006\005\014" +
    "\063\013\001\002\000\006\005\014\063\013\001\002\000" +
    "\004\016\254\001\002\000\006\005\014\063\013\001\002" +
    "\000\006\005\014\063\013\001\002\000\006\005\014\063" +
    "\013\001\002\000\006\005\014\063\013\001\002\000\006" +
    "\005\014\063\013\001\002\000\010\003\147\004\152\011" +
    "\151\001\002\000\054\003\223\005\uffe4\007\225\017\171" +
    "\020\205\021\204\022\175\023\174\024\167\025\177\026" +
    "\170\027\206\030\215\031\214\032\213\033\212\034\211" +
    "\035\207\036\201\060\200\061\173\001\002\000\004\004" +
    "\230\001\002\000\004\030\227\001\002\000\004\005\226" +
    "\001\002\000\004\004\uffc4\001\002\000\044\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\060\uffc8\001\002\000\044\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\060\uffc9\001\002\000\004\004\uffc5\001\002\000" +
    "\004\005\uffde\001\002\000\052\005\uffe4\007\232\017\171" +
    "\020\205\021\204\022\175\023\174\024\167\025\177\026" +
    "\170\027\206\030\215\031\214\032\213\033\212\034\211" +
    "\035\207\036\201\060\200\061\173\001\002\000\004\005" +
    "\233\001\002\000\044\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\060\uffc7" +
    "\001\002\000\004\004\uffc6\001\002\000\010\003\147\004" +
    "\152\011\151\001\002\000\054\003\223\005\uffe4\007\225" +
    "\017\171\020\205\021\204\022\175\023\174\024\167\025" +
    "\177\026\170\027\206\030\215\031\214\032\213\033\212" +
    "\034\211\035\207\036\201\060\200\061\173\001\002\000" +
    "\004\031\237\001\002\000\004\005\uffdd\001\002\000\010" +
    "\003\147\004\152\011\151\001\002\000\054\003\223\005" +
    "\uffe4\007\225\017\171\020\205\021\204\022\175\023\174" +
    "\024\167\025\177\026\170\027\206\030\215\031\214\032" +
    "\213\033\212\034\211\035\207\036\201\060\200\061\173" +
    "\001\002\000\004\032\243\001\002\000\004\005\uffdc\001" +
    "\002\000\010\003\147\004\152\011\151\001\002\000\054" +
    "\003\223\005\uffe4\007\225\017\171\020\205\021\204\022" +
    "\175\023\174\024\167\025\177\026\170\027\206\030\215" +
    "\031\214\032\213\033\212\034\211\035\207\036\201\060" +
    "\200\061\173\001\002\000\004\033\247\001\002\000\004" +
    "\005\uffdb\001\002\000\010\003\147\004\152\011\151\001" +
    "\002\000\054\003\223\005\uffe4\007\225\017\171\020\205" +
    "\021\204\022\175\023\174\024\167\025\177\026\170\027" +
    "\206\030\215\031\214\032\213\033\212\034\211\035\207" +
    "\036\201\060\200\061\173\001\002\000\004\034\253\001" +
    "\002\000\004\005\uffda\001\002\000\004\005\uffe8\001\002" +
    "\000\010\003\147\004\152\011\151\001\002\000\054\003" +
    "\223\005\uffe4\007\225\017\171\020\205\021\204\022\175" +
    "\023\174\024\167\025\177\026\170\027\206\030\215\031" +
    "\214\032\213\033\212\034\211\035\207\036\201\060\200" +
    "\061\173\001\002\000\004\035\260\001\002\000\004\005" +
    "\uffd9\001\002\000\010\003\147\004\152\011\151\001\002" +
    "\000\054\003\223\005\uffe4\007\225\017\171\020\205\021" +
    "\204\022\175\023\174\024\167\025\177\026\170\027\206" +
    "\030\215\031\214\032\213\033\212\034\211\035\207\036" +
    "\201\060\200\061\173\001\002\000\004\027\264\001\002" +
    "\000\004\005\uffd7\001\002\000\010\003\147\004\152\011" +
    "\151\001\002\000\004\005\uffcf\001\002\000\004\005\uffd6" +
    "\001\002\000\054\003\223\005\uffe4\007\225\017\171\020" +
    "\205\021\204\022\175\023\174\024\167\025\177\026\170" +
    "\027\206\030\215\031\214\032\213\033\212\034\211\035" +
    "\207\036\201\060\200\061\173\001\002\000\004\020\272" +
    "\001\002\000\004\005\uffce\001\002\000\010\003\147\004" +
    "\152\011\151\001\002\000\004\005\uffd3\001\002\000\004" +
    "\005\uffd1\001\002\000\054\003\223\005\uffe4\007\225\017" +
    "\171\020\205\021\204\022\175\023\174\024\167\025\177" +
    "\026\170\027\206\030\215\031\214\032\213\033\212\034" +
    "\211\035\207\036\201\060\200\061\173\001\002\000\004" +
    "\021\300\001\002\000\004\005\uffd0\001\002\000\052\005" +
    "\uffe4\007\303\017\171\020\205\021\204\022\175\023\174" +
    "\024\167\025\177\026\170\027\206\030\215\031\214\032" +
    "\213\033\212\034\211\035\207\036\201\060\200\061\173" +
    "\001\002\000\004\005\305\001\002\000\004\016\304\001" +
    "\002\000\004\005\uffe9\001\002\000\004\004\uffe6\001\002" +
    "\000\010\003\147\004\152\011\151\001\002\000\054\003" +
    "\223\005\uffe4\007\225\017\171\020\205\021\204\022\175" +
    "\023\174\024\167\025\177\026\170\027\206\030\215\031" +
    "\214\032\213\033\212\034\211\035\207\036\201\060\200" +
    "\061\173\001\002\000\004\036\311\001\002\000\004\005" +
    "\uffd8\001\002\000\010\003\147\004\152\011\151\001\002" +
    "\000\054\003\223\005\uffe4\007\225\017\171\020\205\021" +
    "\204\022\175\023\174\024\167\025\177\026\170\027\206" +
    "\030\215\031\214\032\213\033\212\034\211\035\207\036" +
    "\201\060\200\061\173\001\002\000\004\060\315\001\002" +
    "\000\004\005\uffdf\001\002\000\010\003\147\004\152\011" +
    "\151\001\002\000\004\005\uffcb\001\002\000\004\005\uffd4" +
    "\001\002\000\054\003\223\005\uffe4\007\225\017\171\020" +
    "\205\021\204\022\175\023\174\024\167\025\177\026\170" +
    "\027\206\030\215\031\214\032\213\033\212\034\211\035" +
    "\207\036\201\060\200\061\173\001\002\000\004\025\323" +
    "\001\002\000\004\005\uffca\001\002\000\010\003\147\004" +
    "\152\011\151\001\002\000\054\003\223\005\uffe4\007\225" +
    "\017\171\020\205\021\204\022\175\023\174\024\167\025" +
    "\177\026\170\027\206\030\215\031\214\032\213\033\212" +
    "\034\211\035\207\036\201\060\200\061\173\001\002\000" +
    "\004\022\327\001\002\000\004\005\uffe2\001\002\000\010" +
    "\003\147\004\152\011\151\001\002\000\054\003\223\005" +
    "\uffe4\007\225\017\171\020\205\021\204\022\175\023\174" +
    "\024\167\025\177\026\170\027\206\030\215\031\214\032" +
    "\213\033\212\034\211\035\207\036\201\060\200\061\173" +
    "\001\002\000\004\023\333\001\002\000\004\005\uffe1\001" +
    "\002\000\004\005\uffd2\001\002\000\004\004\uffe5\001\002" +
    "\000\010\003\147\004\152\011\151\001\002\000\054\003" +
    "\223\005\uffe4\007\225\017\171\020\205\021\204\022\175" +
    "\023\174\024\167\025\177\026\170\027\206\030\215\031" +
    "\214\032\213\033\212\034\211\035\207\036\201\060\200" +
    "\061\173\001\002\000\004\017\341\001\002\000\004\005" +
    "\uffe3\001\002\000\010\003\147\004\152\011\151\001\002" +
    "\000\004\005\uffcd\001\002\000\004\005\uffd5\001\002\000" +
    "\054\003\223\005\uffe4\007\225\017\171\020\205\021\204" +
    "\022\175\023\174\024\167\025\177\026\170\027\206\030" +
    "\215\031\214\032\213\033\212\034\211\035\207\036\201" +
    "\060\200\061\173\001\002\000\004\026\347\001\002\000" +
    "\004\005\uffcc\001\002\000\010\003\147\004\152\011\151" +
    "\001\002\000\054\003\223\005\uffe4\007\225\017\171\020" +
    "\205\021\204\022\175\023\174\024\167\025\177\026\170" +
    "\027\206\030\215\031\214\032\213\033\212\034\211\035" +
    "\207\036\201\060\200\061\173\001\002\000\004\024\353" +
    "\001\002\000\004\005\uffe0\001\002\000\012\003\114\007" +
    "\356\013\116\016\113\001\002\000\004\004\ufff9\001\002" +
    "\000\004\012\357\001\002\000\004\005\360\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\002\006\003\005\001\001\000\004\003" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\011\024\014\025" +
    "\015\001\001\000\010\004\111\005\105\013\107\001\001" +
    "\000\004\034\023\001\001\000\002\001\001\000\004\025" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\354\001\001\000\004\006\116\001\001" +
    "\000\002\001\001\000\010\023\164\024\014\025\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\126\010" +
    "\122\001\001\000\002\001\001\000\004\007\143\001\001" +
    "\000\010\023\144\024\014\025\015\001\001\000\006\007" +
    "\126\010\141\001\001\000\014\011\134\023\127\024\132" +
    "\025\015\026\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\152\031\147\032\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\126\010\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\171\014\202\015\175\001\001" +
    "\000\010\023\347\024\014\025\015\001\001\000\014\021" +
    "\343\023\341\024\132\025\015\026\342\001\001\000\010" +
    "\023\335\024\014\025\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\327\024\014\025\015\001\001" +
    "\000\010\023\323\024\014\025\015\001\001\000\002\001" +
    "\001\000\014\022\317\023\315\024\132\025\015\026\316" +
    "\001\001\000\010\023\311\024\014\025\015\001\001\000" +
    "\010\023\305\024\014\025\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\272\024\132\025\015\026" +
    "\274\027\273\001\001\000\014\020\266\023\264\024\132" +
    "\025\015\026\265\001\001\000\010\023\260\024\014\025" +
    "\015\001\001\000\010\023\254\024\014\025\015\001\001" +
    "\000\002\001\001\000\010\023\247\024\014\025\015\001" +
    "\001\000\010\023\243\024\014\025\015\001\001\000\010" +
    "\023\237\024\014\025\015\001\001\000\010\023\233\024" +
    "\014\025\015\001\001\000\010\023\215\024\014\025\015" +
    "\001\001\000\010\030\216\031\147\032\145\001\001\000" +
    "\012\012\221\016\220\017\217\033\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\234" +
    "\031\147\032\145\001\001\000\012\012\221\016\235\017" +
    "\217\033\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\240\031\147\032\145\001\001\000\012\012" +
    "\221\016\241\017\217\033\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\244\031\147\032\145\001" +
    "\001\000\012\012\221\016\245\017\217\033\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\250\031" +
    "\147\032\145\001\001\000\012\012\221\016\251\017\217" +
    "\033\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\255\031\147\032\145\001\001" +
    "\000\012\012\221\016\256\017\217\033\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\261\031\147" +
    "\032\145\001\001\000\012\012\221\016\262\017\217\033" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\267\031\147\032\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\221\016\270\017\217\033\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\275\031\147\032\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\221\016\276\017\217\033\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\306\031\147\032\145" +
    "\001\001\000\012\012\221\016\307\017\217\033\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\312" +
    "\031\147\032\145\001\001\000\012\012\221\016\313\017" +
    "\217\033\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\320\031\147\032\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\221\016\321\017\217" +
    "\033\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\324\031\147\032\145\001\001\000\012\012\221" +
    "\016\325\017\217\033\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\330\031\147\032\145\001\001" +
    "\000\012\012\221\016\331\017\217\033\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\336\031\147\032\145\001\001\000" +
    "\012\012\221\016\337\017\217\033\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\344\031\147\032" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\221\016\345\017\217\033\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\350\031\147\032\145" +
    "\001\001\000\012\012\221\016\351\017\217\033\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<Proms> listProms= new ArrayList();
private ArrayList<LabelCC> listLabelCC= new ArrayList();
private String javaScript = "" ;
private LexemaCC lexer;
private int counter = 0;

	  public ParserCC(LexemaCC lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        System.out.print(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    private LabelCC newLayout(Object listPromsUser,Object listSon, ListTypeLabelCC type, String data){
      List<Proms> newlistProms = (ArrayList<Proms>) listPromsUser;
      ArrayList<LabelCC> newlistLabelSon = (ArrayList<LabelCC>) listSon;
      return new LabelCC(newlistProms,newlistLabelSon,type,data);
    }

    private LabelCC newSonLayoutBody(Object listPromsUser,Object listSon, ListTypeLabelCC type, Object data){
      List<Proms> newlistProms = (listPromsUser!=null)? (ArrayList<Proms>) listPromsUser : new ArrayList();
      ArrayList<LabelCC> newlistLabelSon = (listSon!=null)? (ArrayList<LabelCC>) listSon : new ArrayList();
      String newData = (data != null )? data.toString() : "";
      return new LabelCC(newlistProms,newlistLabelSon,type,newData);
    }

    public ArrayList<LabelCC> getListLabelCC(){
        return this.listLabelCC; 
    }

    private void AnalizerScripting(){
      AnalyzerScriptingToJS analizerScripting = new AnalyzerScriptingToJS(lexer.getStringScripting());
      analizerScripting.analyzer();
      if(!analizerScripting.isError()){
        this.javaScript = analizerScripting.getJavaScript();
        AnalyzerScripting analyzer = new AnalyzerScripting(this.javaScript);
        analyzer.analyzer();
        this.listError.addAll(analyzer.getListError());
      }else{
        this.listError.addAll(analizerScripting.getListError());      
      }
    }

    public String getJavaScript(){
      return this.javaScript;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCC$actions {
  private final ParserCC parser;

  /** Constructor */
  CUP$ParserCC$actions(ParserCC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action_part00000000(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCC$result;

      /* select the action based on the action number */
      switch (CUP$ParserCC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = start_val;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCC$parser.done_parsing();
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // etiqueta_inicial ::= OPEN C_CC insertar_proms derivar_etiqueta_inicial 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
 listLabelCC.add(newLayout(listProms,listSon,ListTypeLabelCC.C_CC,""));

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",1, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // derivar_etiqueta_inicial ::= bucle_etiquetas OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)).value;
		
if(node!=null && node instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) node;
  RESULT = new NodeSimpleConverter().getListLabelCC(useNode);
}else{
  RESULT = new ArrayList();
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // derivar_etiqueta_inicial ::= OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;
		RESULT =new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // derivar_etiqueta_inicial ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bucle_etiquetas ::= bucle_etiquetas hijos_etiqueta_inicial 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof LabelCC){
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  LabelCC newLayout = (LabelCC) son;
  newNodoSimple.addNodoSimpleRight(new NodoSimple(newLayout));
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bucle_etiquetas ::= hijos_etiqueta_inicial 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bucle_etiquetas ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // hijos_etiqueta_inicial ::= OPEN etiquetas CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = son;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_etiqueta_inicial",2, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiquetas ::= C_HEAD CLOSE etiquetas_head OPEN BAR C_HEAD 
            {
              Object RESULT =null;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		
if(listSon!=null && listSon instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) listSon;
  RESULT = newLayout(listProms,new NodeSimpleConverter().getListLabelCC(useNode),ListTypeLabelCC.C_HEAD,"");
}else{
  RESULT = newLayout(listProms,listSon,ListTypeLabelCC.C_HEAD,"");
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiquetas ::= C_BODY insertar_proms OPEN derivar_body 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(listSon != null){
  RESULT = newLayout(listProms,listSon,ListTypeLabelCC.C_BODY,"");
}else{
  RESULT = newLayout(listProms,new ArrayList(),ListTypeLabelCC.C_BODY,"");
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiquetas ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiquetas_head ::= etiquetas_head etiqueta_head 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof NodoSimple){
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  NodoSimple nodoSimpleRigh = (NodoSimple) son;
  newNodoSimple.addNodoSimpleRight(nodoSimpleRigh);
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetas_head ::= etiqueta_head 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
  RESULT = son;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // etiqueta_head ::= OPEN etiquetas_head CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta_head ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiquetas_head ::= C_TITLE insertar_proms contenido BAR C_TITLE 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		if(data!=null && listProms!=null){
    RESULT = newLayout(listProms,new ArrayList(),ListTypeLabelCC.C_TITLE,data.toString());
}
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiquetas_head ::= C_LINK auto_cerradura_link 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(listProms==null){
    RESULT = newLayout(new ArrayList(),new ArrayList(),ListTypeLabelCC.C_LINK,"");
}else{
    RESULT = newLayout(listProms,new ArrayList(),ListTypeLabelCC.C_LINK,"");
}
counter++;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // auto_cerradura_link ::= insertar_proms OPEN BAR C_LINK 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // auto_cerradura_link ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // auto_cerradura_link ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // derivar_body ::= bucle_body OPEN BAR C_BODY 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		
if(nodo!=null && nodo instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) nodo;
  RESULT = new NodeSimpleConverter().getListLabelCC(useNode);
}else{
  RESULT = new ArrayList();
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // derivar_body ::= BAR C_BODY 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // derivar_body ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bucle_body ::= bucle_body OPEN etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof LabelCC){
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  LabelCC newLayout = (LabelCC) son;
  newNodoSimple.addNodoSimpleRight(new NodoSimple(newLayout));
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bucle_body ::= etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiquetas_body ::= 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // etiquetas_body ::= C_SPAM insertar_proms contenido derivar_hijos_hijos_body_nada C_SPAM 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_SPAM,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiquetas_body ::= C_SELECT insertar_proms contenido derivar_hijos_hijos_body_nada C_SELECT 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_SELECT,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etiquetas_body ::= C_OPTION insertar_proms contenido derivar_hijos_hijos_body_nada C_OPTION 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_OPTION,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etiquetas_body ::= C_DIV insertar_proms contenido derivar_hijos_hijos_body_nada C_DIV 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_DIV,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiquetas_body ::= C_FORM insertar_proms contenido derivar_hijos_hijos_body_nada C_FORM 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_FORM,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // etiquetas_body ::= C_H1 insertar_proms contenido derivar_hijos_hijos_body_nada C_H1 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H1,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // etiquetas_body ::= C_H2 insertar_proms contenido derivar_hijos_hijos_body_nada C_H2 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H2,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // etiquetas_body ::= C_H3 insertar_proms contenido derivar_hijos_hijos_body_nada C_H3 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H3,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // etiquetas_body ::= C_H4 insertar_proms contenido derivar_hijos_hijos_body_nada C_H4 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H4,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // etiquetas_body ::= C_H5 insertar_proms contenido derivar_hijos_hijos_body_nada C_H5 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H5,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // etiquetas_body ::= C_H6 insertar_proms contenido derivar_hijos_hijos_body_nada C_H6 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_H6,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // etiquetas_body ::= C_P insertar_proms contenido derivar_hijos_hijos_body_nada C_P 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_P,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiquetas_body ::= C_BUTTON insertar_proms contenido derivar_hijos_hijos_body_nada C_BUTTON 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_BUTTON,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // etiquetas_body ::= C_INPUT auto_cerradura_input 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiquetas_body ::= C_BR auto_cerradura_br 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetas_body ::= C_IMG auto_cerradura_img 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas_body ::= C_TEXTAREA auto_cerradura_text_area 
            {
              Object RESULT =null;
		int returnarEStoleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int returnarEStoright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object returnarESto = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = returnarESto;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetas_body ::= C_SCRIPTING OUTPUT_C_SCRIPTING 
            {
              Object RESULT =null;
		
RESULT = newLayout(new ArrayList(),new ArrayList(),ListTypeLabelCC.C_SCRIPTING,lexer.getStringScripting());
AnalizerScripting();
lexer.setStringScripting("");

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // auto_cerradura_text_area ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_TEXTAREA,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_text_area",21, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // auto_cerradura_text_area ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_TEXTAREA 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_TEXTAREA,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_text_area",21, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // auto_cerradura_input ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_INPUT,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // auto_cerradura_input ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_INPUT 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_INPUT,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // auto_cerradura_br ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_BR,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // auto_cerradura_br ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_BR 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_BR,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // auto_cerradura_img ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = newSonLayoutBody(listProms,null,ListTypeLabelCC.C_IMG,null);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",16, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // auto_cerradura_img ::= insertar_proms contenido derivar_hijos_hijos_body_nada C_IMG 
            {
              Object RESULT =null;
		int listPromsleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int listPromsright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object listProms = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		int listSonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int listSonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object listSon = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = newSonLayoutBody(listProms,listSon,ListTypeLabelCC.C_IMG,data);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",16, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // derivar_hijos_hijos_body_nada ::= BAR 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body_nada",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // derivar_hijos_hijos_body_nada ::= hijos_body_hijos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body_nada",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // hijos_body_hijos ::= derivar_hijos_hijos_body OPEN BAR 
            {
              Object RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)).value;
		
if(node!=null && node instanceof NodoSimple){
  NodoSimple useNode = (NodoSimple) node;
  RESULT = new NodeSimpleConverter().getListLabelCC(useNode);
}else{
  RESULT = new ArrayList();
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_body_hijos",25, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // derivar_hijos_hijos_body ::= derivar_hijos_hijos_body OPEN etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int firstChildleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).left;
		int firstChildright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).right;
		Object firstChild = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)).value;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
if(firstChild!=null && firstChild instanceof NodoSimple && son!=null && son instanceof LabelCC )
{
  NodoSimple newNodoSimple = (NodoSimple) firstChild;
  LabelCC newLayout = (LabelCC) son;
  newNodoSimple.addNodoSimpleRight(new NodoSimple(newLayout));
  RESULT = newNodoSimple;
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // derivar_hijos_hijos_body ::= etiquetas_body CLOSE 
            {
              Object RESULT =null;
		int sonleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int sonright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object son = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
  if(son!=null && son instanceof LabelCC){
    LabelCC newLayout = (LabelCC) son;
    RESULT = new NodoSimple(newLayout);
  }else {
    RESULT = son;
  }

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // derivar_hijos_hijos_body ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // insertar_promos_auto_cerrado ::= BAR 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_promos_auto_cerrado",20, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // insertar_promos_auto_cerrado ::= bucle_proms BAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		
    RESULT = listProms;
    listProms = new ArrayList();

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_promos_auto_cerrado",20, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // insertar_proms ::= CLOSE 
            {
              Object RESULT =null;
		RESULT = new ArrayList();
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_proms",17, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // insertar_proms ::= bucle_proms CLOSE 
            {
              Object RESULT =null;
		
    RESULT = listProms;
    listProms = new ArrayList();

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_proms",17, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bucle_proms ::= bucle_proms proms 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(data!=null && data instanceof Proms){
    Proms newProms = (Proms) data;
    listProms.add(newProms);
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_proms",18, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bucle_proms ::= proms 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
if(data!=null && data instanceof Proms){
    Proms newProms = (Proms) data;
    listProms.add(newProms);
}

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_proms",18, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // proms ::= BRACKETS_OPEN prom BRACKETS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prom ::= HREF EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.HREF);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prom ::= BACKGROUND EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.BACKGROUND);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prom ::= COLOR EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.COLOR);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prom ::= FONT_SIZE EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.FONT_SIZE);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prom ::= FONT_FAMILY EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.FONT_FAMILY);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prom ::= FONT_ALIG EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.FONT_ALIG);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prom ::= TYPE EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.TYPE);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prom ::= ID EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ID);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prom ::= NAME EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.NAME);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prom ::= COLS EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.COLS);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prom ::= ROWS EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ROWS);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prom ::= CLASS EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.CLASS);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prom ::= SRC EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.SRC);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prom ::= WIDTH EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.WIDTH);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prom ::= HEIGHT EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.HEIGHT);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // prom ::= ALT EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ALT);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prom ::= ONCLICK EQUAL STRING_TOKEN 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT = new Proms(data.toString(),ListTypeProms.ONCLICK);
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("prom",26, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // contenido ::= bucle_contenido OPEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT=a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // contenido ::= OPEN 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bucle_contenido ::= bucle_contenido dato_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		
RESULT=a.toString()+lexer.getSpace()+b.toString();

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_contenido",23, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bucle_contenido ::= dato_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT=a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_contenido",23, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dato_contenido ::= CONTENIDO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCC$stack.peek()).value;
		RESULT=a;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("dato_contenido",24, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dato_contenido ::= error 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("dato_contenido",24, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
              return CUP$ParserCC$do_action_part00000000(
                               CUP$ParserCC$act_num,
                               CUP$ParserCC$parser,
                               CUP$ParserCC$stack,
                               CUP$ParserCC$top);
    }
}

}
