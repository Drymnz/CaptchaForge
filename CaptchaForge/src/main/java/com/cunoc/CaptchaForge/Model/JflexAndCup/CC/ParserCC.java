
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.CC;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymCC.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\006\000\002\005\007\000\002\005\006" +
    "\000\002\014\004\000\002\014\003\000\002\004\005\000" +
    "\002\006\010\000\002\006\006\000\002\010\004\000\002" +
    "\010\003\000\002\007\011\000\002\007\010\000\002\007" +
    "\005\000\002\011\004\000\002\012\004\000\002\012\006" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\013\007" +
    "\000\002\013\004\000\002\013\005\000\002\013\005\000" +
    "\002\017\003\000\002\017\006\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\021\005\000\002\015" +
    "\003\000\002\015\006\000\002\016\003\000\002\016\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\003\004\004\005\001\002\000\004\004" +
    "\005\001\002\000\004\020\011\001\002\000\004\002\000" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\005\012\001\002\000\004\004\015\001\002" +
    "\000\004\002\ufffe\001\002\000\004\004\224\001\002\000" +
    "\010\016\020\021\021\024\017\001\002\000\004\004\ufffa" +
    "\001\002\000\004\005\055\001\002\000\004\020\053\001" +
    "\002\000\004\005\024\001\002\000\004\005\023\001\002" +
    "\000\004\004\ufff9\001\002\000\004\004\027\001\002\000" +
    "\006\005\045\016\044\001\002\000\004\004\040\001\002" +
    "\000\006\022\031\023\032\001\002\000\004\004\ufff5\001" +
    "\002\000\004\005\033\001\002\000\006\005\ufff1\016\ufff1" +
    "\001\002\000\004\004\034\001\002\000\004\016\035\001" +
    "\002\000\004\022\036\001\002\000\004\005\037\001\002" +
    "\000\004\004\ufff4\001\002\000\010\016\042\022\031\023" +
    "\032\001\002\000\004\004\ufff6\001\002\000\004\021\043" +
    "\001\002\000\004\005\ufff8\001\002\000\004\005\052\001" +
    "\002\000\004\004\046\001\002\000\004\016\047\001\002" +
    "\000\004\023\050\001\002\000\004\005\051\001\002\000" +
    "\004\004\ufff3\001\002\000\004\004\ufff2\001\002\000\004" +
    "\005\054\001\002\000\004\002\ufffc\001\002\000\004\004" +
    "\056\001\002\000\044\016\074\025\061\026\071\027\070" +
    "\030\064\031\063\032\057\033\066\034\060\035\073\036" +
    "\101\037\100\040\077\041\076\042\075\043\072\044\067" +
    "\001\002\000\004\005\220\001\002\000\004\005\212\001" +
    "\002\000\004\005\206\001\002\000\004\005\203\001\002" +
    "\000\004\005\177\001\002\000\004\005\173\001\002\000" +
    "\004\005\ufff7\001\002\000\004\005\165\001\002\000\004" +
    "\005\161\001\002\000\004\005\155\001\002\000\006\005" +
    "\151\016\147\001\002\000\004\005\143\001\002\000\004" +
    "\005\137\001\002\000\004\024\136\001\002\000\004\005" +
    "\132\001\002\000\004\005\126\001\002\000\004\005\122" +
    "\001\002\000\004\005\116\001\002\000\004\005\102\001" +
    "\002\000\004\004\103\001\002\000\044\016\106\025\061" +
    "\026\071\027\070\030\064\031\063\032\057\033\066\034" +
    "\060\035\073\036\101\037\100\040\077\041\076\042\075" +
    "\043\072\044\067\001\002\000\004\005\111\001\002\000" +
    "\004\036\110\001\002\000\042\016\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\001\002\000\042\016\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002\000" +
    "\004\005\uffe8\001\002\000\044\004\112\016\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\001\002\000\044\016\106\025\061\026\071\027" +
    "\070\030\064\031\063\032\057\033\066\034\060\035\073" +
    "\036\101\037\100\040\077\041\076\042\075\043\072\044" +
    "\067\001\002\000\004\005\115\001\002\000\042\016\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\001\002\000\042\016\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\001\002\000\004\004\117\001\002\000\044\016\106" +
    "\025\061\026\071\027\070\030\064\031\063\032\057\033" +
    "\066\034\060\035\073\036\101\037\100\040\077\041\076" +
    "\042\075\043\072\044\067\001\002\000\004\037\121\001" +
    "\002\000\004\005\uffe7\001\002\000\004\004\123\001\002" +
    "\000\044\016\106\025\061\026\071\027\070\030\064\031" +
    "\063\032\057\033\066\034\060\035\073\036\101\037\100" +
    "\040\077\041\076\042\075\043\072\044\067\001\002\000" +
    "\004\040\125\001\002\000\004\005\uffe6\001\002\000\004" +
    "\004\127\001\002\000\044\016\106\025\061\026\071\027" +
    "\070\030\064\031\063\032\057\033\066\034\060\035\073" +
    "\036\101\037\100\040\077\041\076\042\075\043\072\044" +
    "\067\001\002\000\004\041\131\001\002\000\004\005\uffe5" +
    "\001\002\000\004\004\133\001\002\000\044\016\106\025" +
    "\061\026\071\027\070\030\064\031\063\032\057\033\066" +
    "\034\060\035\073\036\101\037\100\040\077\041\076\042" +
    "\075\043\072\044\067\001\002\000\004\042\135\001\002" +
    "\000\004\005\uffe4\001\002\000\004\005\ufff0\001\002\000" +
    "\044\016\106\025\061\026\071\027\070\030\064\031\063" +
    "\032\057\033\066\034\060\035\073\036\101\037\100\040" +
    "\077\041\076\042\075\043\072\044\067\001\002\000\004" +
    "\016\141\001\002\000\004\035\142\001\002\000\004\005" +
    "\uffe9\001\002\000\004\004\144\001\002\000\044\016\106" +
    "\025\061\026\071\027\070\030\064\031\063\032\057\033" +
    "\066\034\060\035\073\036\101\037\100\040\077\041\076" +
    "\042\075\043\072\044\067\001\002\000\004\043\146\001" +
    "\002\000\004\005\uffe3\001\002\000\004\005\uffde\001\002" +
    "\000\004\005\uffe1\001\002\000\004\004\152\001\002\000" +
    "\044\016\106\025\061\026\071\027\070\030\064\031\063" +
    "\032\057\033\066\034\060\035\073\036\101\037\100\040" +
    "\077\041\076\042\075\043\072\044\067\001\002\000\004" +
    "\026\154\001\002\000\004\005\uffdd\001\002\000\004\004" +
    "\156\001\002\000\044\016\106\025\061\026\071\027\070" +
    "\030\064\031\063\032\057\033\066\034\060\035\073\036" +
    "\101\037\100\040\077\041\076\042\075\043\072\044\067" +
    "\001\002\000\004\027\160\001\002\000\004\005\uffed\001" +
    "\002\000\004\004\162\001\002\000\044\016\106\025\061" +
    "\026\071\027\070\030\064\031\063\032\057\033\066\034" +
    "\060\035\073\036\101\037\100\040\077\041\076\042\075" +
    "\043\072\044\067\001\002\000\004\044\164\001\002\000" +
    "\004\005\uffe2\001\002\000\006\004\167\016\166\001\002" +
    "\000\004\005\uffda\001\002\000\044\016\106\025\061\026" +
    "\071\027\070\030\064\031\063\032\057\033\066\034\060" +
    "\035\073\036\101\037\100\040\077\041\076\042\075\043" +
    "\072\044\067\001\002\000\004\005\uffdf\001\002\000\004" +
    "\033\172\001\002\000\004\005\uffd9\001\002\000\004\004" +
    "\174\001\002\000\044\016\106\025\061\026\071\027\070" +
    "\030\064\031\063\032\057\033\066\034\060\035\073\036" +
    "\101\037\100\040\077\041\076\042\075\043\072\044\067" +
    "\001\002\000\004\030\176\001\002\000\004\005\uffec\001" +
    "\002\000\004\004\200\001\002\000\044\016\106\025\061" +
    "\026\071\027\070\030\064\031\063\032\057\033\066\034" +
    "\060\035\073\036\101\037\100\040\077\041\076\042\075" +
    "\043\072\044\067\001\002\000\004\031\202\001\002\000" +
    "\004\005\uffeb\001\002\000\004\004\204\001\002\000\044" +
    "\016\074\025\061\026\071\027\070\030\064\031\063\032" +
    "\057\033\066\034\060\035\073\036\101\037\100\040\077" +
    "\041\076\042\075\043\072\044\067\001\002\000\004\005" +
    "\uffef\001\002\000\004\004\207\001\002\000\044\016\106" +
    "\025\061\026\071\027\070\030\064\031\063\032\057\033" +
    "\066\034\060\035\073\036\101\037\100\040\077\041\076" +
    "\042\075\043\072\044\067\001\002\000\004\025\211\001" +
    "\002\000\004\005\uffee\001\002\000\006\004\214\016\213" +
    "\001\002\000\004\005\uffdc\001\002\000\044\016\106\025" +
    "\061\026\071\027\070\030\064\031\063\032\057\033\066" +
    "\034\060\035\073\036\101\037\100\040\077\041\076\042" +
    "\075\043\072\044\067\001\002\000\004\005\uffe0\001\002" +
    "\000\004\034\217\001\002\000\004\005\uffdb\001\002\000" +
    "\004\004\221\001\002\000\044\016\106\025\061\026\071" +
    "\027\070\030\064\031\063\032\057\033\066\034\060\035" +
    "\073\036\101\037\100\040\077\041\076\042\075\043\072" +
    "\044\067\001\002\000\004\032\223\001\002\000\004\005" +
    "\uffea\001\002\000\010\016\226\021\021\024\017\001\002" +
    "\000\004\004\ufffb\001\002\000\004\020\227\001\002\000" +
    "\004\005\230\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\002\006\003\005\001\001\000\004\003" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\015\005\012\014\013\001\001\000\002\001\001\000\004" +
    "\004\224\001\001\000\004\006\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\027\010" +
    "\025\011\024\001\001\000\002\001\001\000\006\007\040" +
    "\011\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\064\013\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\103\015\104\016\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\112\016\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\103\015\117\016\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\103\015\123\016" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\103\015\127\016\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\103\015\133\016\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\103\015\137" +
    "\016\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\103\015\144" +
    "\016\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\103\015\152\016\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\103\015\156" +
    "\016\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\103\015\162\016\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\167\001" +
    "\001\000\002\001\001\000\010\013\103\015\170\016\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\103\015\174\016\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\103\015\200\016\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\204\013\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\103\015\207\016\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\214\001\001\000\002" +
    "\001\001\000\010\013\103\015\215\016\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\103\015\221\016\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();


	  public ParserCC(LexemaCC lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCC$actions {
  private final ParserCC parser;

  /** Constructor */
  CUP$ParserCC$actions(ParserCC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action_part00000000(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCC$result;

      /* select the action based on the action number */
      switch (CUP$ParserCC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = start_val;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCC$parser.done_parsing();
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etiqueta_inicial ::= OPEN C_CC CLOSE derivar_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",1, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // derivar_etiqueta_inicial ::= bucle_etiquetas OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // derivar_etiqueta_inicial ::= OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bucle_etiquetas ::= bucle_etiquetas hijos_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bucle_etiquetas ::= hijos_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // hijos_etiqueta_inicial ::= OPEN etiquetas CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_etiqueta_inicial",2, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiquetas ::= C_HEAD CLOSE etiquetas_head OPEN BAR C_HEAD 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiquetas ::= C_BODY CLOSE OPEN hijos_body 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiquetas_head ::= etiquetas_head etiqueta_head 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiquetas_head ::= etiqueta_head 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiqueta_head ::= OPEN C_TITLE CLOSE OPEN BAR C_TITLE CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiqueta_head ::= derivando_link CLOSE OPEN BAR C_LINK CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiqueta_head ::= derivando_link BAR CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // derivando_link ::= OPEN C_LINK 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivando_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // hijos_body ::= BAR C_BODY 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // hijos_body ::= etiquetas_body CLOSE OPEN hijos_body 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiquetas_body ::= C_SPAM CLOSE OPEN hijos_etiqueta_otra C_SPAM 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiquetas_body ::= C_TEXTAREA CLOSE OPEN hijos_etiqueta_otra C_TEXTAREA 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiquetas_body ::= C_SELECT CLOSE OPEN hijos_etiqueta_otra C_SELECT 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiquetas_body ::= C_OPTION CLOSE OPEN hijos_etiqueta_otra C_OPTION 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_body ::= C_DIV CLOSE OPEN hijos_etiqueta_otra C_DIV 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetas_body ::= C_BUTTON CLOSE hijos_etiqueta_otra BAR C_BUTTON 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetas_body ::= C_H1 CLOSE OPEN hijos_etiqueta_otra C_H1 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // etiquetas_body ::= C_H2 CLOSE OPEN hijos_etiqueta_otra C_H2 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // etiquetas_body ::= C_H3 CLOSE OPEN hijos_etiqueta_otra C_H3 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // etiquetas_body ::= C_H4 CLOSE OPEN hijos_etiqueta_otra C_H4 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiquetas_body ::= C_H5 CLOSE OPEN hijos_etiqueta_otra C_H5 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // etiquetas_body ::= C_H6 CLOSE OPEN hijos_etiqueta_otra C_H6 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiquetas_body ::= C_P CLOSE OPEN hijos_etiqueta_otra C_P 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etiquetas_body ::= C_INPUT auto_cerradura_input 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etiquetas_body ::= C_BR CLOSE auto_cerradura_br 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiquetas_body ::= C_IMG CLOSE auto_cerradura_img 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // auto_cerradura_input ::= BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // auto_cerradura_input ::= CLOSE OPEN hijos_etiqueta_otra C_INPUT 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // auto_cerradura_br ::= BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // auto_cerradura_br ::= OPEN hijos_etiqueta_otra C_BR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // auto_cerradura_img ::= BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // auto_cerradura_img ::= OPEN hijos_etiqueta_otra C_IMG 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // hijos_etiqueta_otra ::= hermano_etiqueta 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_etiqueta_otra",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // hijos_etiqueta_otra ::= etiquetas_body CLOSE OPEN hermano_etiqueta 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_etiqueta_otra",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // hermano_etiqueta ::= BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hermano_etiqueta",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // hermano_etiqueta ::= etiquetas_body CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hermano_etiqueta",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
              return CUP$ParserCC$do_action_part00000000(
                               CUP$ParserCC$act_num,
                               CUP$ParserCC$parser,
                               CUP$ParserCC$stack,
                               CUP$ParserCC$top);
    }
}

}
