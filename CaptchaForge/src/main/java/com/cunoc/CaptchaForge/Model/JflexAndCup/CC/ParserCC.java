
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.CC;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymCC.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\006\000\002\005\007\000\002\005\006" +
    "\000\002\013\004\000\002\013\003\000\002\004\005\000" +
    "\002\010\004\000\002\010\003\000\002\007\011\000\002" +
    "\007\010\000\002\007\005\000\002\011\004\000\002\006" +
    "\010\000\002\006\006\000\002\015\006\000\002\015\004" +
    "\000\002\014\006\000\002\014\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\006\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\016\005\000\002" +
    "\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\006\003\004\004\005\001\002\000\004\004" +
    "\005\001\002\000\004\020\011\001\002\000\004\002\000" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\005\012\001\002\000\004\004\015\001\002" +
    "\000\004\002\ufffe\001\002\000\004\004\162\001\002\000" +
    "\010\016\020\021\021\024\017\001\002\000\004\004\ufffa" +
    "\001\002\000\004\005\055\001\002\000\004\020\053\001" +
    "\002\000\004\005\024\001\002\000\004\005\023\001\002" +
    "\000\004\004\ufff9\001\002\000\004\004\027\001\002\000" +
    "\006\005\045\016\044\001\002\000\004\004\040\001\002" +
    "\000\006\022\031\023\032\001\002\000\004\004\ufff7\001" +
    "\002\000\004\005\033\001\002\000\006\005\ufff3\016\ufff3" +
    "\001\002\000\004\004\034\001\002\000\004\016\035\001" +
    "\002\000\004\022\036\001\002\000\004\005\037\001\002" +
    "\000\004\004\ufff6\001\002\000\010\016\042\022\031\023" +
    "\032\001\002\000\004\004\ufff8\001\002\000\004\021\043" +
    "\001\002\000\004\005\ufff2\001\002\000\004\005\052\001" +
    "\002\000\004\004\046\001\002\000\004\016\047\001\002" +
    "\000\004\023\050\001\002\000\004\005\051\001\002\000" +
    "\004\004\ufff5\001\002\000\004\004\ufff4\001\002\000\004" +
    "\005\054\001\002\000\004\002\ufffc\001\002\000\004\004" +
    "\056\001\002\000\044\016\075\025\061\026\072\027\070" +
    "\030\064\031\063\032\057\033\066\034\060\035\074\036" +
    "\102\037\101\040\100\041\077\042\076\043\073\044\067" +
    "\001\002\000\004\005\104\001\002\000\004\005\104\001" +
    "\002\000\004\005\104\001\002\000\004\005\153\001\002" +
    "\000\004\005\104\001\002\000\004\005\104\001\002\000" +
    "\004\005\ufff1\001\002\000\004\005\104\001\002\000\004" +
    "\005\104\001\002\000\004\005\104\001\002\000\004\004" +
    "\136\001\002\000\004\005\104\001\002\000\004\005\104" +
    "\001\002\000\004\005\104\001\002\000\004\024\126\001" +
    "\002\000\004\005\104\001\002\000\004\005\104\001\002" +
    "\000\004\005\104\001\002\000\004\005\104\001\002\000" +
    "\004\005\104\001\002\000\004\036\115\001\002\000\004" +
    "\004\105\001\002\000\044\016\110\025\061\026\072\027" +
    "\070\030\064\031\063\032\057\033\066\034\060\035\074" +
    "\036\102\037\101\040\100\041\077\042\076\043\073\044" +
    "\067\001\002\000\042\016\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\001\002" +
    "\000\004\004\111\001\002\000\042\016\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\001\002\000\044\016\113\025\061\026\072\027\070" +
    "\030\064\031\063\032\057\033\066\034\060\035\074\036" +
    "\102\037\101\040\100\041\077\042\076\043\073\044\067" +
    "\001\002\000\004\005\114\001\002\000\042\016\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\001\002\000\004\004\uffee\001\002\000\004" +
    "\005\uffe6\001\002\000\004\037\117\001\002\000\004\005" +
    "\uffe5\001\002\000\004\040\121\001\002\000\004\005\uffe4" +
    "\001\002\000\004\041\123\001\002\000\004\005\uffe3\001" +
    "\002\000\004\042\125\001\002\000\004\005\uffe2\001\002" +
    "\000\004\005\uffef\001\002\000\004\016\130\001\002\000" +
    "\004\035\131\001\002\000\004\005\uffe7\001\002\000\004" +
    "\043\133\001\002\000\004\005\uffe1\001\002\000\004\026" +
    "\135\001\002\000\004\005\uffdf\001\002\000\044\016\137" +
    "\025\061\026\072\027\070\030\064\031\063\032\057\033" +
    "\066\034\060\035\074\036\102\037\101\040\100\041\077" +
    "\042\076\043\073\044\067\001\002\000\004\024\140\001" +
    "\002\000\004\005\ufff0\001\002\000\004\027\142\001\002" +
    "\000\004\005\uffeb\001\002\000\004\044\144\001\002\000" +
    "\004\005\uffe0\001\002\000\004\033\146\001\002\000\004" +
    "\005\uffdd\001\002\000\004\030\150\001\002\000\004\005" +
    "\uffea\001\002\000\004\031\152\001\002\000\004\005\uffe9" +
    "\001\002\000\004\004\uffed\001\002\000\004\025\155\001" +
    "\002\000\004\005\uffec\001\002\000\004\034\157\001\002" +
    "\000\004\005\uffde\001\002\000\004\032\161\001\002\000" +
    "\004\005\uffe8\001\002\000\010\016\164\021\021\024\017" +
    "\001\002\000\004\004\ufffb\001\002\000\004\020\165\001" +
    "\002\000\004\005\166\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\006\002\006\003\005\001\001\000\004\003" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\015\005\012\013\013\001\001\000\002\001\001\000\004" +
    "\004\162\001\001\000\004\006\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\027\010" +
    "\025\011\024\001\001\000\002\001\001\000\006\007\040" +
    "\011\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\061\014\070\015\064" +
    "\001\001\000\004\016\157\001\001\000\004\016\155\001" +
    "\001\000\004\016\153\001\001\000\002\001\001\000\004" +
    "\016\150\001\001\000\004\016\146\001\001\000\002\001" +
    "\001\000\004\016\144\001\001\000\004\016\142\001\001" +
    "\000\004\016\140\001\001\000\002\001\001\000\004\016" +
    "\133\001\001\000\004\016\131\001\001\000\004\016\126" +
    "\001\001\000\002\001\001\000\004\016\123\001\001\000" +
    "\004\016\121\001\001\000\004\016\117\001\001\000\004" +
    "\016\115\001\001\000\004\016\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\061\014\106\017\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();


	  public ParserCC(LexemaCC lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCC$actions {
  private final ParserCC parser;

  /** Constructor */
  CUP$ParserCC$actions(ParserCC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action_part00000000(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCC$result;

      /* select the action based on the action number */
      switch (CUP$ParserCC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = start_val;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCC$parser.done_parsing();
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etiqueta_inicial ::= OPEN C_CC CLOSE derivar_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",1, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // derivar_etiqueta_inicial ::= bucle_etiquetas OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // derivar_etiqueta_inicial ::= OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bucle_etiquetas ::= bucle_etiquetas hijos_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bucle_etiquetas ::= hijos_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // hijos_etiqueta_inicial ::= OPEN etiquetas CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_etiqueta_inicial",2, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiquetas_head ::= etiquetas_head etiqueta_head 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiquetas_head ::= etiqueta_head 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiqueta_head ::= OPEN C_TITLE CLOSE OPEN BAR C_TITLE CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiqueta_head ::= derivando_link CLOSE OPEN BAR C_LINK CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiqueta_head ::= derivando_link BAR CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // derivando_link ::= OPEN C_LINK 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivando_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiquetas ::= C_HEAD CLOSE etiquetas_head OPEN BAR C_HEAD 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetas ::= C_BODY CLOSE OPEN derivar_body 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // derivar_body ::= bucle_body OPEN BAR C_BODY 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // derivar_body ::= BAR C_BODY 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bucle_body ::= bucle_body OPEN etiquetas_body CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bucle_body ::= etiquetas_body CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiquetas_body ::= C_SPAM hijos_hijos_body C_SPAM 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiquetas_body ::= C_TEXTAREA hijos_hijos_body C_TEXTAREA 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_body ::= C_SELECT hijos_hijos_body C_SELECT 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetas_body ::= C_OPTION hijos_hijos_body C_OPTION 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetas_body ::= C_DIV hijos_hijos_body C_DIV 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // etiquetas_body ::= C_BUTTON hijos_hijos_body BAR C_BUTTON 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // etiquetas_body ::= C_H1 hijos_hijos_body C_H1 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // etiquetas_body ::= C_H2 hijos_hijos_body C_H2 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiquetas_body ::= C_H3 hijos_hijos_body C_H3 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // etiquetas_body ::= C_H4 hijos_hijos_body C_H4 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiquetas_body ::= C_H5 hijos_hijos_body C_H5 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etiquetas_body ::= C_H6 hijos_hijos_body C_H6 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etiquetas_body ::= C_P hijos_hijos_body C_P 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiquetas_body ::= C_INPUT hijos_hijos_body C_INPUT 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // etiquetas_body ::= C_BR hijos_hijos_body C_BR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // etiquetas_body ::= C_IMG hijos_hijos_body C_IMG 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // hijos_hijos_body ::= CLOSE OPEN derivar_hijos_hijos_body 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_hijos_body",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // derivar_hijos_hijos_body ::= BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // derivar_hijos_hijos_body ::= bucle_body OPEN BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
              return CUP$ParserCC$do_action_part00000000(
                               CUP$ParserCC$act_num,
                               CUP$ParserCC$parser,
                               CUP$ParserCC$stack,
                               CUP$ParserCC$top);
    }
}

}
