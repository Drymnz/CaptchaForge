
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.CaptchaForge.Model.JflexAndCup.CC;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.CaptchaForge.Model.Analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.ReportErrorInterpreter;
import com.cunoc.CaptchaForge.Model.Analyzer.Token;
import com.cunoc.CaptchaForge.Model.JflexAndCup.Report.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymCC.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\006\000\002\005\007\000\002\005\006" +
    "\000\002\013\004\000\002\013\003\000\002\004\005\000" +
    "\002\010\004\000\002\010\003\000\002\007\011\000\002" +
    "\007\010\000\002\007\005\000\002\011\004\000\002\006" +
    "\010\000\002\006\006\000\002\015\006\000\002\015\004" +
    "\000\002\014\006\000\002\014\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\027\003\000\002\027\004\000\002\020\003\000\002\020" +
    "\004\000\002\021\003\000\002\021\004\000\002\022\003" +
    "\000\002\022\004\000\002\016\005\000\002\017\003\000" +
    "\002\017\005\000\002\026\003\000\002\026\004\000\002" +
    "\023\003\000\002\023\004\000\002\024\004\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\030\004\000\002\030\003\000" +
    "\002\031\004\000\002\031\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\003\004\004\005\001\002\000\004\004" +
    "\005\001\002\000\004\020\011\001\002\000\004\002\000" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\046\005\016\045\013\046\035\047\021\050\034" +
    "\051\022\052\036\053\026\054\024\055\023\056\033\057" +
    "\032\060\014\061\025\062\020\063\031\064\012\065\030" +
    "\001\002\000\004\013\301\001\002\000\004\013\277\001" +
    "\002\000\004\013\275\001\002\000\050\005\uffcb\016\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000\006\004" +
    "\uffce\067\uffce\001\002\000\004\004\077\001\002\000\004" +
    "\013\073\001\002\000\004\013\071\001\002\000\004\013" +
    "\067\001\002\000\004\013\065\001\002\000\004\013\063" +
    "\001\002\000\004\013\061\001\002\000\004\013\057\001" +
    "\002\000\046\005\055\045\013\046\035\047\021\050\034" +
    "\051\022\052\036\053\026\054\024\055\023\056\033\057" +
    "\032\060\014\061\025\062\020\063\031\064\012\065\030" +
    "\001\002\000\004\013\053\001\002\000\004\013\051\001" +
    "\002\000\004\013\047\001\002\000\004\013\045\001\002" +
    "\000\004\013\043\001\002\000\004\013\041\001\002\000" +
    "\004\013\037\001\002\000\004\017\040\001\002\000\050" +
    "\005\uffc5\016\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001" +
    "\002\000\004\017\042\001\002\000\050\005\uffc9\016\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\001\002\000\004\017" +
    "\044\001\002\000\050\005\uffc7\016\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\001\002\000\004\017\046\001\002\000" +
    "\050\005\uffc1\016\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\001\002\000\004\017\050\001\002\000\050\005\uffc0\016" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002\000\004" +
    "\017\052\001\002\000\050\005\uffbc\016\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\001\002\000\004\017\054\001\002" +
    "\000\050\005\uffba\016\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\001\002\000\006\004\uffcd\067\uffcd\001\002\000\050" +
    "\005\uffcc\016\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\001" +
    "\002\000\004\017\060\001\002\000\050\005\uffc4\016\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000\004\017" +
    "\062\001\002\000\050\005\uffbe\016\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\001\002\000\004\017\064\001\002\000" +
    "\050\005\uffc3\016\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\001\002\000\004\017\066\001\002\000\050\005\uffc2\016" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000\004" +
    "\017\070\001\002\000\050\005\uffc6\016\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\001\002\000\004\017\072\001\002" +
    "\000\050\005\uffc8\016\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\001\002\000\004\017\074\001\002\000\050\005\uffbd" +
    "\016\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\004\002\ufffe\001\002\000\004\004\270\001\002\000\010" +
    "\016\102\021\103\024\101\001\002\000\004\004\ufffa\001" +
    "\002\000\046\005\016\045\013\046\035\047\021\050\034" +
    "\051\022\052\036\053\026\054\024\055\023\056\033\057" +
    "\032\060\014\061\025\062\020\063\031\064\012\065\030" +
    "\001\002\000\004\020\146\001\002\000\004\005\106\001" +
    "\002\000\004\005\105\001\002\000\004\004\ufff9\001\002" +
    "\000\004\004\111\001\002\000\050\005\016\016\137\045" +
    "\013\046\035\047\021\050\034\051\022\052\036\053\026" +
    "\054\024\055\023\056\033\057\032\060\014\061\025\062" +
    "\020\063\031\064\012\065\030\001\002\000\004\004\130" +
    "\001\002\000\006\022\113\023\114\001\002\000\004\004" +
    "\ufff7\001\002\000\046\005\016\045\013\046\035\047\021" +
    "\050\034\051\022\052\036\053\026\054\024\055\023\056" +
    "\033\057\032\060\014\061\025\062\020\063\031\064\012" +
    "\065\030\001\002\000\050\005\ufff3\016\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\001\002\000\006\004\121\067\120" +
    "\001\002\000\006\004\uffb6\067\uffb6\001\002\000\006\004" +
    "\127\067\120\001\002\000\006\004\uffb5\067\uffb5\001\002" +
    "\000\110\016\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\004\016\123" +
    "\001\002\000\004\022\124\001\002\000\004\005\125\001" +
    "\002\000\004\004\ufff6\001\002\000\006\004\uffb7\067\uffb7" +
    "\001\002\000\110\016\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000\010" +
    "\016\132\022\113\023\114\001\002\000\004\004\ufff8\001" +
    "\002\000\004\021\133\001\002\000\004\005\ufff2\001\002" +
    "\000\004\004\142\001\002\000\004\005\141\001\002\000" +
    "\050\005\055\016\140\045\013\046\035\047\021\050\034" +
    "\051\022\052\036\053\026\054\024\055\023\056\033\057" +
    "\032\060\014\061\025\062\020\063\031\064\012\065\030" +
    "\001\002\000\046\005\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\066" +
    "\uffd0\001\002\000\046\005\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\066\uffcf\001\002\000\004\004\ufff4\001\002\000\004\016" +
    "\143\001\002\000\004\023\144\001\002\000\004\005\145" +
    "\001\002\000\004\004\ufff5\001\002\000\004\005\147\001" +
    "\002\000\004\002\ufffc\001\002\000\004\004\151\001\002" +
    "\000\046\016\171\025\154\026\166\027\164\030\157\031" +
    "\156\032\152\033\161\034\153\035\167\036\176\037\175" +
    "\040\174\041\173\042\172\043\170\044\163\066\162\001" +
    "\002\000\046\005\016\045\013\046\035\047\021\050\034" +
    "\051\022\052\036\053\026\054\024\055\023\056\033\057" +
    "\032\060\014\061\025\062\020\063\031\064\012\065\030" +
    "\001\002\000\050\005\016\016\137\045\013\046\035\047" +
    "\021\050\034\051\022\052\036\053\026\054\024\055\023" +
    "\056\033\057\032\060\014\061\025\062\020\063\031\064" +
    "\012\065\030\001\002\000\046\005\016\045\013\046\035" +
    "\047\021\050\034\051\022\052\036\053\026\054\024\055" +
    "\023\056\033\057\032\060\014\061\025\062\020\063\031" +
    "\064\012\065\030\001\002\000\004\005\257\001\002\000" +
    "\046\005\016\045\013\046\035\047\021\050\034\051\022" +
    "\052\036\053\026\054\024\055\023\056\033\057\032\060" +
    "\014\061\025\062\020\063\031\064\012\065\030\001\002" +
    "\000\046\005\016\045\013\046\035\047\021\050\034\051" +
    "\022\052\036\053\026\054\024\055\023\056\033\057\032" +
    "\060\014\061\025\062\020\063\031\064\012\065\030\001" +
    "\002\000\004\005\ufff1\001\002\000\050\005\016\016\137" +
    "\045\013\046\035\047\021\050\034\051\022\052\036\053" +
    "\026\054\024\055\023\056\033\057\032\060\014\061\025" +
    "\062\020\063\031\064\012\065\030\001\002\000\046\005" +
    "\016\045\013\046\035\047\021\050\034\051\022\052\036" +
    "\053\026\054\024\055\023\056\033\057\032\060\014\061" +
    "\025\062\020\063\031\064\012\065\030\001\002\000\046" +
    "\005\016\045\013\046\035\047\021\050\034\051\022\052" +
    "\036\053\026\054\024\055\023\056\033\057\032\060\014" +
    "\061\025\062\020\063\031\064\012\065\030\001\002\000" +
    "\050\005\016\016\137\045\013\046\035\047\021\050\034" +
    "\051\022\052\036\053\026\054\024\055\023\056\033\057" +
    "\032\060\014\061\025\062\020\063\031\064\012\065\030" +
    "\001\002\000\004\004\234\001\002\000\050\005\016\016" +
    "\137\045\013\046\035\047\021\050\034\051\022\052\036" +
    "\053\026\054\024\055\023\056\033\057\032\060\014\061" +
    "\025\062\020\063\031\064\012\065\030\001\002\000\046" +
    "\005\016\045\013\046\035\047\021\050\034\051\022\052" +
    "\036\053\026\054\024\055\023\056\033\057\032\060\014" +
    "\061\025\062\020\063\031\064\012\065\030\001\002\000" +
    "\046\005\016\045\013\046\035\047\021\050\034\051\022" +
    "\052\036\053\026\054\024\055\023\056\033\057\032\060" +
    "\014\061\025\062\020\063\031\064\012\065\030\001\002" +
    "\000\004\024\223\001\002\000\046\005\016\045\013\046" +
    "\035\047\021\050\034\051\022\052\036\053\026\054\024" +
    "\055\023\056\033\057\032\060\014\061\025\062\020\063" +
    "\031\064\012\065\030\001\002\000\046\005\016\045\013" +
    "\046\035\047\021\050\034\051\022\052\036\053\026\054" +
    "\024\055\023\056\033\057\032\060\014\061\025\062\020" +
    "\063\031\064\012\065\030\001\002\000\046\005\016\045" +
    "\013\046\035\047\021\050\034\051\022\052\036\053\026" +
    "\054\024\055\023\056\033\057\032\060\014\061\025\062" +
    "\020\063\031\064\012\065\030\001\002\000\046\005\016" +
    "\045\013\046\035\047\021\050\034\051\022\052\036\053" +
    "\026\054\024\055\023\056\033\057\032\060\014\061\025" +
    "\062\020\063\031\064\012\065\030\001\002\000\046\005" +
    "\016\045\013\046\035\047\021\050\034\051\022\052\036" +
    "\053\026\054\024\055\023\056\033\057\032\060\014\061" +
    "\025\062\020\063\031\064\012\065\030\001\002\000\006" +
    "\004\121\067\120\001\002\000\004\036\201\001\002\000" +
    "\004\005\uffe7\001\002\000\110\016\137\025\154\026\166" +
    "\027\164\030\157\031\156\032\152\033\161\034\153\035" +
    "\167\036\176\037\175\040\174\041\173\042\172\043\170" +
    "\044\163\045\013\046\035\047\021\050\034\051\022\052" +
    "\036\053\026\054\024\055\023\056\033\057\032\060\014" +
    "\061\025\062\020\063\031\064\012\065\030\066\162\001" +
    "\002\000\044\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\066\uffd3\001\002" +
    "\000\046\016\140\045\013\046\035\047\021\050\034\051" +
    "\022\052\036\053\026\054\024\055\023\056\033\057\032" +
    "\060\014\061\025\062\020\063\031\064\012\065\030\001" +
    "\002\000\044\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\066\uffd2\001\002" +
    "\000\004\004\207\001\002\000\046\016\211\025\154\026" +
    "\166\027\164\030\157\031\156\032\152\033\161\034\153" +
    "\035\167\036\176\037\175\040\174\041\173\042\172\043" +
    "\170\044\163\066\162\001\002\000\004\005\212\001\002" +
    "\000\044\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\066\uffd1\001\002\000" +
    "\004\004\uffee\001\002\000\004\037\214\001\002\000\004" +
    "\005\uffe6\001\002\000\004\040\216\001\002\000\004\005" +
    "\uffe5\001\002\000\004\041\220\001\002\000\004\005\uffe4" +
    "\001\002\000\004\042\222\001\002\000\004\005\uffe3\001" +
    "\002\000\004\005\uffef\001\002\000\004\043\225\001\002" +
    "\000\004\005\uffe2\001\002\000\004\035\227\001\002\000" +
    "\004\005\uffe8\001\002\000\004\005\uffdf\001\002\000\004" +
    "\005\uffd9\001\002\000\004\026\233\001\002\000\004\005" +
    "\uffd8\001\002\000\046\016\235\025\154\026\166\027\164" +
    "\030\157\031\156\032\152\033\161\034\153\035\167\036" +
    "\176\037\175\040\174\041\173\042\172\043\170\044\163" +
    "\066\162\001\002\000\004\024\236\001\002\000\004\005" +
    "\ufff0\001\002\000\004\005\uffdc\001\002\000\004\005\uffdb" +
    "\001\002\000\004\027\242\001\002\000\004\005\uffda\001" +
    "\002\000\004\044\244\001\002\000\004\005\uffe1\001\002" +
    "\000\004\066\246\001\002\000\004\005\uffe0\001\002\000" +
    "\004\005\uffd5\001\002\000\004\033\252\001\002\000\004" +
    "\005\uffdd\001\002\000\004\005\uffd4\001\002\000\004\030" +
    "\254\001\002\000\004\005\uffeb\001\002\000\004\031\256" +
    "\001\002\000\004\005\uffea\001\002\000\004\004\uffed\001" +
    "\002\000\004\025\261\001\002\000\004\005\uffec\001\002" +
    "\000\004\005\uffd7\001\002\000\004\034\265\001\002\000" +
    "\004\005\uffde\001\002\000\004\005\uffd6\001\002\000\004" +
    "\032\267\001\002\000\004\005\uffe9\001\002\000\010\016" +
    "\272\021\103\024\101\001\002\000\004\004\ufffb\001\002" +
    "\000\004\020\273\001\002\000\004\005\274\001\002\000" +
    "\004\002\ufffd\001\002\000\004\017\276\001\002\000\050" +
    "\005\uffbf\016\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\001" +
    "\002\000\004\017\300\001\002\000\050\005\uffca\016\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\001\002\000\004\017" +
    "\302\001\002\000\050\005\uffbb\016\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\064\uffbb\065\uffbb\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\002\006\003\005\001\001\000\004\003" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\016\024\026\025" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\077\005\074\013\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\270\001\001\000\004\006\103\001\001\000\002\001" +
    "\001\000\010\023\147\024\026\025\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\111\010\107\011\106\001\001\000\012" +
    "\023\133\024\135\025\014\026\134\001\001\000\006\007" +
    "\130\011\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\114\024\026\025\014\001\001\000\002\001" +
    "\001\000\010\030\121\031\116\032\115\001\001\000\002" +
    "\001\001\000\004\032\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\154\014\164\015" +
    "\157\001\001\000\012\016\265\023\176\024\026\025\014" +
    "\001\001\000\016\016\262\021\263\023\176\024\135\025" +
    "\014\026\261\001\001\000\012\016\257\023\176\024\026" +
    "\025\014\001\001\000\002\001\001\000\012\016\254\023" +
    "\176\024\026\025\014\001\001\000\012\016\252\023\176" +
    "\024\026\025\014\001\001\000\002\001\001\000\016\016" +
    "\247\022\250\023\176\024\135\025\014\026\246\001\001" +
    "\000\012\016\244\023\176\024\026\025\014\001\001\000" +
    "\012\016\242\023\176\024\026\025\014\001\001\000\016" +
    "\016\240\023\176\024\135\025\014\026\237\027\236\001" +
    "\001\000\002\001\001\000\016\016\231\020\227\023\176" +
    "\024\135\025\014\026\230\001\001\000\012\016\225\023" +
    "\176\024\026\025\014\001\001\000\012\016\223\023\176" +
    "\024\026\025\014\001\001\000\002\001\001\000\012\016" +
    "\220\023\176\024\026\025\014\001\001\000\012\016\216" +
    "\023\176\024\026\025\014\001\001\000\012\016\214\023" +
    "\176\024\026\025\014\001\001\000\012\016\212\023\176" +
    "\024\026\025\014\001\001\000\012\016\177\023\176\024" +
    "\026\025\014\001\001\000\010\030\201\031\116\032\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\154\014\205\017\202\024\203\025\014\026\204\001\001" +
    "\000\002\001\001\000\004\025\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();


	  public ParserCC(LexemaCC lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCC$actions {
  private final ParserCC parser;

  /** Constructor */
  CUP$ParserCC$actions(ParserCC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action_part00000000(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCC$result;

      /* select the action based on the action number */
      switch (CUP$ParserCC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)).value;
		RESULT = start_val;
              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCC$parser.done_parsing();
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etiqueta_inicial ::= OPEN C_CC insertar_proms derivar_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",1, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // derivar_etiqueta_inicial ::= bucle_etiquetas OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // derivar_etiqueta_inicial ::= OPEN BAR C_CC CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bucle_etiquetas ::= bucle_etiquetas hijos_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bucle_etiquetas ::= hijos_etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_etiquetas",9, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // hijos_etiqueta_inicial ::= OPEN etiquetas CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_etiqueta_inicial",2, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiquetas_head ::= etiquetas_head etiqueta_head 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiquetas_head ::= etiqueta_head 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_head",6, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiqueta_head ::= OPEN C_TITLE insertar_proms contenido BAR C_TITLE CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiqueta_head ::= derivando_link insertar_proms OPEN BAR C_LINK CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiqueta_head ::= derivando_link insertar_promos_auto_cerrado CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",5, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // derivando_link ::= OPEN C_LINK 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivando_link",7, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiquetas ::= C_HEAD CLOSE etiquetas_head OPEN BAR C_HEAD 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetas ::= C_BODY insertar_proms OPEN derivar_body 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // derivar_body ::= bucle_body OPEN BAR C_BODY 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // derivar_body ::= BAR C_BODY 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_body",11, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bucle_body ::= bucle_body OPEN etiquetas_body CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bucle_body ::= etiquetas_body CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_body",10, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiquetas_body ::= C_SPAM hijos_hijos_body C_SPAM 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiquetas_body ::= C_SELECT hijos_hijos_body C_SELECT 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_body ::= C_OPTION hijos_hijos_body C_OPTION 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetas_body ::= C_DIV hijos_hijos_body C_DIV 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetas_body ::= C_BUTTON hijos_hijos_body C_BUTTON 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // etiquetas_body ::= C_H1 hijos_hijos_body C_H1 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // etiquetas_body ::= C_H2 hijos_hijos_body C_H2 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // etiquetas_body ::= C_H3 hijos_hijos_body C_H3 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiquetas_body ::= C_H4 hijos_hijos_body C_H4 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // etiquetas_body ::= C_H5 hijos_hijos_body C_H5 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiquetas_body ::= C_H6 hijos_hijos_body C_H6 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etiquetas_body ::= C_P hijos_hijos_body C_P 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etiquetas_body ::= C_FORM hijos_hijos_body C_FORM 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiquetas_body ::= C_INPUT auto_cerradura_input 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // etiquetas_body ::= C_BR auto_cerradura_br 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // etiquetas_body ::= C_IMG auto_cerradura_img 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // etiquetas_body ::= C_TEXTAREA auto_cerradura_text_area 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("etiquetas_body",8, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // auto_cerradura_text_area ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_text_area",21, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // auto_cerradura_text_area ::= hijos_hijos_body C_TEXTAREA 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_text_area",21, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // auto_cerradura_input ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // auto_cerradura_input ::= hijos_hijos_body C_INPUT 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_input",14, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // auto_cerradura_br ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // auto_cerradura_br ::= hijos_hijos_body C_BR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_br",15, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // auto_cerradura_img ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",16, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // auto_cerradura_img ::= hijos_hijos_body C_IMG 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("auto_cerradura_img",16, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // hijos_hijos_body ::= insertar_proms contenido derivar_hijos_hijos_body 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("hijos_hijos_body",12, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // derivar_hijos_hijos_body ::= insertar_promos_auto_cerrado 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // derivar_hijos_hijos_body ::= bucle_body OPEN BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("derivar_hijos_hijos_body",13, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // insertar_promos_auto_cerrado ::= BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_promos_auto_cerrado",20, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // insertar_promos_auto_cerrado ::= bucle_proms BAR 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_promos_auto_cerrado",20, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // insertar_proms ::= CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_proms",17, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // insertar_proms ::= bucle_proms CLOSE 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("insertar_proms",17, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bucle_proms ::= bucle_proms proms 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_proms",18, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bucle_proms ::= proms 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_proms",18, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // proms ::= HREF EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // proms ::= BACKGROUND EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // proms ::= COLOR EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // proms ::= FONT_SIZE EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // proms ::= FONT_FAMILY EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // proms ::= FONT_ALIG EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // proms ::= TYPE EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // proms ::= ID EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // proms ::= NAME EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // proms ::= COLS EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // proms ::= ROWS EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // proms ::= CLASS EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // proms ::= SRC EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // proms ::= WIDTH EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // proms ::= HEIGHT EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // proms ::= ALT EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // proms ::= ONCLICK EQUAL STRING 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("proms",19, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contenido ::= bucle_contenido OPEN 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contenido ::= OPEN 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bucle_contenido ::= bucle_contenido dato_contenido 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_contenido",23, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.elementAt(CUP$ParserCC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bucle_contenido ::= dato_contenido 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("bucle_contenido",23, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dato_contenido ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$ParserCC$result = parser.getSymbolFactory().newSymbol("dato_contenido",24, ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCC$stack.peek()), RESULT);
            }
          return CUP$ParserCC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCC$do_action(
    int                        CUP$ParserCC$act_num,
    java_cup.runtime.lr_parser CUP$ParserCC$parser,
    java.util.Stack            CUP$ParserCC$stack,
    int                        CUP$ParserCC$top)
    throws java.lang.Exception
    {
              return CUP$ParserCC$do_action_part00000000(
                               CUP$ParserCC$act_num,
                               CUP$ParserCC$parser,
                               CUP$ParserCC$stack,
                               CUP$ParserCC$top);
    }
}

}
